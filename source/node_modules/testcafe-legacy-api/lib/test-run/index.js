'use strict';

exports.__esModule = true;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readFileRelative = require('read-file-relative');

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _command = require('./command');

var _command2 = _interopRequireDefault(_command);

var _type = require('../test-run-error/type');

var _type2 = _interopRequireDefault(_type);

var _formattableAdapter = require('../test-run-error/formattable-adapter');

var _formattableAdapter2 = _interopRequireDefault(_formattableAdapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Const
const TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/index.js.mustache');
const IFRAME_TEST_RUN_TEMPLATE = (0, _readFileRelative.readSync)('../client/test-run/iframe.js.mustache');

class LegacyTestRun extends _testcafeHammerhead.Session {
    constructor(test, browserConnection, screenshotCapturer, warningLog, opts) {
        var uploadsRoot = _path2.default.dirname(test.fixture.path);

        super(uploadsRoot);

        this.unstable = false;

        this.opts = opts;
        this.test = test;
        this.browserConnection = browserConnection;

        this.isFileDownloading = false;

        this.errs = [];
        this.nativeDialogsInfo = null;
        this.nativeDialogsInfoTimeStamp = 0;
        this.stepsSharedData = {};
        this.screenshotCapturer = screenshotCapturer;

        this.injectable.scripts.push('/testcafe-core.js');
        this.injectable.scripts.push('/testcafe-ui.js');
        this.injectable.scripts.push('/testcafe-automation.js');
        this.injectable.scripts.push('/testcafe-legacy-runner.js');
        this.injectable.styles.push('/testcafe-ui-styles.css');
    }

    getPayloadScript() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var sharedJs = _this.test.fixture.getSharedJs();

            return _mustache2.default.render(TEST_RUN_TEMPLATE, {
                stepNames: (0, _stringify2.default)(_this.test.stepData.names),
                testSteps: _this.test.stepData.js,
                sharedJs: sharedJs,
                testRunId: _this.id,
                browserId: _this.browserConnection.id,
                browserHeartbeatUrl: _this.browserConnection.heartbeatUrl,
                browserStatusUrl: _this.browserConnection.statusDoneUrl,
                takeScreenshots: _this.screenshotCapturer.enabled,
                takeScreenshotsOnFails: _this.opts.takeScreenshotsOnFails,
                skipJsErrors: _this.opts.skipJsErrors,
                nativeDialogsInfo: (0, _stringify2.default)(_this.nativeDialogsInfo),
                selectorTimeout: _this.opts.selectorTimeout,
                canUseDefaultWindowActions: (0, _stringify2.default)((yield _this.browserConnection.canUseDefaultWindowActions()))
            });
        })();
    }

    getIframePayloadScript(iframeWithoutSrc) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var sharedJs = _this2.test.fixture.getSharedJs();
            var payloadScript = _mustache2.default.render(IFRAME_TEST_RUN_TEMPLATE, {
                sharedJs: sharedJs,
                takeScreenshotsOnFails: _this2.opts.takeScreenshotsOnFails,
                skipJsErrors: _this2.opts.skipJsErrors,
                nativeDialogsInfo: (0, _stringify2.default)(_this2.nativeDialogsInfo),
                selectorTimeout: _this2.opts.selectorTimeout
            });

            return iframeWithoutSrc ? 'var isIFrameWithoutSrc = true;' + payloadScript : payloadScript;
        })();
    }

    _addError(err) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var screenshotPath = null;
            var callsite = err.__sourceIndex !== void 0 && err.__sourceIndex !== null && _this3.test.sourceIndex[err.__sourceIndex];

            try {
                screenshotPath = yield _this3.screenshotCapturer.captureError(err);
            } catch (e) {
                // NOTE: swallow the error silently if we can't take screenshots for some
                // reason (e.g. we don't have permissions to write a screenshot file).
            }

            var errAdapter = new _formattableAdapter2.default(err, {
                userAgent: _this3.browserConnection.userAgent,
                screenshotPath: screenshotPath,
                callsite: callsite
            });

            _this3.errs.push(errAdapter);
        })();
    }

    _fatalError(err) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this4._addError(err);
            _this4.emit('done');
        })();
    }

    getAuthCredentials() {
        return this.test.fixture.authCredentials;
    }

    handleFileDownload() {
        this.isFileDownloading = true;
    }

    handlePageError(ctx, errMsg) {
        this._fatalError({
            type: _type2.default.pageNotLoaded,
            message: errMsg
        });

        ctx.redirect(this.browserConnection.forcedIdleUrl);
    }

    start() {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            // NOTE: required to keep API similar to TestRun. Just do nothing here.
            _this5.emit('start');
        })();
    }
}

exports.default = LegacyTestRun; // Service message handlers

var ServiceMessages = LegacyTestRun.prototype;

ServiceMessages[_command2.default.fatalError] = function (msg) {
    return this._fatalError(msg.err);
};

ServiceMessages[_command2.default.assertionFailed] = function (msg) {
    return this._addError(msg.err);
};

ServiceMessages[_command2.default.done] = function () {
    this.emit('done');
};

ServiceMessages[_command2.default.setStepsSharedData] = function (msg) {
    this.stepsSharedData = msg.stepsSharedData;
};

ServiceMessages[_command2.default.getStepsSharedData] = function () {
    return this.stepsSharedData;
};

ServiceMessages[_command2.default.getAndUncheckFileDownloadingFlag] = function () {
    var isFileDownloading = this.isFileDownloading;

    this.isFileDownloading = false;

    return isFileDownloading;
};

ServiceMessages[_command2.default.waitForFileDownload] = function () {
    // NOTE: required to keep API similar to TestRun. Just do nothing here.
};

ServiceMessages[_command2.default.nativeDialogsInfoSet] = function (msg) {
    if (msg.timeStamp >= this.nativeDialogsInfoTimeStamp) {
        //NOTE: the server can get messages in the wrong sequence if they was sent with a little distance (several milliseconds),
        // we don't take to account old messages
        this.nativeDialogsInfoTimeStamp = msg.timeStamp;
        this.nativeDialogsInfo = msg.info;
    }
};

ServiceMessages[_command2.default.takeScreenshot] = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (msg) {
        try {
            return yield this.screenshotCapturer.captureAction(msg);
        } catch (e) {
            // NOTE: swallow the error silently if we can't take screenshots for some
            // reason (e.g. we don't have permissions to write a screenshot file).
            return null;
        }
    });

    return function (_x) {
        return _ref.apply(this, arguments);
    };
})();
module.exports = exports['default'];