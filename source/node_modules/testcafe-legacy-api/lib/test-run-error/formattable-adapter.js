'use strict';

exports.__esModule = true;

var _lodash = require('lodash');

var _highlightEs = require('highlight-es');

var _highlightEs2 = _interopRequireDefault(_highlightEs);

var _parse = require('parse5');

var _parse2 = _interopRequireDefault(_parse);

var _templates = require('./templates');

var _templates2 = _interopRequireDefault(_templates);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

var renderer = ['string', 'punctuator', 'keyword', 'number', 'regex', 'comment', 'invalid'].reduce((syntaxRenderer, tokenType) => {
    syntaxRenderer[tokenType] = str => `<span class="syntax-${tokenType}">${(0, _lodash.escape)(str)}</span>`;

    return syntaxRenderer;
}, {});

class TestRunErrorFormattableAdapter {
    constructor(err, metaInfo) {
        this.TEMPLATES = _templates2.default;

        this.userAgent = metaInfo.userAgent;
        this.screenshotPath = metaInfo.screenshotPath;
        this.testRunState = metaInfo.testRunState;

        (0, _lodash.assignIn)(this, err);

        this.callsite = this.callsite || metaInfo.callsite;
    }

    static _getSelector(node) {
        var classAttr = (0, _lodash.find)(node.attrs, { name: 'class' });
        var cls = classAttr && classAttr.value;

        return cls ? `${node.tagName} ${cls}` : node.tagName;
    }

    static _decorateHtml(node, decorator) {
        var msg = '';

        if (node.nodeName === '#text') msg = node.value;else {
            if (node.childNodes.length) {
                msg += node.childNodes.map(childNode => TestRunErrorFormattableAdapter._decorateHtml(childNode, decorator)).join('');
            }

            if (node.nodeName !== '#document-fragment') {
                var selector = TestRunErrorFormattableAdapter._getSelector(node);

                msg = decorator[selector](msg, node.attrs);
            }
        }

        return msg;
    }

    getErrorMarkup(viewportWidth) {
        return this.TEMPLATES[this.type](this, viewportWidth);
    }

    getCallsiteMarkup() {
        if (!this.callsite) return null;

        var code = (0, _highlightEs2.default)(this.callsite, renderer);
        var lines = code.split(NEWLINE);
        var lastLine = lines.pop();

        lastLine = `<div class="code-line-last">${lastLine}</div>`;
        lines = lines.map(line => `<div class="code-line"><div class="code-line-src">${line}</div></div>`);

        return `<div class="code-frame">${lines.join('')}${lastLine}</div>`;
    }

    formatMessage(decorator, viewportWidth) {
        var msgHtml = this.getErrorMarkup(viewportWidth);
        var fragment = _parse2.default.parseFragment(msgHtml);

        return TestRunErrorFormattableAdapter._decorateHtml(fragment, decorator);
    }
}
exports.default = TestRunErrorFormattableAdapter;
module.exports = exports['default'];