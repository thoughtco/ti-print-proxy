"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const mustache_1 = __importDefault(require("mustache"));
const os_family_1 = __importDefault(require("os-family"));
const exec_1 = require("../utils/exec");
const fs_exists_promised_1 = __importDefault(require("../utils/fs-exists-promised"));
const errors_1 = require("../errors");
async function checkBrowserPath(browserInfo) {
    if (!browserInfo.path) {
        //NOTE: Path may be undefined when winOpenCmdTemplate is specified (e.g. MS Edge)
        if (browserInfo.winOpenCmdTemplate)
            return;
        throw new errors_1.BrowserPathNotSetError();
    }
    var fileExists = await fs_exists_promised_1.default(browserInfo.path);
    if (!fileExists)
        throw new errors_1.UnableToRunBrowsersError({ path: browserInfo.path });
}
function getWinOpenCommand(browserInfo, pageUrl) {
    if (browserInfo.winOpenCmdTemplate) {
        return mustache_1.default.render(browserInfo.winOpenCmdTemplate, {
            pageUrl: pageUrl
        });
    }
    var browserDirPath = path_1.default.dirname(browserInfo.path);
    var browserExecFileName = path_1.default.basename(browserInfo.path);
    return `start /D "${browserDirPath}" .\\${browserExecFileName} ${browserInfo.cmd} ${pageUrl}`;
}
function getMacOpenCommand(browserInfo, pageUrl) {
    return mustache_1.default.render(browserInfo.macOpenCmdTemplate, {
        path: browserInfo.path,
        cmd: browserInfo.cmd,
        pageUrl: pageUrl
    });
}
function getLinuxOpenCommand(browserInfo, pageUrl) {
    return `"${browserInfo.path}" ${browserInfo.cmd} "${pageUrl}" 0<&- >/dev/null 2>&1 &`;
}
var getOpenCommand = null;
if (os_family_1.default.win)
    getOpenCommand = getWinOpenCommand;
else if (os_family_1.default.mac)
    getOpenCommand = getMacOpenCommand;
else if (os_family_1.default.linux)
    getOpenCommand = getLinuxOpenCommand;
/**
 * Opens the web page in a new instance of the browser.
 * @function
 * @async
 * @name open
 * @param {BrowserInfo} browserInfo - Provides information on the browser where the web page should be opened.
 * @param {string} pageUrl - Specifies the web page URL.
 */
async function default_1(browserInfo, pageUrl) {
    await checkBrowserPath(browserInfo);
    if (!getOpenCommand)
        return;
    var command = getOpenCommand(browserInfo, pageUrl);
    try {
        await exec_1.exec(command);
    }
    catch (err) {
        throw new errors_1.UnableToRunBrowsersError({ path: browserInfo.path });
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvb3Blbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF3QjtBQUN4Qix3REFBZ0M7QUFDaEMsMERBQTJCO0FBQzNCLHdDQUFxQztBQUNyQyxxRkFBaUQ7QUFDakQsc0NBQTZFO0FBRzdFLEtBQUssVUFBVSxnQkFBZ0IsQ0FBRSxXQUFXO0lBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1FBQ25CLGlGQUFpRjtRQUNqRixJQUFJLFdBQVcsQ0FBQyxrQkFBa0I7WUFDOUIsT0FBTztRQUVYLE1BQU0sSUFBSSwrQkFBc0IsRUFBRSxDQUFDO0tBQ3RDO0lBRUQsSUFBSSxVQUFVLEdBQUcsTUFBTSw0QkFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsVUFBVTtRQUNYLE1BQU0sSUFBSSxpQ0FBd0IsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBRSxXQUFXLEVBQUUsT0FBTztJQUM1QyxJQUFJLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRTtRQUNoQyxPQUFPLGtCQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRTtZQUNuRCxPQUFPLEVBQUUsT0FBTztTQUNuQixDQUFDLENBQUM7S0FDTjtJQUVELElBQUksY0FBYyxHQUFRLGNBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pELElBQUksbUJBQW1CLEdBQUcsY0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFMUQsT0FBTyxhQUFhLGNBQWMsUUFBUSxtQkFBbUIsSUFBSSxXQUFXLENBQUMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ2xHLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFFLFdBQVcsRUFBRSxPQUFPO0lBQzVDLE9BQU8sa0JBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFO1FBQ25ELElBQUksRUFBSyxXQUFXLENBQUMsSUFBSTtRQUN6QixHQUFHLEVBQU0sV0FBVyxDQUFDLEdBQUc7UUFDeEIsT0FBTyxFQUFFLE9BQU87S0FDbkIsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUUsV0FBVyxFQUFFLE9BQU87SUFDOUMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLEdBQUcsS0FBSyxPQUFPLDBCQUEwQixDQUFDO0FBQzFGLENBQUM7QUFFRCxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFFMUIsSUFBSSxtQkFBRSxDQUFDLEdBQUc7SUFDTixjQUFjLEdBQUcsaUJBQWlCLENBQUM7S0FDbEMsSUFBSSxtQkFBRSxDQUFDLEdBQUc7SUFDWCxjQUFjLEdBQUcsaUJBQWlCLENBQUM7S0FDbEMsSUFBSSxtQkFBRSxDQUFDLEtBQUs7SUFDYixjQUFjLEdBQUcsbUJBQW1CLENBQUM7QUFFekM7Ozs7Ozs7R0FPRztBQUNZLEtBQUssb0JBQVcsV0FBVyxFQUFFLE9BQU87SUFDL0MsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVwQyxJQUFJLENBQUMsY0FBYztRQUNmLE9BQU87SUFFWCxJQUFJLE9BQU8sR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRW5ELElBQUk7UUFDQSxNQUFNLFdBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN2QjtJQUNELE9BQU8sR0FBRyxFQUFFO1FBQ1IsTUFBTSxJQUFJLGlDQUF3QixDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ2xFO0FBQ0wsQ0FBQztBQWRELDRCQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgTXVzdGFjaGUgZnJvbSAnbXVzdGFjaGUnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnLi4vdXRpbHMvZXhlYyc7XG5pbXBvcnQgZXhpc3RzIGZyb20gJy4uL3V0aWxzL2ZzLWV4aXN0cy1wcm9taXNlZCc7XG5pbXBvcnQgeyBCcm93c2VyUGF0aE5vdFNldEVycm9yLCBVbmFibGVUb1J1bkJyb3dzZXJzRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQnJvd3NlclBhdGggKGJyb3dzZXJJbmZvKSB7XG4gICAgaWYgKCFicm93c2VySW5mby5wYXRoKSB7XG4gICAgICAgIC8vTk9URTogUGF0aCBtYXkgYmUgdW5kZWZpbmVkIHdoZW4gd2luT3BlbkNtZFRlbXBsYXRlIGlzIHNwZWNpZmllZCAoZS5nLiBNUyBFZGdlKVxuICAgICAgICBpZiAoYnJvd3NlckluZm8ud2luT3BlbkNtZFRlbXBsYXRlKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRocm93IG5ldyBCcm93c2VyUGF0aE5vdFNldEVycm9yKCk7XG4gICAgfVxuXG4gICAgdmFyIGZpbGVFeGlzdHMgPSBhd2FpdCBleGlzdHMoYnJvd3NlckluZm8ucGF0aCk7XG5cbiAgICBpZiAoIWZpbGVFeGlzdHMpXG4gICAgICAgIHRocm93IG5ldyBVbmFibGVUb1J1bkJyb3dzZXJzRXJyb3IoeyBwYXRoOiBicm93c2VySW5mby5wYXRoIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5PcGVuQ29tbWFuZCAoYnJvd3NlckluZm8sIHBhZ2VVcmwpIHtcbiAgICBpZiAoYnJvd3NlckluZm8ud2luT3BlbkNtZFRlbXBsYXRlKSB7XG4gICAgICAgIHJldHVybiBNdXN0YWNoZS5yZW5kZXIoYnJvd3NlckluZm8ud2luT3BlbkNtZFRlbXBsYXRlLCB7XG4gICAgICAgICAgICBwYWdlVXJsOiBwYWdlVXJsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBicm93c2VyRGlyUGF0aCAgICAgID0gcGF0aC5kaXJuYW1lKGJyb3dzZXJJbmZvLnBhdGgpO1xuICAgIHZhciBicm93c2VyRXhlY0ZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShicm93c2VySW5mby5wYXRoKTtcblxuICAgIHJldHVybiBgc3RhcnQgL0QgXCIke2Jyb3dzZXJEaXJQYXRofVwiIC5cXFxcJHticm93c2VyRXhlY0ZpbGVOYW1lfSAke2Jyb3dzZXJJbmZvLmNtZH0gJHtwYWdlVXJsfWA7XG59XG5cbmZ1bmN0aW9uIGdldE1hY09wZW5Db21tYW5kIChicm93c2VySW5mbywgcGFnZVVybCkge1xuICAgIHJldHVybiBNdXN0YWNoZS5yZW5kZXIoYnJvd3NlckluZm8ubWFjT3BlbkNtZFRlbXBsYXRlLCB7XG4gICAgICAgIHBhdGg6ICAgIGJyb3dzZXJJbmZvLnBhdGgsXG4gICAgICAgIGNtZDogICAgIGJyb3dzZXJJbmZvLmNtZCxcbiAgICAgICAgcGFnZVVybDogcGFnZVVybFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRMaW51eE9wZW5Db21tYW5kIChicm93c2VySW5mbywgcGFnZVVybCkge1xuICAgIHJldHVybiBgXCIke2Jyb3dzZXJJbmZvLnBhdGh9XCIgJHticm93c2VySW5mby5jbWR9IFwiJHtwYWdlVXJsfVwiIDA8Ji0gPi9kZXYvbnVsbCAyPiYxICZgO1xufVxuXG52YXIgZ2V0T3BlbkNvbW1hbmQgPSBudWxsO1xuXG5pZiAoT1Mud2luKVxuICAgIGdldE9wZW5Db21tYW5kID0gZ2V0V2luT3BlbkNvbW1hbmQ7XG5lbHNlIGlmIChPUy5tYWMpXG4gICAgZ2V0T3BlbkNvbW1hbmQgPSBnZXRNYWNPcGVuQ29tbWFuZDtcbmVsc2UgaWYgKE9TLmxpbnV4KVxuICAgIGdldE9wZW5Db21tYW5kID0gZ2V0TGludXhPcGVuQ29tbWFuZDtcblxuLyoqXG4gKiBPcGVucyB0aGUgd2ViIHBhZ2UgaW4gYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGJyb3dzZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBhc3luY1xuICogQG5hbWUgb3BlblxuICogQHBhcmFtIHtCcm93c2VySW5mb30gYnJvd3NlckluZm8gLSBQcm92aWRlcyBpbmZvcm1hdGlvbiBvbiB0aGUgYnJvd3NlciB3aGVyZSB0aGUgd2ViIHBhZ2Ugc2hvdWxkIGJlIG9wZW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYWdlVXJsIC0gU3BlY2lmaWVzIHRoZSB3ZWIgcGFnZSBVUkwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChicm93c2VySW5mbywgcGFnZVVybCkge1xuICAgIGF3YWl0IGNoZWNrQnJvd3NlclBhdGgoYnJvd3NlckluZm8pO1xuXG4gICAgaWYgKCFnZXRPcGVuQ29tbWFuZClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIGNvbW1hbmQgPSBnZXRPcGVuQ29tbWFuZChicm93c2VySW5mbywgcGFnZVVybCk7XG5cbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBleGVjKGNvbW1hbmQpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBVbmFibGVUb1J1bkJyb3dzZXJzRXJyb3IoeyBwYXRoOiBicm93c2VySW5mby5wYXRoIH0pO1xuICAgIH1cbn1cbiJdfQ==