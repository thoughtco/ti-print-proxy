"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const os_family_1 = __importDefault(require("os-family"));
const read_file_relative_1 = require("read-file-relative");
const linux_platform_info_1 = require("linux-platform-info");
const MAC_APP_NAME = 'TestCafe Browser Tools.app';
const MAC_BINARY_PATH = binary => path_1.join(__dirname, `../bin/mac/${MAC_APP_NAME}/Contents/MacOS/${binary}`);
var BINARIES = void 0;
if (os_family_1.default.win) {
    BINARIES = {
        findWindow: read_file_relative_1.toAbsPath('../bin/win/find-window.exe'),
        getWindowSize: read_file_relative_1.toAbsPath('../bin/win/get-window-size.exe'),
        close: read_file_relative_1.toAbsPath('../bin/win/close.exe'),
        screenshot: read_file_relative_1.toAbsPath('../bin/win/screenshot.exe'),
        generateThumbnail: read_file_relative_1.toAbsPath('../bin/win/generate-thumbnail.exe'),
        resize: read_file_relative_1.toAbsPath('../bin/win/resize.exe'),
        maximize: read_file_relative_1.toAbsPath('../bin/win/maximize.exe'),
        bringToFront: read_file_relative_1.toAbsPath('../bin/win/bring-to-front.exe')
    };
}
else if (os_family_1.default.mac) {
    BINARIES = {
        app: MAC_BINARY_PATH('testcafe-browser-tools'),
        open: 'open',
        findWindow: 'find-window',
        getWindowSize: 'get-window-size',
        getWindowBounds: 'get-window-bounds',
        getWindowMaxBounds: 'get-window-max-bounds',
        setWindowBounds: 'set-window-bounds',
        close: 'close',
        screenshot: 'screenshot',
        resize: 'resize',
        generateThumbnail: 'generate-thumbnail',
        bringToFront: 'bring-to-front'
    };
}
else if (os_family_1.default.linux) {
    BINARIES = {
        findWindow: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/find-window`),
        close: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/close`),
        getWindowSize: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/get-window-size`),
        resize: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/resize`),
        maximize: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/maximize`),
        screenshot: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/screenshot`),
        generateThumbnail: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/generate-thumbnail`),
        bringToFront: read_file_relative_1.toAbsPath(`../bin/linux/${linux_platform_info_1.platform}/bring-to-front`)
    };
}
else
    BINARIES = {};
exports.default = BINARIES;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluYXJpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmluYXJpZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrQkFBNEI7QUFDNUIsMERBQTJCO0FBQzNCLDJEQUErQztBQUMvQyw2REFBK0M7QUFHL0MsTUFBTSxZQUFZLEdBQU0sNEJBQTRCLENBQUM7QUFDckQsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsWUFBWSxtQkFBbUIsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUV6RyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUV0QixJQUFJLG1CQUFFLENBQUMsR0FBRyxFQUFFO0lBQ1IsUUFBUSxHQUFHO1FBQ1AsVUFBVSxFQUFTLDhCQUFTLENBQUMsNEJBQTRCLENBQUM7UUFDMUQsYUFBYSxFQUFNLDhCQUFTLENBQUMsZ0NBQWdDLENBQUM7UUFDOUQsS0FBSyxFQUFjLDhCQUFTLENBQUMsc0JBQXNCLENBQUM7UUFDcEQsVUFBVSxFQUFTLDhCQUFTLENBQUMsMkJBQTJCLENBQUM7UUFDekQsaUJBQWlCLEVBQUUsOEJBQVMsQ0FBQyxtQ0FBbUMsQ0FBQztRQUNqRSxNQUFNLEVBQWEsOEJBQVMsQ0FBQyx1QkFBdUIsQ0FBQztRQUNyRCxRQUFRLEVBQVcsOEJBQVMsQ0FBQyx5QkFBeUIsQ0FBQztRQUN2RCxZQUFZLEVBQU8sOEJBQVMsQ0FBQywrQkFBK0IsQ0FBQztLQUNoRSxDQUFDO0NBQ0w7S0FDSSxJQUFJLG1CQUFFLENBQUMsR0FBRyxFQUFFO0lBQ2IsUUFBUSxHQUFHO1FBQ1AsR0FBRyxFQUFpQixlQUFlLENBQUMsd0JBQXdCLENBQUM7UUFDN0QsSUFBSSxFQUFnQixNQUFNO1FBQzFCLFVBQVUsRUFBVSxhQUFhO1FBQ2pDLGFBQWEsRUFBTyxpQkFBaUI7UUFDckMsZUFBZSxFQUFLLG1CQUFtQjtRQUN2QyxrQkFBa0IsRUFBRSx1QkFBdUI7UUFDM0MsZUFBZSxFQUFLLG1CQUFtQjtRQUN2QyxLQUFLLEVBQWUsT0FBTztRQUMzQixVQUFVLEVBQVUsWUFBWTtRQUNoQyxNQUFNLEVBQWMsUUFBUTtRQUM1QixpQkFBaUIsRUFBRyxvQkFBb0I7UUFDeEMsWUFBWSxFQUFRLGdCQUFnQjtLQUN2QyxDQUFDO0NBQ0w7S0FDSSxJQUFJLG1CQUFFLENBQUMsS0FBSyxFQUFFO0lBQ2YsUUFBUSxHQUFHO1FBQ1AsVUFBVSxFQUFTLDhCQUFTLENBQUMsZ0JBQWdCLDhCQUFRLGNBQWMsQ0FBQztRQUNwRSxLQUFLLEVBQWMsOEJBQVMsQ0FBQyxnQkFBZ0IsOEJBQVEsUUFBUSxDQUFDO1FBQzlELGFBQWEsRUFBTSw4QkFBUyxDQUFDLGdCQUFnQiw4QkFBUSxrQkFBa0IsQ0FBQztRQUN4RSxNQUFNLEVBQWEsOEJBQVMsQ0FBQyxnQkFBZ0IsOEJBQVEsU0FBUyxDQUFDO1FBQy9ELFFBQVEsRUFBVyw4QkFBUyxDQUFDLGdCQUFnQiw4QkFBUSxXQUFXLENBQUM7UUFDakUsVUFBVSxFQUFTLDhCQUFTLENBQUMsZ0JBQWdCLDhCQUFRLGFBQWEsQ0FBQztRQUNuRSxpQkFBaUIsRUFBRSw4QkFBUyxDQUFDLGdCQUFnQiw4QkFBUSxxQkFBcUIsQ0FBQztRQUMzRSxZQUFZLEVBQU8sOEJBQVMsQ0FBQyxnQkFBZ0IsOEJBQVEsaUJBQWlCLENBQUM7S0FDMUUsQ0FBQztDQUNMOztJQUVHLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFFbEIsa0JBQWUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyB0b0Fic1BhdGggfSBmcm9tICdyZWFkLWZpbGUtcmVsYXRpdmUnO1xuaW1wb3J0IHsgcGxhdGZvcm0gfSBmcm9tICdsaW51eC1wbGF0Zm9ybS1pbmZvJztcblxuXG5jb25zdCBNQUNfQVBQX05BTUUgICAgPSAnVGVzdENhZmUgQnJvd3NlciBUb29scy5hcHAnO1xuY29uc3QgTUFDX0JJTkFSWV9QQVRIID0gYmluYXJ5ID0+IGpvaW4oX19kaXJuYW1lLCBgLi4vYmluL21hYy8ke01BQ19BUFBfTkFNRX0vQ29udGVudHMvTWFjT1MvJHtiaW5hcnl9YCk7XG5cbnZhciBCSU5BUklFUyA9IHZvaWQgMDtcblxuaWYgKE9TLndpbikge1xuICAgIEJJTkFSSUVTID0ge1xuICAgICAgICBmaW5kV2luZG93OiAgICAgICAgdG9BYnNQYXRoKCcuLi9iaW4vd2luL2ZpbmQtd2luZG93LmV4ZScpLFxuICAgICAgICBnZXRXaW5kb3dTaXplOiAgICAgdG9BYnNQYXRoKCcuLi9iaW4vd2luL2dldC13aW5kb3ctc2l6ZS5leGUnKSxcbiAgICAgICAgY2xvc2U6ICAgICAgICAgICAgIHRvQWJzUGF0aCgnLi4vYmluL3dpbi9jbG9zZS5leGUnKSxcbiAgICAgICAgc2NyZWVuc2hvdDogICAgICAgIHRvQWJzUGF0aCgnLi4vYmluL3dpbi9zY3JlZW5zaG90LmV4ZScpLFxuICAgICAgICBnZW5lcmF0ZVRodW1ibmFpbDogdG9BYnNQYXRoKCcuLi9iaW4vd2luL2dlbmVyYXRlLXRodW1ibmFpbC5leGUnKSxcbiAgICAgICAgcmVzaXplOiAgICAgICAgICAgIHRvQWJzUGF0aCgnLi4vYmluL3dpbi9yZXNpemUuZXhlJyksXG4gICAgICAgIG1heGltaXplOiAgICAgICAgICB0b0Fic1BhdGgoJy4uL2Jpbi93aW4vbWF4aW1pemUuZXhlJyksXG4gICAgICAgIGJyaW5nVG9Gcm9udDogICAgICB0b0Fic1BhdGgoJy4uL2Jpbi93aW4vYnJpbmctdG8tZnJvbnQuZXhlJylcbiAgICB9O1xufVxuZWxzZSBpZiAoT1MubWFjKSB7XG4gICAgQklOQVJJRVMgPSB7XG4gICAgICAgIGFwcDogICAgICAgICAgICAgICAgTUFDX0JJTkFSWV9QQVRIKCd0ZXN0Y2FmZS1icm93c2VyLXRvb2xzJyksXG4gICAgICAgIG9wZW46ICAgICAgICAgICAgICAgJ29wZW4nLFxuICAgICAgICBmaW5kV2luZG93OiAgICAgICAgICdmaW5kLXdpbmRvdycsXG4gICAgICAgIGdldFdpbmRvd1NpemU6ICAgICAgJ2dldC13aW5kb3ctc2l6ZScsXG4gICAgICAgIGdldFdpbmRvd0JvdW5kczogICAgJ2dldC13aW5kb3ctYm91bmRzJyxcbiAgICAgICAgZ2V0V2luZG93TWF4Qm91bmRzOiAnZ2V0LXdpbmRvdy1tYXgtYm91bmRzJyxcbiAgICAgICAgc2V0V2luZG93Qm91bmRzOiAgICAnc2V0LXdpbmRvdy1ib3VuZHMnLFxuICAgICAgICBjbG9zZTogICAgICAgICAgICAgICdjbG9zZScsXG4gICAgICAgIHNjcmVlbnNob3Q6ICAgICAgICAgJ3NjcmVlbnNob3QnLFxuICAgICAgICByZXNpemU6ICAgICAgICAgICAgICdyZXNpemUnLFxuICAgICAgICBnZW5lcmF0ZVRodW1ibmFpbDogICdnZW5lcmF0ZS10aHVtYm5haWwnLFxuICAgICAgICBicmluZ1RvRnJvbnQ6ICAgICAgICdicmluZy10by1mcm9udCdcbiAgICB9O1xufVxuZWxzZSBpZiAoT1MubGludXgpIHtcbiAgICBCSU5BUklFUyA9IHtcbiAgICAgICAgZmluZFdpbmRvdzogICAgICAgIHRvQWJzUGF0aChgLi4vYmluL2xpbnV4LyR7cGxhdGZvcm19L2ZpbmQtd2luZG93YCksXG4gICAgICAgIGNsb3NlOiAgICAgICAgICAgICB0b0Fic1BhdGgoYC4uL2Jpbi9saW51eC8ke3BsYXRmb3JtfS9jbG9zZWApLFxuICAgICAgICBnZXRXaW5kb3dTaXplOiAgICAgdG9BYnNQYXRoKGAuLi9iaW4vbGludXgvJHtwbGF0Zm9ybX0vZ2V0LXdpbmRvdy1zaXplYCksXG4gICAgICAgIHJlc2l6ZTogICAgICAgICAgICB0b0Fic1BhdGgoYC4uL2Jpbi9saW51eC8ke3BsYXRmb3JtfS9yZXNpemVgKSxcbiAgICAgICAgbWF4aW1pemU6ICAgICAgICAgIHRvQWJzUGF0aChgLi4vYmluL2xpbnV4LyR7cGxhdGZvcm19L21heGltaXplYCksXG4gICAgICAgIHNjcmVlbnNob3Q6ICAgICAgICB0b0Fic1BhdGgoYC4uL2Jpbi9saW51eC8ke3BsYXRmb3JtfS9zY3JlZW5zaG90YCksXG4gICAgICAgIGdlbmVyYXRlVGh1bWJuYWlsOiB0b0Fic1BhdGgoYC4uL2Jpbi9saW51eC8ke3BsYXRmb3JtfS9nZW5lcmF0ZS10aHVtYm5haWxgKSxcbiAgICAgICAgYnJpbmdUb0Zyb250OiAgICAgIHRvQWJzUGF0aChgLi4vYmluL2xpbnV4LyR7cGxhdGZvcm19L2JyaW5nLXRvLWZyb250YClcbiAgICB9O1xufVxuZWxzZVxuICAgIEJJTkFSSUVTID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IEJJTkFSSUVTO1xuIl19