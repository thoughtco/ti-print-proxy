"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const binaries_1 = __importDefault(require("./binaries"));
const chromiumCmdArgs = [
    '--disable-infobars',
    '--disable-session-crashed-bubble',
    '--no-first-run',
    '--new-window',
    '--disable-background-networking',
    '--disable-ipc-flooding-protection',
    '--disable-background-timer-throttling'
].join(' ');
const ALIASES = {
    'ie': {
        nameRe: /iexplore|internet explorer/i,
        cmd: ''
    },
    'firefox': {
        nameRe: /firefox|mozilla/i,
        cmd: `-override "${path_1.default.join(__dirname, '../data/override.ini')}" -new-window`,
        macOpenCmdTemplate: 'open -a "{{{path}}}" {{{pageUrl}}} --args {{{cmd}}}',
        linuxBinaries: ['firefox']
    },
    'chrome-canary': {
        nameRe: /chrome\s*canary/i,
        cmd: chromiumCmdArgs,
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['google-chrome-canary']
    },
    'chrome': {
        nameRe: /chrome/i,
        cmd: chromiumCmdArgs,
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['google-chrome', 'google-chrome-stable', 'google-chrome-unstable']
    },
    'chromium': {
        nameRe: /chromium/i,
        cmd: chromiumCmdArgs,
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['chromium-browser', 'chromium']
    },
    'opera': {
        nameRe: /opera/i,
        cmd: '--new-window',
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}',
        linuxBinaries: ['opera']
    },
    'safari': {
        nameRe: /safari/i,
        cmd: '',
        path: binaries_1.default.app,
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args /dev/null open {{{pageUrl}}} {{{cmd}}}'
    },
    'edge': {
        nameRe: /edge/i,
        cmd: '--new-window --disable-background-timer-throttling',
        macOpenCmdTemplate: 'open -n -a "{{{path}}}" --args {{{pageUrl}}} {{{cmd}}}'
    },
    'edge-legacy': {
        cmd: '',
        winOpenCmdTemplate: 'start microsoft-edge:"{{{pageUrl}}}"'
    }
};
exports.default = ALIASES;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxpYXNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hbGlhc2VzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDBEQUFrQztBQUVsQyxNQUFNLGVBQWUsR0FBRztJQUNwQixvQkFBb0I7SUFDcEIsa0NBQWtDO0lBQ2xDLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsaUNBQWlDO0lBQ2pDLG1DQUFtQztJQUNuQyx1Q0FBdUM7Q0FDMUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFWixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRTtRQUNGLE1BQU0sRUFBRSw2QkFBNkI7UUFDckMsR0FBRyxFQUFLLEVBQUU7S0FDYjtJQUVELFNBQVMsRUFBRTtRQUNQLE1BQU0sRUFBYyxrQkFBa0I7UUFDdEMsR0FBRyxFQUFpQixjQUFjLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLGVBQWU7UUFDN0Ysa0JBQWtCLEVBQUUscURBQXFEO1FBQ3pFLGFBQWEsRUFBTyxDQUFDLFNBQVMsQ0FBQztLQUNsQztJQUVELGVBQWUsRUFBRTtRQUNiLE1BQU0sRUFBYyxrQkFBa0I7UUFDdEMsR0FBRyxFQUFpQixlQUFlO1FBQ25DLGtCQUFrQixFQUFFLHdEQUF3RDtRQUM1RSxhQUFhLEVBQU8sQ0FBQyxzQkFBc0IsQ0FBQztLQUMvQztJQUVELFFBQVEsRUFBRTtRQUNOLE1BQU0sRUFBYyxTQUFTO1FBQzdCLEdBQUcsRUFBaUIsZUFBZTtRQUNuQyxrQkFBa0IsRUFBRSx3REFBd0Q7UUFDNUUsYUFBYSxFQUFPLENBQUMsZUFBZSxFQUFFLHNCQUFzQixFQUFFLHdCQUF3QixDQUFDO0tBQzFGO0lBRUQsVUFBVSxFQUFFO1FBQ1IsTUFBTSxFQUFjLFdBQVc7UUFDL0IsR0FBRyxFQUFpQixlQUFlO1FBQ25DLGtCQUFrQixFQUFFLHdEQUF3RDtRQUM1RSxhQUFhLEVBQU8sQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUM7S0FDdkQ7SUFFRCxPQUFPLEVBQUU7UUFDTCxNQUFNLEVBQWMsUUFBUTtRQUM1QixHQUFHLEVBQWlCLGNBQWM7UUFDbEMsa0JBQWtCLEVBQUUsd0RBQXdEO1FBQzVFLGFBQWEsRUFBTyxDQUFDLE9BQU8sQ0FBQztLQUNoQztJQUVELFFBQVEsRUFBRTtRQUNOLE1BQU0sRUFBYyxTQUFTO1FBQzdCLEdBQUcsRUFBaUIsRUFBRTtRQUN0QixJQUFJLEVBQWdCLGtCQUFRLENBQUMsR0FBRztRQUNoQyxrQkFBa0IsRUFBRSx1RUFBdUU7S0FDOUY7SUFFRCxNQUFNLEVBQUU7UUFDSixNQUFNLEVBQWMsT0FBTztRQUMzQixHQUFHLEVBQWlCLG9EQUFvRDtRQUN4RSxrQkFBa0IsRUFBRSx3REFBd0Q7S0FDL0U7SUFFRCxhQUFhLEVBQUU7UUFDWCxHQUFHLEVBQWlCLEVBQUU7UUFDdEIsa0JBQWtCLEVBQUUsc0NBQXNDO0tBQzdEO0NBQ0osQ0FBQztBQUVGLGtCQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEJJTkFSSUVTIGZyb20gJy4vYmluYXJpZXMnO1xuXG5jb25zdCBjaHJvbWl1bUNtZEFyZ3MgPSBbXG4gICAgJy0tZGlzYWJsZS1pbmZvYmFycycsXG4gICAgJy0tZGlzYWJsZS1zZXNzaW9uLWNyYXNoZWQtYnViYmxlJyxcbiAgICAnLS1uby1maXJzdC1ydW4nLFxuICAgICctLW5ldy13aW5kb3cnLFxuICAgICctLWRpc2FibGUtYmFja2dyb3VuZC1uZXR3b3JraW5nJyxcbiAgICAnLS1kaXNhYmxlLWlwYy1mbG9vZGluZy1wcm90ZWN0aW9uJyxcbiAgICAnLS1kaXNhYmxlLWJhY2tncm91bmQtdGltZXItdGhyb3R0bGluZydcbl0uam9pbignICcpO1xuXG5jb25zdCBBTElBU0VTID0ge1xuICAgICdpZSc6IHtcbiAgICAgICAgbmFtZVJlOiAvaWV4cGxvcmV8aW50ZXJuZXQgZXhwbG9yZXIvaSxcbiAgICAgICAgY21kOiAgICAnJ1xuICAgIH0sXG5cbiAgICAnZmlyZWZveCc6IHtcbiAgICAgICAgbmFtZVJlOiAgICAgICAgICAgICAvZmlyZWZveHxtb3ppbGxhL2ksXG4gICAgICAgIGNtZDogICAgICAgICAgICAgICAgYC1vdmVycmlkZSBcIiR7cGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2RhdGEvb3ZlcnJpZGUuaW5pJyl9XCIgLW5ldy13aW5kb3dgLFxuICAgICAgICBtYWNPcGVuQ21kVGVtcGxhdGU6ICdvcGVuIC1hIFwie3t7cGF0aH19fVwiIHt7e3BhZ2VVcmx9fX0gLS1hcmdzIHt7e2NtZH19fScsXG4gICAgICAgIGxpbnV4QmluYXJpZXM6ICAgICAgWydmaXJlZm94J11cbiAgICB9LFxuXG4gICAgJ2Nocm9tZS1jYW5hcnknOiB7XG4gICAgICAgIG5hbWVSZTogICAgICAgICAgICAgL2Nocm9tZVxccypjYW5hcnkvaSxcbiAgICAgICAgY21kOiAgICAgICAgICAgICAgICBjaHJvbWl1bUNtZEFyZ3MsXG4gICAgICAgIG1hY09wZW5DbWRUZW1wbGF0ZTogJ29wZW4gLW4gLWEgXCJ7e3twYXRofX19XCIgLS1hcmdzIHt7e3BhZ2VVcmx9fX0ge3t7Y21kfX19JyxcbiAgICAgICAgbGludXhCaW5hcmllczogICAgICBbJ2dvb2dsZS1jaHJvbWUtY2FuYXJ5J11cbiAgICB9LFxuXG4gICAgJ2Nocm9tZSc6IHtcbiAgICAgICAgbmFtZVJlOiAgICAgICAgICAgICAvY2hyb21lL2ksXG4gICAgICAgIGNtZDogICAgICAgICAgICAgICAgY2hyb21pdW1DbWRBcmdzLFxuICAgICAgICBtYWNPcGVuQ21kVGVtcGxhdGU6ICdvcGVuIC1uIC1hIFwie3t7cGF0aH19fVwiIC0tYXJncyB7e3twYWdlVXJsfX19IHt7e2NtZH19fScsXG4gICAgICAgIGxpbnV4QmluYXJpZXM6ICAgICAgWydnb29nbGUtY2hyb21lJywgJ2dvb2dsZS1jaHJvbWUtc3RhYmxlJywgJ2dvb2dsZS1jaHJvbWUtdW5zdGFibGUnXVxuICAgIH0sXG5cbiAgICAnY2hyb21pdW0nOiB7XG4gICAgICAgIG5hbWVSZTogICAgICAgICAgICAgL2Nocm9taXVtL2ksXG4gICAgICAgIGNtZDogICAgICAgICAgICAgICAgY2hyb21pdW1DbWRBcmdzLFxuICAgICAgICBtYWNPcGVuQ21kVGVtcGxhdGU6ICdvcGVuIC1uIC1hIFwie3t7cGF0aH19fVwiIC0tYXJncyB7e3twYWdlVXJsfX19IHt7e2NtZH19fScsXG4gICAgICAgIGxpbnV4QmluYXJpZXM6ICAgICAgWydjaHJvbWl1bS1icm93c2VyJywgJ2Nocm9taXVtJ11cbiAgICB9LFxuXG4gICAgJ29wZXJhJzoge1xuICAgICAgICBuYW1lUmU6ICAgICAgICAgICAgIC9vcGVyYS9pLFxuICAgICAgICBjbWQ6ICAgICAgICAgICAgICAgICctLW5ldy13aW5kb3cnLFxuICAgICAgICBtYWNPcGVuQ21kVGVtcGxhdGU6ICdvcGVuIC1uIC1hIFwie3t7cGF0aH19fVwiIC0tYXJncyB7e3twYWdlVXJsfX19IHt7e2NtZH19fScsXG4gICAgICAgIGxpbnV4QmluYXJpZXM6ICAgICAgWydvcGVyYSddXG4gICAgfSxcblxuICAgICdzYWZhcmknOiB7XG4gICAgICAgIG5hbWVSZTogICAgICAgICAgICAgL3NhZmFyaS9pLFxuICAgICAgICBjbWQ6ICAgICAgICAgICAgICAgICcnLFxuICAgICAgICBwYXRoOiAgICAgICAgICAgICAgIEJJTkFSSUVTLmFwcCxcbiAgICAgICAgbWFjT3BlbkNtZFRlbXBsYXRlOiAnb3BlbiAtbiAtYSBcInt7e3BhdGh9fX1cIiAtLWFyZ3MgL2Rldi9udWxsIG9wZW4ge3t7cGFnZVVybH19fSB7e3tjbWR9fX0nXG4gICAgfSxcblxuICAgICdlZGdlJzoge1xuICAgICAgICBuYW1lUmU6ICAgICAgICAgICAgIC9lZGdlL2ksXG4gICAgICAgIGNtZDogICAgICAgICAgICAgICAgJy0tbmV3LXdpbmRvdyAtLWRpc2FibGUtYmFja2dyb3VuZC10aW1lci10aHJvdHRsaW5nJyxcbiAgICAgICAgbWFjT3BlbkNtZFRlbXBsYXRlOiAnb3BlbiAtbiAtYSBcInt7e3BhdGh9fX1cIiAtLWFyZ3Mge3t7cGFnZVVybH19fSB7e3tjbWR9fX0nXG4gICAgfSxcblxuICAgICdlZGdlLWxlZ2FjeSc6IHtcbiAgICAgICAgY21kOiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgd2luT3BlbkNtZFRlbXBsYXRlOiAnc3RhcnQgbWljcm9zb2Z0LWVkZ2U6XCJ7e3twYWdlVXJsfX19XCInXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQUxJQVNFUztcbiJdfQ==