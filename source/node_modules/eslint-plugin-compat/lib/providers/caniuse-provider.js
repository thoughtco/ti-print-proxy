"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUnsupportedTargets = getUnsupportedTargets;
exports.default = void 0;

var _data = _interopRequireDefault(require("caniuse-db/fulldata-json/data-2.0.json"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Take a target's id and return it's full name by using `targetNameMappings`
 * ex. {target: and_ff, version: 40} => 'Android FireFox 40'
 */
function formatTargetNames(target) {
  const name = _constants.STANDARD_TARGET_NAME_MAPPING[target.target] || target.target;
  return `${name} ${target.version}`;
}
/**
 * Check if a browser version is in the range format
 * ex. 10.0-10.2
 */


function versionIsRange(version) {
  return version.includes("-");
}
/**
 * Parse version from caniuse and compare with parsed version from browserslist.
 */


function areVersionsEqual(targetVersion, statsVersion) {
  return targetVersion === parseFloat(statsVersion);
}
/*
 * Check the CanIUse database to see if targets are supported
 *
 * If no record could be found, return true. Rules might not
 * be found because they could belong to another provider
 */


function isSupportedByCanIUse(node, {
  version,
  target,
  parsedVersion
}) {
  const data = _data.default.data[node.caniuseId];
  if (!data) return true;
  const {
    stats
  } = data;
  if (!(target in stats)) return true;
  const targetStats = stats[target];

  if (typeof version === "string" && versionIsRange(version)) {
    return Object.keys(targetStats).some(statsVersion => versionIsRange(statsVersion) && areVersionsEqual(parsedVersion, statsVersion) ? !targetStats[statsVersion].includes("y") : true);
  } // @TODO: This assumes that all versions are included in the cainuse db. If this is incorrect,
  //        this will return false negatives. To properly do this, we have to to range comparisons.
  //        Ex. given query for 50 and only version 40 exists in db records, return true


  if (!(version in targetStats)) return true;
  if (!targetStats[version]) return true;
  return targetStats[version].includes("y");
}
/**
 * Return an array of all unsupported targets
 */


function getUnsupportedTargets(node, targets) {
  return targets.filter(target => !isSupportedByCanIUse(node, target)).map(formatTargetNames);
}

const CanIUseProvider = [// new ServiceWorker()
{
  caniuseId: "serviceworkers",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "ServiceWorker"
}, {
  caniuseId: "serviceworkers",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "navigator",
  property: "serviceWorker"
}, // document.querySelector()
{
  caniuseId: "queryselector",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "document",
  property: "querySelector"
}, // IntersectionObserver
{
  caniuseId: "intersectionobserver",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "IntersectionObserver"
}, // ResizeObserver
{
  caniuseId: "resizeobserver",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "ResizeObserver"
}, // PaymentRequest
{
  caniuseId: "payment-request",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "PaymentRequest"
}, // Promises
{
  caniuseId: "promises",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Promise"
}, {
  caniuseId: "promises",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "Promise",
  property: "resolve"
}, {
  caniuseId: "promises",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "Promise",
  property: "all"
}, {
  caniuseId: "promises",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "Promise",
  property: "race"
}, {
  caniuseId: "promises",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "Promise",
  property: "reject"
}, // fetch
{
  caniuseId: "fetch",
  astNodeType: _constants.AstNodeTypes.CallExpression,
  object: "fetch"
}, // document.currentScript()
{
  caniuseId: "document-currentscript",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "document",
  property: "currentScript"
}, // URL
{
  caniuseId: "url",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "URL"
}, // URLSearchParams
{
  caniuseId: "urlsearchparams",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "URLSearchParams"
}, // performance.now()
{
  caniuseId: "high-resolution-time",
  astNodeType: _constants.AstNodeTypes.MemberExpression,
  object: "performance",
  property: "now"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "TypedArray"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Int8Array"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Uint8Array"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Uint8ClampedArray"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Int16Array"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Uint16Array"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Int32Array"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Uint32Array"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Float32Array"
}, {
  caniuseId: "typedarrays",
  astNodeType: _constants.AstNodeTypes.NewExpression,
  object: "Float64Array"
}].map(rule => ({ ...rule,
  getUnsupportedTargets,
  id: rule.property ? `${rule.object}.${rule.property}` : rule.object,
  protoChainId: rule.property ? `${rule.object}.${rule.property}` : rule.object,
  protoChain: rule.property ? [rule.object, rule.property] : [rule.object]
}));
var _default = CanIUseProvider;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,