"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var t = _ref.types;

  var visitor = {
    ForOfStatement: function ForOfStatement(path) {
      var loose = this.opts.loose;
      var scope = path.scope;
      var _path$node = path.node,
          left = _path$node.left,
          right = _path$node.right,
          body = _path$node.body;

      var i = scope.generateUidIdentifier("i");
      var length = scope.generateUidIdentifier("length");
      var array = scope.maybeGenerateMemoised(right, true);

      var inits = [t.variableDeclarator(i, t.numericLiteral(0))];
      if (array) {
        inits.push(t.variableDeclarator(array, right));
      } else {
        array = right;
      }
      inits.push(t.variableDeclarator(length, t.memberExpression(t.clone(array), t.identifier("length"))));

      if (loose) {
        var variable = inits[inits.length - 1];
        variable.init = t.conditionalExpression(t.binaryExpression("==", t.clone(array), t.nullLiteral()), t.numericLiteral(0), variable.init);
      }

      var item = t.memberExpression(array, t.clone(i), true);
      var assignment = void 0;
      if (t.isVariableDeclaration(left)) {
        assignment = left;
        assignment.declarations[0].init = item;
      } else {
        assignment = t.expressionStatement(t.assignmentExpression("=", left, item));
      }

      var block = t.toBlock(body);
      block.body.unshift(assignment);

      path.replaceWith(t.forStatement(t.variableDeclaration("let", inits), t.binaryExpression("<", t.clone(i), t.clone(length)), t.updateExpression("++", t.clone(i)), block));
    }
  };

  return { visitor: visitor };
};