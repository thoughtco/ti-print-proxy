"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const indent_string_1 = __importDefault(require("indent-string"));
const lodash_1 = require("lodash");
const moment_loader_1 = __importDefault(require("../utils/moment-loader"));
const os_family_1 = __importDefault(require("os-family"));
const string_1 = require("../utils/string");
const get_viewport_width_1 = __importDefault(require("../utils/get-viewport-width"));
// NOTE: we should not expose internal state to
// the plugin, to avoid accidental rewrites.
// Therefore we use symbols to store them.
/*global Symbol*/
const stream = Symbol();
const wordWrapEnabled = Symbol();
const indent = Symbol();
const errorDecorator = Symbol();
class ReporterPluginHost {
    constructor(plugin, outStream, name) {
        this.name = name;
        this.streamController = null;
        this[stream] = outStream || process.stdout;
        this[wordWrapEnabled] = false;
        this[indent] = 0;
        const useColors = this[stream] === process.stdout && chalk_1.default.enabled && !plugin.noColors;
        this.chalk = new chalk_1.default.constructor({ enabled: useColors });
        this.moment = moment_loader_1.default;
        this.viewportWidth = get_viewport_width_1.default(this[stream]);
        this.symbols = os_family_1.default.win ?
            { ok: '√', err: '×' } :
            { ok: '✓', err: '✖' };
        lodash_1.assignIn(this, plugin);
        this[errorDecorator] = this.createErrorDecorator();
    }
    // Error decorator
    createErrorDecorator() {
        return {
            'span user-agent': str => this.chalk.grey(str),
            'span subtitle': str => `- ${this.chalk.bold.red(str)} -`,
            'div message': str => this.chalk.bold.red(str),
            'div screenshot-info': lodash_1.identity,
            'a screenshot-path': str => this.chalk.grey.underline(str),
            'code': lodash_1.identity,
            'span syntax-string': str => this.chalk.green(str),
            'span syntax-punctuator': str => this.chalk.grey(str),
            'span syntax-keyword': str => this.chalk.cyan(str),
            'span syntax-number': str => this.chalk.magenta(str),
            'span syntax-regex': str => this.chalk.magenta(str),
            'span syntax-comment': str => this.chalk.grey.bold(str),
            'span syntax-invalid': str => this.chalk.inverse(str),
            'div code-frame': lodash_1.identity,
            'div code-line': str => str + '\n',
            'div code-line-last': lodash_1.identity,
            'div code-line-num': str => `   ${str} |`,
            'div code-line-num-base': str => this.chalk.bgRed(` > ${str} `) + '|',
            'div code-line-src': lodash_1.identity,
            'div stack': str => '\n\n' + str,
            'div stack-line': str => str + '\n',
            'div stack-line-last': lodash_1.identity,
            'div stack-line-name': str => `   at ${this.chalk.bold(str)}`,
            'div stack-line-location': str => ` (${this.chalk.grey.underline(str)})`,
            'strong': str => this.chalk.bold(str),
            'a': str => `"${this.chalk.underline(str)}"`
        };
    }
    // String helpers
    indentString(str, indentVal) {
        return indent_string_1.default(str, ' ', indentVal);
    }
    wordWrap(str, indentVal, width) {
        return string_1.wordWrap(str, indentVal, width);
    }
    escapeHtml(str) {
        return lodash_1.escape(str);
    }
    formatError(err, prefix = '') {
        const prefixLengthWithoutColors = string_1.removeTTYColors(prefix).length;
        const maxMsgLength = this.viewportWidth - this[indent] - prefixLengthWithoutColors;
        let msg = err.formatMessage(this[errorDecorator], maxMsgLength);
        if (this[wordWrapEnabled])
            msg = this.wordWrap(msg, prefixLengthWithoutColors, maxMsgLength);
        else
            msg = this.indentString(msg, prefixLengthWithoutColors);
        return prefix + msg.substr(prefixLengthWithoutColors);
    }
    // Writing helpers
    newline() {
        this._writeToUniqueStream('\n');
        return this;
    }
    write(text) {
        if (this[wordWrapEnabled])
            text = this.wordWrap(text, this[indent], this.viewportWidth);
        else
            text = this.indentString(text, this[indent]);
        this._writeToUniqueStream(text);
        return this;
    }
    useWordWrap(use) {
        this[wordWrapEnabled] = use;
        return this;
    }
    setIndent(val) {
        this[indent] = val;
        return this;
    }
    _writeToUniqueStream(text) {
        if (!this.streamController || this.streamController.ensureUniqueStream(this[stream], this))
            this[stream].write(text);
    }
    // Abstract methods implemented in plugin
    async reportTaskStart( /* startTime, userAgents, testCount, testStructure, taskProperties */) {
        throw new Error('Not implemented');
    }
    async reportFixtureStart( /* name, path */) {
        throw new Error('Not implemented');
    }
    // NOTE: It's an optional method
    // async reportTestStart (/* name, testMeta */) {
    //     throw new Error('Not implemented');
    // }
    async reportTestDone( /* name, testRunInfo */) {
        throw new Error('Not implemented');
    }
    async reportTaskDone( /* endTime, passed, warnings */) {
        throw new Error('Not implemented');
    }
}
exports.default = ReporterPluginHost;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,