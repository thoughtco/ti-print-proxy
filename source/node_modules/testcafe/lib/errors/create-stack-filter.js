"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const lodash_1 = require("lodash");
const BABEL = require.resolve('babel-core');
const BABEL_MODULES_DIR = BABEL.replace(new RegExp(`^(.*${lodash_1.escapeRegExp(path_1.sep)}node_modules${lodash_1.escapeRegExp(path_1.sep)})(.*)`), '$1');
const BABEL_RELATED = BABEL_MODULES_DIR + 'babel-';
const BABYLON = BABEL_MODULES_DIR + 'babylon' + path_1.sep;
const CORE_JS = BABEL_MODULES_DIR + 'core-js' + path_1.sep;
const REGENERATOR_RUNTIME = BABEL_MODULES_DIR + 'regenerator-runtime' + path_1.sep;
const TESTCAFE_LIB = path_1.join(__dirname, '../');
const TESTCAFE_BIN = path_1.join(__dirname, '../../bin');
const TESTCAFE_SRC = path_1.join(__dirname, '../../src');
const TESTCAFE_HAMMERHEAD = `${path_1.sep}testcafe-hammerhead${path_1.sep}`;
const SOURCE_MAP_SUPPORT = `${path_1.sep}source-map-support${path_1.sep}`;
const INTERNAL = 'internal/';
function createStackFilter(limit) {
    let passedFramesCount = 0;
    return function stackFilter(frame) {
        if (passedFramesCount >= limit)
            return false;
        const filename = frame.getFileName();
        // NOTE: filter out the internals of node, Babel and TestCafe
        const pass = filename &&
            filename.indexOf(path_1.sep) > -1 &&
            filename.indexOf(INTERNAL) !== 0 &&
            filename.indexOf(TESTCAFE_LIB) !== 0 &&
            filename.indexOf(TESTCAFE_BIN) !== 0 &&
            filename.indexOf(TESTCAFE_HAMMERHEAD) < 0 &&
            filename.indexOf(BABEL_RELATED) !== 0 &&
            filename.indexOf(BABYLON) !== 0 &&
            filename.indexOf(CORE_JS) !== 0 &&
            filename.indexOf(REGENERATOR_RUNTIME) !== 0 &&
            filename.indexOf(SOURCE_MAP_SUPPORT) < 0 &&
            filename.indexOf(TESTCAFE_SRC) !== 0;
        if (pass)
            passedFramesCount++;
        return pass;
    };
}
exports.default = createStackFilter;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXN0YWNrLWZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMvY3JlYXRlLXN0YWNrLWZpbHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFpQztBQUNqQyxtQ0FBa0Q7QUFFbEQsTUFBTSxLQUFLLEdBQWUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4RCxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxxQkFBUSxDQUFDLFVBQUcsQ0FBQyxlQUFlLHFCQUFRLENBQUMsVUFBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRW5ILE1BQU0sYUFBYSxHQUFTLGlCQUFpQixHQUFHLFFBQVEsQ0FBQztBQUN6RCxNQUFNLE9BQU8sR0FBZSxpQkFBaUIsR0FBRyxTQUFTLEdBQUcsVUFBRyxDQUFDO0FBQ2hFLE1BQU0sT0FBTyxHQUFlLGlCQUFpQixHQUFHLFNBQVMsR0FBRyxVQUFHLENBQUM7QUFDaEUsTUFBTSxtQkFBbUIsR0FBRyxpQkFBaUIsR0FBRyxxQkFBcUIsR0FBRyxVQUFHLENBQUM7QUFFNUUsTUFBTSxZQUFZLEdBQVUsV0FBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNuRCxNQUFNLFlBQVksR0FBVSxXQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sWUFBWSxHQUFVLFdBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDekQsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLFVBQUcsc0JBQXNCLFVBQUcsRUFBRSxDQUFDO0FBRTlELE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxVQUFHLHFCQUFxQixVQUFHLEVBQUUsQ0FBQztBQUU1RCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUM7QUFFN0IsU0FBd0IsaUJBQWlCLENBQUUsS0FBSztJQUM1QyxJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztJQUUxQixPQUFPLFNBQVMsV0FBVyxDQUFFLEtBQUs7UUFDOUIsSUFBSSxpQkFBaUIsSUFBSSxLQUFLO1lBQzFCLE9BQU8sS0FBSyxDQUFDO1FBRWpCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVyQyw2REFBNkQ7UUFDN0QsTUFBTSxJQUFJLEdBQUcsUUFBUTtZQUNWLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNoQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDcEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQ3BDLFFBQVEsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDO1lBQ3pDLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUNyQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDL0IsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQy9CLFFBQVEsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDO1lBQzNDLFFBQVEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDO1lBQ3hDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWhELElBQUksSUFBSTtZQUNKLGlCQUFpQixFQUFFLENBQUM7UUFFeEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQTVCRCxvQ0E0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXAsIGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IGVzY2FwZVJlZ0V4cCBhcyBlc2NhcGVSZSB9IGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IEJBQkVMICAgICAgICAgICAgID0gcmVxdWlyZS5yZXNvbHZlKCdiYWJlbC1jb3JlJyk7XG5jb25zdCBCQUJFTF9NT0RVTEVTX0RJUiA9IEJBQkVMLnJlcGxhY2UobmV3IFJlZ0V4cChgXiguKiR7ZXNjYXBlUmUoc2VwKX1ub2RlX21vZHVsZXMke2VzY2FwZVJlKHNlcCl9KSguKilgKSwgJyQxJyk7XG5cbmNvbnN0IEJBQkVMX1JFTEFURUQgICAgICAgPSBCQUJFTF9NT0RVTEVTX0RJUiArICdiYWJlbC0nO1xuY29uc3QgQkFCWUxPTiAgICAgICAgICAgICA9IEJBQkVMX01PRFVMRVNfRElSICsgJ2JhYnlsb24nICsgc2VwO1xuY29uc3QgQ09SRV9KUyAgICAgICAgICAgICA9IEJBQkVMX01PRFVMRVNfRElSICsgJ2NvcmUtanMnICsgc2VwO1xuY29uc3QgUkVHRU5FUkFUT1JfUlVOVElNRSA9IEJBQkVMX01PRFVMRVNfRElSICsgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUnICsgc2VwO1xuXG5jb25zdCBURVNUQ0FGRV9MSUIgICAgICAgID0gam9pbihfX2Rpcm5hbWUsICcuLi8nKTtcbmNvbnN0IFRFU1RDQUZFX0JJTiAgICAgICAgPSBqb2luKF9fZGlybmFtZSwgJy4uLy4uL2JpbicpO1xuY29uc3QgVEVTVENBRkVfU1JDICAgICAgICA9IGpvaW4oX19kaXJuYW1lLCAnLi4vLi4vc3JjJyk7XG5jb25zdCBURVNUQ0FGRV9IQU1NRVJIRUFEID0gYCR7c2VwfXRlc3RjYWZlLWhhbW1lcmhlYWQke3NlcH1gO1xuXG5jb25zdCBTT1VSQ0VfTUFQX1NVUFBPUlQgPSBgJHtzZXB9c291cmNlLW1hcC1zdXBwb3J0JHtzZXB9YDtcblxuY29uc3QgSU5URVJOQUwgPSAnaW50ZXJuYWwvJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3RhY2tGaWx0ZXIgKGxpbWl0KSB7XG4gICAgbGV0IHBhc3NlZEZyYW1lc0NvdW50ID0gMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBzdGFja0ZpbHRlciAoZnJhbWUpIHtcbiAgICAgICAgaWYgKHBhc3NlZEZyYW1lc0NvdW50ID49IGxpbWl0KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gZnJhbWUuZ2V0RmlsZU5hbWUoKTtcblxuICAgICAgICAvLyBOT1RFOiBmaWx0ZXIgb3V0IHRoZSBpbnRlcm5hbHMgb2Ygbm9kZSwgQmFiZWwgYW5kIFRlc3RDYWZlXG4gICAgICAgIGNvbnN0IHBhc3MgPSBmaWxlbmFtZSAmJlxuICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lLmluZGV4T2Yoc2VwKSA+IC0xICYmXG4gICAgICAgICAgICAgICAgICAgZmlsZW5hbWUuaW5kZXhPZihJTlRFUk5BTCkgIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICBmaWxlbmFtZS5pbmRleE9mKFRFU1RDQUZFX0xJQikgIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICBmaWxlbmFtZS5pbmRleE9mKFRFU1RDQUZFX0JJTikgIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICBmaWxlbmFtZS5pbmRleE9mKFRFU1RDQUZFX0hBTU1FUkhFQUQpIDwgMCAmJlxuICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lLmluZGV4T2YoQkFCRUxfUkVMQVRFRCkgIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICBmaWxlbmFtZS5pbmRleE9mKEJBQllMT04pICE9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgZmlsZW5hbWUuaW5kZXhPZihDT1JFX0pTKSAhPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lLmluZGV4T2YoUkVHRU5FUkFUT1JfUlVOVElNRSkgIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICBmaWxlbmFtZS5pbmRleE9mKFNPVVJDRV9NQVBfU1VQUE9SVCkgPCAwICYmXG4gICAgICAgICAgICAgICAgICAgZmlsZW5hbWUuaW5kZXhPZihURVNUQ0FGRV9TUkMpICE9PSAwO1xuXG4gICAgICAgIGlmIChwYXNzKVxuICAgICAgICAgICAgcGFzc2VkRnJhbWVzQ291bnQrKztcblxuICAgICAgICByZXR1cm4gcGFzcztcbiAgICB9O1xufVxuIl19