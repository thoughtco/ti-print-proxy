"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyImagePart = exports.generateScreenshotMark = void 0;
const pngjs_1 = require("pngjs");
const lodash_1 = require("lodash");
const generate_1 = __importDefault(require("nanoid/generate"));
const constants_1 = require("./constants");
const ALPHABET = '01';
function generateScreenshotMark() {
    // NOTE: 32-bit id
    const id = generate_1.default(ALPHABET, constants_1.MARK_LENGTH);
    // NOTE: array of RGB values
    const markSeed = lodash_1.flatten(lodash_1.map(id, bit => bit === '0' ? [0, 0, 0, 255] : [255, 255, 255, 255]));
    // NOTE: macOS browsers can't display an element, if it's CSS height is lesser than 1.
    // It happens on Retina displays, because they have more than 1 physical pixel in a CSS pixel.
    // So increase mark size by prepending transparent pixels before the actual mark.
    const imageData = lodash_1.times(constants_1.MARK_BYTES_PER_PIXEL * constants_1.MARK_LENGTH * (constants_1.MARK_HEIGHT - 1), lodash_1.constant(0)).concat(markSeed);
    const imageDataBuffer = Buffer.from(imageData);
    const pngImage = new pngjs_1.PNG({ width: constants_1.MARK_LENGTH, height: constants_1.MARK_HEIGHT });
    imageDataBuffer.copy(pngImage.data);
    const markData = 'data:image/png;base64,' + pngjs_1.PNG.sync.write(pngImage).toString('base64');
    return { markSeed, markData };
}
exports.generateScreenshotMark = generateScreenshotMark;
function copyImagePart(pngImage, { clipLeft, clipTop, clipRight, clipBottom }) {
    const width = clipRight - clipLeft;
    const height = clipBottom - clipTop;
    const dstImage = new pngjs_1.PNG({ width, height });
    const stride = dstImage.width * constants_1.MARK_BYTES_PER_PIXEL;
    for (let i = 0; i < height; i++) {
        const srcStartIndex = (pngImage.width * (i + clipTop) + clipLeft) * constants_1.MARK_BYTES_PER_PIXEL;
        pngImage.data.copy(dstImage.data, stride * i, srcStartIndex, srcStartIndex + stride);
    }
    return dstImage;
}
exports.copyImagePart = copyImagePart;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyZWVuc2hvdHMvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaUNBQTRCO0FBQzVCLG1DQUF1RDtBQUN2RCwrREFBeUM7QUFDekMsMkNBQTZFO0FBRTdFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQztBQUV0QixTQUFnQixzQkFBc0I7SUFDbEMsa0JBQWtCO0lBQ2xCLE1BQU0sRUFBRSxHQUFHLGtCQUFVLENBQUMsUUFBUSxFQUFFLHVCQUFXLENBQUMsQ0FBQztJQUU3Qyw0QkFBNEI7SUFDNUIsTUFBTSxRQUFRLEdBQUcsZ0JBQU8sQ0FBQyxZQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFOUYsc0ZBQXNGO0lBQ3RGLDhGQUE4RjtJQUM5RixpRkFBaUY7SUFDakYsTUFBTSxTQUFTLEdBQVMsY0FBSyxDQUFDLGdDQUFvQixHQUFHLHVCQUFXLEdBQUcsQ0FBQyx1QkFBVyxHQUFHLENBQUMsQ0FBQyxFQUFFLGlCQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEgsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQyxNQUFNLFFBQVEsR0FBVSxJQUFJLFdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSx1QkFBVyxFQUFFLE1BQU0sRUFBRSx1QkFBVyxFQUFFLENBQUMsQ0FBQztJQUU3RSxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwQyxNQUFNLFFBQVEsR0FBRyx3QkFBd0IsR0FBRyxXQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFeEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUNsQyxDQUFDO0FBbkJELHdEQW1CQztBQUVELFNBQWdCLGFBQWEsQ0FBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUU7SUFDakYsTUFBTSxLQUFLLEdBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUNwQyxNQUFNLE1BQU0sR0FBRyxVQUFVLEdBQUcsT0FBTyxDQUFDO0lBRXBDLE1BQU0sUUFBUSxHQUFHLElBQUksV0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFFNUMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRyxnQ0FBb0IsQ0FBQztJQUVyRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdCLE1BQU0sYUFBYSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxnQ0FBb0IsQ0FBQztRQUV6RixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsYUFBYSxFQUFFLGFBQWEsR0FBRyxNQUFNLENBQUMsQ0FBQztLQUN4RjtJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFmRCxzQ0FlQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBORyB9IGZyb20gJ3BuZ2pzJztcbmltcG9ydCB7IG1hcCwgZmxhdHRlbiwgdGltZXMsIGNvbnN0YW50IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBnZW5lcmF0ZUlkIGZyb20gJ25hbm9pZC9nZW5lcmF0ZSc7XG5pbXBvcnQgeyBNQVJLX0xFTkdUSCwgTUFSS19IRUlHSFQsIE1BUktfQllURVNfUEVSX1BJWEVMIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBBTFBIQUJFVCA9ICcwMSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNjcmVlbnNob3RNYXJrICgpIHtcbiAgICAvLyBOT1RFOiAzMi1iaXQgaWRcbiAgICBjb25zdCBpZCA9IGdlbmVyYXRlSWQoQUxQSEFCRVQsIE1BUktfTEVOR1RIKTtcblxuICAgIC8vIE5PVEU6IGFycmF5IG9mIFJHQiB2YWx1ZXNcbiAgICBjb25zdCBtYXJrU2VlZCA9IGZsYXR0ZW4obWFwKGlkLCBiaXQgPT4gYml0ID09PSAnMCcgPyBbMCwgMCwgMCwgMjU1XSA6IFsyNTUsIDI1NSwgMjU1LCAyNTVdKSk7XG5cbiAgICAvLyBOT1RFOiBtYWNPUyBicm93c2VycyBjYW4ndCBkaXNwbGF5IGFuIGVsZW1lbnQsIGlmIGl0J3MgQ1NTIGhlaWdodCBpcyBsZXNzZXIgdGhhbiAxLlxuICAgIC8vIEl0IGhhcHBlbnMgb24gUmV0aW5hIGRpc3BsYXlzLCBiZWNhdXNlIHRoZXkgaGF2ZSBtb3JlIHRoYW4gMSBwaHlzaWNhbCBwaXhlbCBpbiBhIENTUyBwaXhlbC5cbiAgICAvLyBTbyBpbmNyZWFzZSBtYXJrIHNpemUgYnkgcHJlcGVuZGluZyB0cmFuc3BhcmVudCBwaXhlbHMgYmVmb3JlIHRoZSBhY3R1YWwgbWFyay5cbiAgICBjb25zdCBpbWFnZURhdGEgICAgICAgPSB0aW1lcyhNQVJLX0JZVEVTX1BFUl9QSVhFTCAqIE1BUktfTEVOR1RIICogKE1BUktfSEVJR0hUIC0gMSksIGNvbnN0YW50KDApKS5jb25jYXQobWFya1NlZWQpO1xuICAgIGNvbnN0IGltYWdlRGF0YUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGltYWdlRGF0YSk7XG4gICAgY29uc3QgcG5nSW1hZ2UgICAgICAgID0gbmV3IFBORyh7IHdpZHRoOiBNQVJLX0xFTkdUSCwgaGVpZ2h0OiBNQVJLX0hFSUdIVCB9KTtcblxuICAgIGltYWdlRGF0YUJ1ZmZlci5jb3B5KHBuZ0ltYWdlLmRhdGEpO1xuXG4gICAgY29uc3QgbWFya0RhdGEgPSAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyBQTkcuc3luYy53cml0ZShwbmdJbWFnZSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXG4gICAgcmV0dXJuIHsgbWFya1NlZWQsIG1hcmtEYXRhIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5SW1hZ2VQYXJ0IChwbmdJbWFnZSwgeyBjbGlwTGVmdCwgY2xpcFRvcCwgY2xpcFJpZ2h0LCBjbGlwQm90dG9tIH0pIHtcbiAgICBjb25zdCB3aWR0aCAgPSBjbGlwUmlnaHQgLSBjbGlwTGVmdDtcbiAgICBjb25zdCBoZWlnaHQgPSBjbGlwQm90dG9tIC0gY2xpcFRvcDtcblxuICAgIGNvbnN0IGRzdEltYWdlID0gbmV3IFBORyh7IHdpZHRoLCBoZWlnaHQgfSk7XG5cbiAgICBjb25zdCBzdHJpZGUgPSBkc3RJbWFnZS53aWR0aCAqIE1BUktfQllURVNfUEVSX1BJWEVMO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgICBjb25zdCBzcmNTdGFydEluZGV4ID0gKHBuZ0ltYWdlLndpZHRoICogKGkgKyBjbGlwVG9wKSArIGNsaXBMZWZ0KSAqIE1BUktfQllURVNfUEVSX1BJWEVMO1xuXG4gICAgICAgIHBuZ0ltYWdlLmRhdGEuY29weShkc3RJbWFnZS5kYXRhLCBzdHJpZGUgKiBpLCBzcmNTdGFydEluZGV4LCBzcmNTdGFydEluZGV4ICsgc3RyaWRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZHN0SW1hZ2U7XG59XG4iXX0=