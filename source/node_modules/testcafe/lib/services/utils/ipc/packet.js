"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Packet = void 0;
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
const HEAD_MASK = 0x01;
const TAIL_MASK = 0x02;
const BYTE_SHIFT = 8;
const BYTE_MASK = 2 ** BYTE_SHIFT - 1;
class Packet {
    static _parseHeader(buffer) {
        const dataSize = buffer[1] << BYTE_SHIFT << BYTE_SHIFT | buffer[2] << BYTE_SHIFT | buffer[3];
        return {
            head: Boolean(buffer[0] & HEAD_MASK),
            tail: Boolean(buffer[0] & TAIL_MASK),
            size: dataSize,
            totalSize: dataSize + Packet.HEADER_SIZE
        };
    }
    static parse(buffer) {
        if (buffer.length < Packet.HEADER_SIZE)
            return void 0;
        const header = Packet._parseHeader(buffer);
        if (header.size > this.MAX_PAYLOAD_SIZE)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.tooLargeIPCPayload);
        if (buffer.length < header.size)
            return void 0;
        return { header, data: buffer.slice(Packet.HEADER_SIZE, Packet.HEADER_SIZE + header.size) };
    }
    static _serializeHeader({ size, head, tail }, buffer) {
        buffer[0] = 0;
        if (head)
            buffer[0] |= HEAD_MASK;
        if (tail)
            buffer[0] |= TAIL_MASK;
        buffer[1] = size >> BYTE_SHIFT >> BYTE_SHIFT & BYTE_MASK;
        buffer[2] = size >> BYTE_SHIFT & BYTE_MASK;
        buffer[3] = size & BYTE_MASK;
    }
    static serialize(data, { head = false, tail = false } = {}) {
        const size = data.length;
        if (size > Packet.MAX_PAYLOAD_SIZE)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.tooLargeIPCPayload);
        const buffer = Buffer.alloc(size + Packet.HEADER_SIZE);
        Packet._serializeHeader({ size, head, tail }, buffer);
        data.copy(buffer, Packet.HEADER_SIZE);
        return buffer;
    }
}
exports.Packet = Packet;
// NOTE: Max message size: 64 KiB, header size: 4 B
Packet.MAX_PACKET_SIZE = 64 * 2 ** 10;
Packet.HEADER_SIZE = 4;
Packet.MAX_PAYLOAD_SIZE = Packet.MAX_PACKET_SIZE - Packet.HEADER_SIZE;
exports.default = Packet;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3V0aWxzL2lwYy9wYWNrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscURBQXVEO0FBQ3ZELGlEQUF1RDtBQUd2RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBRXZCLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNyQixNQUFNLFNBQVMsR0FBSSxDQUFDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQW9CdkMsTUFBYSxNQUFNO0lBTVAsTUFBTSxDQUFDLFlBQVksQ0FBRSxNQUFjO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdGLE9BQU87WUFDSCxJQUFJLEVBQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDekMsSUFBSSxFQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO1lBQ3pDLElBQUksRUFBTyxRQUFRO1lBQ25CLFNBQVMsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLFdBQVc7U0FDM0MsQ0FBQztJQUNOLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFFLE1BQWM7UUFDL0IsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXO1lBQ2xDLE9BQU8sS0FBSyxDQUFDLENBQUM7UUFFbEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUzQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQjtZQUNuQyxNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFOUQsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJO1lBQzNCLE9BQU8sS0FBSyxDQUFDLENBQUM7UUFFbEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDaEcsQ0FBQztJQUVPLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFvQixFQUFFLE1BQWM7UUFDbkYsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVkLElBQUksSUFBSTtZQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUM7UUFFM0IsSUFBSSxJQUFJO1lBQ0osTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQztRQUUzQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLFVBQVUsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUMzQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLFNBQVMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVMsQ0FBRSxJQUFZLEVBQUUsRUFBRSxJQUFJLEdBQUcsS0FBSyxFQUFFLElBQUksR0FBRyxLQUFLLEtBQWlDLEVBQUU7UUFDbEcsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUV6QixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsZ0JBQWdCO1lBQzlCLE1BQU0sSUFBSSxzQkFBWSxDQUFDLHNCQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUU5RCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFdkQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV0RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFdEMsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7QUEzREwsd0JBNERDO0FBM0RHLG1EQUFtRDtBQUM1QixzQkFBZSxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQy9CLGtCQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLHVCQUFnQixHQUFHLE1BQU0sQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQTBEMUYsa0JBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2VuZXJhbEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgUlVOVElNRV9FUlJPUlMgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvdHlwZXMnO1xuXG5cbmNvbnN0IEhFQURfTUFTSyA9IDB4MDE7XG5jb25zdCBUQUlMX01BU0sgPSAweDAyO1xuXG5jb25zdCBCWVRFX1NISUZUID0gODtcbmNvbnN0IEJZVEVfTUFTSyAgPSAyICoqIEJZVEVfU0hJRlQgLSAxO1xuXG5pbnRlcmZhY2UgUGFja2V0SGVhZGVyRmxhZ3Mge1xuICAgIGhlYWQ6IGJvb2xlYW47XG4gICAgdGFpbDogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIFBhY2tldEhlYWRlckRhdGEgZXh0ZW5kcyBQYWNrZXRIZWFkZXJGbGFncyB7XG4gICAgc2l6ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhY2tldEhlYWRlciBleHRlbmRzIFBhY2tldEhlYWRlckRhdGF7XG4gICAgdG90YWxTaXplOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkUGFja2V0IHtcbiAgICBoZWFkZXI6IFBhY2tldEhlYWRlcjtcbiAgICBkYXRhOiBCdWZmZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBQYWNrZXQge1xuICAgIC8vIE5PVEU6IE1heCBtZXNzYWdlIHNpemU6IDY0IEtpQiwgaGVhZGVyIHNpemU6IDQgQlxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUFYX1BBQ0tFVF9TSVpFID0gNjQgKiAyICoqIDEwO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSEVBREVSX1NJWkUgPSA0O1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUFYX1BBWUxPQURfU0laRSA9IFBhY2tldC5NQVhfUEFDS0VUX1NJWkUgLSBQYWNrZXQuSEVBREVSX1NJWkU7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfcGFyc2VIZWFkZXIgKGJ1ZmZlcjogQnVmZmVyKTogUGFja2V0SGVhZGVyIHtcbiAgICAgICAgY29uc3QgZGF0YVNpemUgPSBidWZmZXJbMV0gPDwgQllURV9TSElGVCA8PCBCWVRFX1NISUZUIHwgYnVmZmVyWzJdIDw8IEJZVEVfU0hJRlQgfCBidWZmZXJbM107XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlYWQ6ICAgICAgQm9vbGVhbihidWZmZXJbMF0gJiBIRUFEX01BU0spLFxuICAgICAgICAgICAgdGFpbDogICAgICBCb29sZWFuKGJ1ZmZlclswXSAmIFRBSUxfTUFTSyksXG4gICAgICAgICAgICBzaXplOiAgICAgIGRhdGFTaXplLFxuICAgICAgICAgICAgdG90YWxTaXplOiBkYXRhU2l6ZSArIFBhY2tldC5IRUFERVJfU0laRVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2UgKGJ1ZmZlcjogQnVmZmVyKTogUGFyc2VkUGFja2V0fHVuZGVmaW5lZCB7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoIDwgUGFja2V0LkhFQURFUl9TSVpFKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcblxuICAgICAgICBjb25zdCBoZWFkZXIgPSBQYWNrZXQuX3BhcnNlSGVhZGVyKGJ1ZmZlcik7XG5cbiAgICAgICAgaWYgKGhlYWRlci5zaXplID4gdGhpcy5NQVhfUEFZTE9BRF9TSVpFKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy50b29MYXJnZUlQQ1BheWxvYWQpO1xuXG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoIDwgaGVhZGVyLnNpemUpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuXG4gICAgICAgIHJldHVybiB7IGhlYWRlciwgZGF0YTogYnVmZmVyLnNsaWNlKFBhY2tldC5IRUFERVJfU0laRSwgUGFja2V0LkhFQURFUl9TSVpFICsgaGVhZGVyLnNpemUpIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX3NlcmlhbGl6ZUhlYWRlciAoeyBzaXplLCBoZWFkLCB0YWlsIH06IFBhY2tldEhlYWRlckRhdGEsIGJ1ZmZlcjogQnVmZmVyKTogdm9pZCB7XG4gICAgICAgIGJ1ZmZlclswXSA9IDA7XG5cbiAgICAgICAgaWYgKGhlYWQpXG4gICAgICAgICAgICBidWZmZXJbMF0gfD0gSEVBRF9NQVNLO1xuXG4gICAgICAgIGlmICh0YWlsKVxuICAgICAgICAgICAgYnVmZmVyWzBdIHw9IFRBSUxfTUFTSztcblxuICAgICAgICBidWZmZXJbMV0gPSBzaXplID4+IEJZVEVfU0hJRlQgPj4gQllURV9TSElGVCAmIEJZVEVfTUFTSztcbiAgICAgICAgYnVmZmVyWzJdID0gc2l6ZSA+PiBCWVRFX1NISUZUICYgQllURV9NQVNLO1xuICAgICAgICBidWZmZXJbM10gPSBzaXplICYgQllURV9NQVNLO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc2VyaWFsaXplIChkYXRhOiBCdWZmZXIsIHsgaGVhZCA9IGZhbHNlLCB0YWlsID0gZmFsc2UgfTogUGFydGlhbDxQYWNrZXRIZWFkZXJGbGFncz4gPSB7fSk6IEJ1ZmZlciB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBkYXRhLmxlbmd0aDtcblxuICAgICAgICBpZiAoc2l6ZSA+IFBhY2tldC5NQVhfUEFZTE9BRF9TSVpFKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy50b29MYXJnZUlQQ1BheWxvYWQpO1xuXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhzaXplICsgUGFja2V0LkhFQURFUl9TSVpFKTtcblxuICAgICAgICBQYWNrZXQuX3NlcmlhbGl6ZUhlYWRlcih7IHNpemUsIGhlYWQsIHRhaWwgfSwgYnVmZmVyKTtcblxuICAgICAgICBkYXRhLmNvcHkoYnVmZmVyLCBQYWNrZXQuSEVBREVSX1NJWkUpO1xuXG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYWNrZXQ7XG5cblxuIl19