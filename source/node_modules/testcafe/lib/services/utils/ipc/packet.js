"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Packet = void 0;
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
const HEAD_MASK = 0x01;
const TAIL_MASK = 0x02;
const BYTE_SHIFT = 8;
const BYTE_MASK = 2 ** BYTE_SHIFT - 1;
let Packet = /** @class */ (() => {
    class Packet {
        static _parseHeader(buffer) {
            const dataSize = buffer[1] << BYTE_SHIFT << BYTE_SHIFT | buffer[2] << BYTE_SHIFT | buffer[3];
            return {
                head: Boolean(buffer[0] & HEAD_MASK),
                tail: Boolean(buffer[0] & TAIL_MASK),
                size: dataSize,
                totalSize: dataSize + Packet.HEADER_SIZE
            };
        }
        static parse(buffer) {
            if (buffer.length < Packet.HEADER_SIZE)
                return void 0;
            const header = Packet._parseHeader(buffer);
            if (header.size > this.MAX_PAYLOAD_SIZE)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.tooLargeIPCPayload);
            if (buffer.length < header.size)
                return void 0;
            return { header, data: buffer.slice(Packet.HEADER_SIZE, Packet.HEADER_SIZE + header.size) };
        }
        static _serializeHeader({ size, head, tail }, buffer) {
            buffer[0] = 0;
            if (head)
                buffer[0] |= HEAD_MASK;
            if (tail)
                buffer[0] |= TAIL_MASK;
            buffer[1] = size >> BYTE_SHIFT >> BYTE_SHIFT & BYTE_MASK;
            buffer[2] = size >> BYTE_SHIFT & BYTE_MASK;
            buffer[3] = size & BYTE_MASK;
        }
        static serialize(data, { head = false, tail = false } = {}) {
            const size = data.length;
            if (size > Packet.MAX_PAYLOAD_SIZE)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.tooLargeIPCPayload);
            const buffer = Buffer.alloc(size + Packet.HEADER_SIZE);
            Packet._serializeHeader({ size, head, tail }, buffer);
            data.copy(buffer, Packet.HEADER_SIZE);
            return buffer;
        }
    }
    // NOTE: Max message size: 64 KiB, header size: 4 B
    Packet.MAX_PACKET_SIZE = 64 * 2 ** 10;
    Packet.HEADER_SIZE = 4;
    Packet.MAX_PAYLOAD_SIZE = Packet.MAX_PACKET_SIZE - Packet.HEADER_SIZE;
    return Packet;
})();
exports.Packet = Packet;
exports.default = Packet;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3V0aWxzL2lwYy9wYWNrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscURBQXVEO0FBQ3ZELGlEQUF1RDtBQUd2RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBRXZCLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNyQixNQUFNLFNBQVMsR0FBSSxDQUFDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQW9CdkM7SUFBQSxNQUFhLE1BQU07UUFNUCxNQUFNLENBQUMsWUFBWSxDQUFFLE1BQWM7WUFDdkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFN0YsT0FBTztnQkFDSCxJQUFJLEVBQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7Z0JBQ3pDLElBQUksRUFBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztnQkFDekMsSUFBSSxFQUFPLFFBQVE7Z0JBQ25CLFNBQVMsRUFBRSxRQUFRLEdBQUcsTUFBTSxDQUFDLFdBQVc7YUFDM0MsQ0FBQztRQUNOLENBQUM7UUFFTSxNQUFNLENBQUMsS0FBSyxDQUFFLE1BQWM7WUFDL0IsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXO2dCQUNsQyxPQUFPLEtBQUssQ0FBQyxDQUFDO1lBRWxCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFM0MsSUFBSSxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0I7Z0JBQ25DLE1BQU0sSUFBSSxzQkFBWSxDQUFDLHNCQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUU5RCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUk7Z0JBQzNCLE9BQU8sS0FBSyxDQUFDLENBQUM7WUFFbEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDaEcsQ0FBQztRQUVPLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFvQixFQUFFLE1BQWM7WUFDbkYsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVkLElBQUksSUFBSTtnQkFDSixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDO1lBRTNCLElBQUksSUFBSTtnQkFDSixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDO1lBRTNCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksVUFBVSxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUM7WUFDekQsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDO1lBQzNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLENBQUM7UUFFTSxNQUFNLENBQUMsU0FBUyxDQUFFLElBQVksRUFBRSxFQUFFLElBQUksR0FBRyxLQUFLLEVBQUUsSUFBSSxHQUFHLEtBQUssS0FBaUMsRUFBRTtZQUNsRyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRXpCLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0I7Z0JBQzlCLE1BQU0sSUFBSSxzQkFBWSxDQUFDLHNCQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUU5RCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFdkQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUV0RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFdEMsT0FBTyxNQUFNLENBQUM7UUFDbEIsQ0FBQzs7SUExREQsbURBQW1EO0lBQzVCLHNCQUFlLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0Isa0JBQVcsR0FBRyxDQUFDLENBQUM7SUFDaEIsdUJBQWdCLEdBQUcsTUFBTSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBd0QxRixhQUFDO0tBQUE7QUE1RFksd0JBQU07QUE4RG5CLGtCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlbmVyYWxFcnJvciB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzL3R5cGVzJztcblxuXG5jb25zdCBIRUFEX01BU0sgPSAweDAxO1xuY29uc3QgVEFJTF9NQVNLID0gMHgwMjtcblxuY29uc3QgQllURV9TSElGVCA9IDg7XG5jb25zdCBCWVRFX01BU0sgID0gMiAqKiBCWVRFX1NISUZUIC0gMTtcblxuaW50ZXJmYWNlIFBhY2tldEhlYWRlckZsYWdzIHtcbiAgICBoZWFkOiBib29sZWFuO1xuICAgIHRhaWw6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBQYWNrZXRIZWFkZXJEYXRhIGV4dGVuZHMgUGFja2V0SGVhZGVyRmxhZ3Mge1xuICAgIHNpemU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWNrZXRIZWFkZXIgZXh0ZW5kcyBQYWNrZXRIZWFkZXJEYXRhe1xuICAgIHRvdGFsU2l6ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFBhY2tldCB7XG4gICAgaGVhZGVyOiBQYWNrZXRIZWFkZXI7XG4gICAgZGF0YTogQnVmZmVyO1xufVxuXG5leHBvcnQgY2xhc3MgUGFja2V0IHtcbiAgICAvLyBOT1RFOiBNYXggbWVzc2FnZSBzaXplOiA2NCBLaUIsIGhlYWRlciBzaXplOiA0IEJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1BWF9QQUNLRVRfU0laRSA9IDY0ICogMiAqKiAxMDtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEhFQURFUl9TSVpFID0gNDtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1BWF9QQVlMT0FEX1NJWkUgPSBQYWNrZXQuTUFYX1BBQ0tFVF9TSVpFIC0gUGFja2V0LkhFQURFUl9TSVpFO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX3BhcnNlSGVhZGVyIChidWZmZXI6IEJ1ZmZlcik6IFBhY2tldEhlYWRlciB7XG4gICAgICAgIGNvbnN0IGRhdGFTaXplID0gYnVmZmVyWzFdIDw8IEJZVEVfU0hJRlQgPDwgQllURV9TSElGVCB8IGJ1ZmZlclsyXSA8PCBCWVRFX1NISUZUIHwgYnVmZmVyWzNdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWFkOiAgICAgIEJvb2xlYW4oYnVmZmVyWzBdICYgSEVBRF9NQVNLKSxcbiAgICAgICAgICAgIHRhaWw6ICAgICAgQm9vbGVhbihidWZmZXJbMF0gJiBUQUlMX01BU0spLFxuICAgICAgICAgICAgc2l6ZTogICAgICBkYXRhU2l6ZSxcbiAgICAgICAgICAgIHRvdGFsU2l6ZTogZGF0YVNpemUgKyBQYWNrZXQuSEVBREVSX1NJWkVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlIChidWZmZXI6IEJ1ZmZlcik6IFBhcnNlZFBhY2tldHx1bmRlZmluZWQge1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA8IFBhY2tldC5IRUFERVJfU0laRSlcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG5cbiAgICAgICAgY29uc3QgaGVhZGVyID0gUGFja2V0Ll9wYXJzZUhlYWRlcihidWZmZXIpO1xuXG4gICAgICAgIGlmIChoZWFkZXIuc2l6ZSA+IHRoaXMuTUFYX1BBWUxPQURfU0laRSlcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMudG9vTGFyZ2VJUENQYXlsb2FkKTtcblxuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA8IGhlYWRlci5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcblxuICAgICAgICByZXR1cm4geyBoZWFkZXIsIGRhdGE6IGJ1ZmZlci5zbGljZShQYWNrZXQuSEVBREVSX1NJWkUsIFBhY2tldC5IRUFERVJfU0laRSArIGhlYWRlci5zaXplKSB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIF9zZXJpYWxpemVIZWFkZXIgKHsgc2l6ZSwgaGVhZCwgdGFpbCB9OiBQYWNrZXRIZWFkZXJEYXRhLCBidWZmZXI6IEJ1ZmZlcik6IHZvaWQge1xuICAgICAgICBidWZmZXJbMF0gPSAwO1xuXG4gICAgICAgIGlmIChoZWFkKVxuICAgICAgICAgICAgYnVmZmVyWzBdIHw9IEhFQURfTUFTSztcblxuICAgICAgICBpZiAodGFpbClcbiAgICAgICAgICAgIGJ1ZmZlclswXSB8PSBUQUlMX01BU0s7XG5cbiAgICAgICAgYnVmZmVyWzFdID0gc2l6ZSA+PiBCWVRFX1NISUZUID4+IEJZVEVfU0hJRlQgJiBCWVRFX01BU0s7XG4gICAgICAgIGJ1ZmZlclsyXSA9IHNpemUgPj4gQllURV9TSElGVCAmIEJZVEVfTUFTSztcbiAgICAgICAgYnVmZmVyWzNdID0gc2l6ZSAmIEJZVEVfTUFTSztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHNlcmlhbGl6ZSAoZGF0YTogQnVmZmVyLCB7IGhlYWQgPSBmYWxzZSwgdGFpbCA9IGZhbHNlIH06IFBhcnRpYWw8UGFja2V0SGVhZGVyRmxhZ3M+ID0ge30pOiBCdWZmZXIge1xuICAgICAgICBjb25zdCBzaXplID0gZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHNpemUgPiBQYWNrZXQuTUFYX1BBWUxPQURfU0laRSlcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMudG9vTGFyZ2VJUENQYXlsb2FkKTtcblxuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2Moc2l6ZSArIFBhY2tldC5IRUFERVJfU0laRSk7XG5cbiAgICAgICAgUGFja2V0Ll9zZXJpYWxpemVIZWFkZXIoeyBzaXplLCBoZWFkLCB0YWlsIH0sIGJ1ZmZlcik7XG5cbiAgICAgICAgZGF0YS5jb3B5KGJ1ZmZlciwgUGFja2V0LkhFQURFUl9TSVpFKTtcblxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFja2V0O1xuXG5cbiJdfQ==