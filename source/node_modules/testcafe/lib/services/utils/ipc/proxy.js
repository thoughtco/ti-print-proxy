"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPCProxy = void 0;
const error_list_1 = __importDefault(require("../../../errors/error-list"));
const async_event_emitter_1 = __importDefault(require("../../../utils/async-event-emitter"));
const interfaces_1 = require("./interfaces");
const prerender_callsite_1 = __importDefault(require("../../../utils/prerender-callsite"));
class IPCProxy extends async_event_emitter_1.default {
    constructor(transport) {
        super();
        this._requestCounter = 0;
        this._transport = transport;
        this._handlers = {};
        this._transport.read();
        this._transport.on(interfaces_1.IPCTransportEvents.data, rawPacket => this._onRead(rawPacket));
        this.on('request', data => this._onRequest(data));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _saveError(error) {
        if (interfaces_1.isTestCafeErrorList(error)) {
            for (const item of error.items) {
                if (item.callsite)
                    item.callsite = prerender_callsite_1.default(item.callsite);
            }
            return error;
        }
        // NOTE: The properties of the 'Error' class lost during serialization using the 'JSON.stringify' way
        // because they are not enumerable.
        // We clone the object and copy these properties explicitly to mark these properties as enumerable.
        const errorData = Object.assign({}, error);
        errorData.name = errorData.name || error.name;
        errorData.message = errorData.message || error.message;
        errorData.stack = errorData.stack || error.stack;
        return errorData;
    }
    async _onRead(packet) {
        if (packet.type === interfaces_1.IPCPacketType.response)
            this.emit(`response-${packet.id}`, packet);
        else
            this.emit('request', packet);
    }
    async _onRequest(requestPacket) {
        let resultData = null;
        try {
            resultData = { result: await this._handlers[requestPacket.data.name](...requestPacket.data.args) };
        }
        catch (error) {
            resultData = { error: this._saveError(error) };
        }
        const responsePacket = {
            id: requestPacket.id,
            type: interfaces_1.IPCPacketType.response,
            sync: requestPacket.sync,
            data: resultData
        };
        await this._transport.write(responsePacket);
    }
    _createPacket(opts) {
        return {
            id: this._requestCounter++,
            type: interfaces_1.IPCPacketType.request,
            sync: opts.sync,
            data: opts.data
        };
    }
    _createPlainError(errorData) {
        const error = new Error(errorData.message);
        Object.assign(error, errorData);
        return error;
    }
    _createError(errorData) {
        if (interfaces_1.isTestCafeErrorList(errorData)) {
            const errorList = new error_list_1.default();
            errorList.items = errorData.items;
            return errorList;
        }
        return this._createPlainError(errorData);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    register(func, context = null) {
        if (this._handlers[func.name])
            return;
        this._handlers[func.name] = func.bind(context);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async call(target, ...args) {
        const name = typeof target === 'string' ? target : target.name;
        const packet = this._createPacket({ data: { name, args }, sync: false });
        const responsePromise = this.once(`response-${packet.id}`);
        await this._transport.write(packet);
        const { data } = await responsePromise;
        if (interfaces_1.isIPCErrorResponse(data))
            throw this._createError(data.error);
        return data.result;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    callSync(target, ...args) {
        const name = typeof target === 'string' ? target : target.name;
        const requestPacket = this._createPacket({ data: { name, args }, sync: true });
        this._transport.writeSync(requestPacket);
        let responsePacket = this._transport.readSync();
        while (responsePacket.id !== requestPacket.id)
            responsePacket = this._transport.readSync();
        const response = responsePacket.data;
        if (interfaces_1.isIPCErrorResponse(response))
            throw this._createError(response.error);
        return response.result;
    }
}
exports.IPCProxy = IPCProxy;
//# sourceMappingURL=data:application/json;base64,