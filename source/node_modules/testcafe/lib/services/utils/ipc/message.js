"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageSerializer = exports.MessageParser = void 0;
const packet_1 = __importDefault(require("./packet"));
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
class MessageParser {
    constructor() {
        this.dataQueue = [];
        this.packetQueue = [];
    }
    static _concatPackets(packets) {
        const data = packets.map(packet => packet.data);
        return Buffer.concat(data);
    }
    _processPacket(packet) {
        if (packet.header.tail) {
            if (!packet.header.head && this.packetQueue.length === 0)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.unexpectedIPCTailPacket);
            const packets = this.packetQueue.splice(0, this.packetQueue.length);
            const data = packet.header.head ? packet.data : MessageParser._concatPackets([...packets, packet]);
            return JSON.parse(data.toString());
        }
        if (packet.header.head && this.packetQueue.length !== 0) {
            this.packetQueue.splice(0, this.packetQueue.length);
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.unexpectedIPCHeadPacket);
        }
        if (!packet.header.head && !packet.header.tail && this.packetQueue.length === 0)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.unexpectedIPCBodyPacket);
        this.packetQueue.push(packet);
        return void 0;
    }
    _processData() {
        let buffer = Buffer.concat(this.dataQueue.splice(0, this.dataQueue.length));
        let packet = packet_1.default.parse(buffer);
        const messages = [];
        while (packet) {
            const message = this._processPacket(packet);
            if (message)
                messages.push(message);
            buffer = buffer.slice(packet.header.totalSize);
            packet = packet_1.default.parse(buffer);
        }
        if (buffer.length)
            this.dataQueue.unshift(buffer);
        return messages;
    }
    parse(data) {
        this.dataQueue.push(data);
        return this._processData();
    }
}
exports.MessageParser = MessageParser;
class MessageSerializer {
    static _chunkData(data) {
        const chunks = [];
        for (let index = 0; index < data.length; index += packet_1.default.MAX_PAYLOAD_SIZE) {
            const size = Math.min(data.length - index, packet_1.default.MAX_PAYLOAD_SIZE);
            const head = index === 0;
            const tail = index + size >= data.length;
            chunks.push(packet_1.default.serialize(data.slice(index, index + size), { head, tail }));
        }
        return chunks;
    }
    serialize(message) {
        return MessageSerializer._chunkData(Buffer.from(JSON.stringify(message)));
    }
}
exports.MessageSerializer = MessageSerializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy91dGlscy9pcGMvbWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzREFBMkQ7QUFDM0QscURBQXVEO0FBQ3ZELGlEQUF1RDtBQUd2RCxNQUFhLGFBQWE7SUFJdEI7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFLLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU8sTUFBTSxDQUFDLGNBQWMsQ0FBRSxPQUF1QjtRQUNsRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU8sY0FBYyxDQUFFLE1BQW9CO1FBQ3hDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUM7Z0JBQ3BELE1BQU0sSUFBSSxzQkFBWSxDQUFDLHNCQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUVuRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwRSxNQUFNLElBQUksR0FBTSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFdEcsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFcEQsTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUMzRSxNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFOUIsT0FBTyxLQUFLLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRU8sWUFBWTtRQUNoQixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxNQUFNLEdBQUcsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBRXBCLE9BQU8sTUFBTSxFQUFFO1lBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUU1QyxJQUFJLE9BQU87Z0JBQ1AsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUzQixNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRS9DLE1BQU0sR0FBRyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqQztRQUVELElBQUksTUFBTSxDQUFDLE1BQU07WUFDYixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuQyxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRU0sS0FBSyxDQUFFLElBQVk7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFMUIsT0FBTyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDL0IsQ0FBQztDQUNKO0FBcEVELHNDQW9FQztBQUVELE1BQWEsaUJBQWlCO0lBQ2xCLE1BQU0sQ0FBQyxVQUFVLENBQUUsSUFBWTtRQUNuQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFbEIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLGdCQUFNLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssRUFBRSxnQkFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDcEUsTUFBTSxJQUFJLEdBQUcsS0FBSyxLQUFLLENBQUMsQ0FBQztZQUN6QixNQUFNLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFekMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2xGO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLFNBQVMsQ0FBRSxPQUFlO1FBQzdCLE9BQU8saUJBQWlCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztDQUNKO0FBbEJELDhDQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHQgYXMgUGFja2V0LCBQYXJzZWRQYWNrZXQgfSBmcm9tICcuL3BhY2tldCc7XG5pbXBvcnQgeyBHZW5lcmFsRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBSVU5USU1FX0VSUk9SUyB9IGZyb20gJy4uLy4uLy4uL2Vycm9ycy90eXBlcyc7XG5cblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VQYXJzZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YVF1ZXVlOiBCdWZmZXJbXTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhY2tldFF1ZXVlOiBQYXJzZWRQYWNrZXRbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuZGF0YVF1ZXVlICAgPSBbXTtcbiAgICAgICAgdGhpcy5wYWNrZXRRdWV1ZSA9IFtdO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIF9jb25jYXRQYWNrZXRzIChwYWNrZXRzOiBQYXJzZWRQYWNrZXRbXSk6IEJ1ZmZlciB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBwYWNrZXRzLm1hcChwYWNrZXQgPT4gcGFja2V0LmRhdGEpO1xuXG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGRhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3Byb2Nlc3NQYWNrZXQgKHBhY2tldDogUGFyc2VkUGFja2V0KTogb2JqZWN0fHVuZGVmaW5lZCB7XG4gICAgICAgIGlmIChwYWNrZXQuaGVhZGVyLnRhaWwpIHtcbiAgICAgICAgICAgIGlmICghcGFja2V0LmhlYWRlci5oZWFkICYmIHRoaXMucGFja2V0UXVldWUubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMudW5leHBlY3RlZElQQ1RhaWxQYWNrZXQpO1xuXG4gICAgICAgICAgICBjb25zdCBwYWNrZXRzID0gdGhpcy5wYWNrZXRRdWV1ZS5zcGxpY2UoMCwgdGhpcy5wYWNrZXRRdWV1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSAgICA9IHBhY2tldC5oZWFkZXIuaGVhZCA/IHBhY2tldC5kYXRhIDogTWVzc2FnZVBhcnNlci5fY29uY2F0UGFja2V0cyhbLi4ucGFja2V0cywgcGFja2V0XSk7XG5cbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFja2V0LmhlYWRlci5oZWFkICYmIHRoaXMucGFja2V0UXVldWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnBhY2tldFF1ZXVlLnNwbGljZSgwLCB0aGlzLnBhY2tldFF1ZXVlLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMudW5leHBlY3RlZElQQ0hlYWRQYWNrZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYWNrZXQuaGVhZGVyLmhlYWQgJiYgIXBhY2tldC5oZWFkZXIudGFpbCAmJiB0aGlzLnBhY2tldFF1ZXVlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMudW5leHBlY3RlZElQQ0JvZHlQYWNrZXQpO1xuXG4gICAgICAgIHRoaXMucGFja2V0UXVldWUucHVzaChwYWNrZXQpO1xuXG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcHJvY2Vzc0RhdGEgKCk6IG9iamVjdFtdIHtcbiAgICAgICAgbGV0IGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQodGhpcy5kYXRhUXVldWUuc3BsaWNlKDAsIHRoaXMuZGF0YVF1ZXVlLmxlbmd0aCkpO1xuICAgICAgICBsZXQgcGFja2V0ID0gUGFja2V0LnBhcnNlKGJ1ZmZlcik7XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcblxuICAgICAgICB3aGlsZSAocGFja2V0KSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5fcHJvY2Vzc1BhY2tldChwYWNrZXQpO1xuXG4gICAgICAgICAgICBpZiAobWVzc2FnZSlcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UocGFja2V0LmhlYWRlci50b3RhbFNpemUpO1xuXG4gICAgICAgICAgICBwYWNrZXQgPSBQYWNrZXQucGFyc2UoYnVmZmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5kYXRhUXVldWUudW5zaGlmdChidWZmZXIpO1xuXG4gICAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgcGFyc2UgKGRhdGE6IEJ1ZmZlcik6IG9iamVjdFtdIHtcbiAgICAgICAgdGhpcy5kYXRhUXVldWUucHVzaChkYXRhKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc0RhdGEoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlU2VyaWFsaXplciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgX2NodW5rRGF0YSAoZGF0YTogQnVmZmVyKTogQnVmZmVyW10ge1xuICAgICAgICBjb25zdCBjaHVua3MgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZGF0YS5sZW5ndGg7IGluZGV4ICs9IFBhY2tldC5NQVhfUEFZTE9BRF9TSVpFKSB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gTWF0aC5taW4oZGF0YS5sZW5ndGggLSBpbmRleCwgUGFja2V0Lk1BWF9QQVlMT0FEX1NJWkUpO1xuICAgICAgICAgICAgY29uc3QgaGVhZCA9IGluZGV4ID09PSAwO1xuICAgICAgICAgICAgY29uc3QgdGFpbCA9IGluZGV4ICsgc2l6ZSA+PSBkYXRhLmxlbmd0aDtcblxuICAgICAgICAgICAgY2h1bmtzLnB1c2goUGFja2V0LnNlcmlhbGl6ZShkYXRhLnNsaWNlKGluZGV4LCBpbmRleCArIHNpemUpLCB7IGhlYWQsIHRhaWwgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNodW5rcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VyaWFsaXplIChtZXNzYWdlOiBvYmplY3QpOiBCdWZmZXJbXSB7XG4gICAgICAgIHJldHVybiBNZXNzYWdlU2VyaWFsaXplci5fY2h1bmtEYXRhKEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKSk7XG4gICAgfVxufVxuIl19