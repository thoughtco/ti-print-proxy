"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    screenshotsDisabled: 'Screenshots are disabled. To take screenshots, remove the "--disable-screenshots" command line flag or set the "disableScreenshots" option to "false" in the API or configuration file.',
    screenshotError: 'Was unable to take a screenshot due to an error.\n\n{errMessage}',
    screenshotMarkNotFound: 'Unable to locate the page area in the browser window screenshot at {screenshotPath}, because the page area mark with ID {markId} is not found in the screenshot.',
    screenshotsFullPageNotSupported: 'TestCafe does not support full-page screenshots in {browserAlias}.',
    screenshotRewritingError: 'The file at "{screenshotPath}" already exists. It has just been rewritten with a recent screenshot. This situation can possibly cause issues. To avoid them, make sure that each screenshot has a unique path. If a test runs in multiple browsers, consider including the user agent in the screenshot path or generate a unique identifier in another way.',
    browserManipulationsOnRemoteBrowser: 'The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.',
    screenshotNotSupportedByBrowserProvider: 'The screenshot functionality is not supported by the "{providerName}" browser provider.',
    videoNotSupportedByBrowser: 'Video recording is not supported by the "{browserAlias}" browser.',
    videoBrowserResizing: 'The browser window was resized during the "{testName}" test while TestCafe recorded a video. TestCafe cannot adjust the video resolution during recording. As a result, the video content may appear broken. Do not resize the browser window when TestCafe records a video.',
    resizeNotSupportedByBrowserProvider: 'The window resize functionality is not supported by the "{providerName}" browser provider.',
    maximizeNotSupportedByBrowserProvider: 'The window maximization functionality is not supported by the "{providerName}" browser provider.',
    resizeError: 'Was unable to resize the window due to an error.\n\n{errMessage}',
    maximizeError: 'Was unable to maximize the window due to an error.\n\n{errMessage}',
    requestMockCORSValidationFailed: '{RequestHook}: CORS validation failed for a request specified as {requestFilterRule}',
    debugInHeadlessError: 'You cannot debug in headless mode.',
    cannotReadConfigFile: 'An error has occurred while reading the configuration file.',
    cannotParseConfigFile: "Failed to parse the '{path}' file.\n\nThis file is not a well-formed JSON file.",
    configOptionsWereOverriden: 'The {optionsString} option{suffix} from the configuration file will be ignored.',
    cannotOverrideTypeScriptConfigOptions: 'You cannot override the "{optionName}" compiler option in the TypeScript configuration file.',
    cannotFindSSLCertFile: 'Unable to find the "{path}" file, specified by the "{option}" ssl option. Error details:\n' +
        '\n' +
        '{err}',
    cannotFindConfigurationFile: 'Unable to find the "{path}" configuration file. Error details:\n' +
        '\n' +
        '{err}',
    problematicPathPatternPlaceholderForVideoRecording: 'The {placeholderList} path pattern placeholder{suffix} cannot be applied to the recorded video.\n' +
        '\n' +
        'The placeholder{suffix} {verb} replaced with an empty string.',
    clientScriptsWithEmptyContent: 'The client script you tried to inject is empty.',
    clientScriptsWithDuplicatedContent: 'You injected the following client script{suffix} several times:\n {duplicatedScripts}'
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy1tZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGlmaWNhdGlvbnMvd2FybmluZy1tZXNzYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWU7SUFDWCxtQkFBbUIsRUFBc0IseUxBQXlMO0lBQ2xPLGVBQWUsRUFBMEIsa0VBQWtFO0lBQzNHLHNCQUFzQixFQUFtQixrS0FBa0s7SUFDM00sK0JBQStCLEVBQVUsb0VBQW9FO0lBQzdHLHdCQUF3QixFQUFpQiw4VkFBOFY7SUFDdlksbUNBQW1DLEVBQU0sa05BQWtOO0lBQzNQLHVDQUF1QyxFQUFFLHlGQUF5RjtJQUNsSSwwQkFBMEIsRUFBZSxtRUFBbUU7SUFDNUcsb0JBQW9CLEVBQXFCLDhRQUE4UTtJQUN2VCxtQ0FBbUMsRUFBTSw0RkFBNEY7SUFDckkscUNBQXFDLEVBQUksa0dBQWtHO0lBQzNJLFdBQVcsRUFBOEIsa0VBQWtFO0lBQzNHLGFBQWEsRUFBNEIsb0VBQW9FO0lBQzdHLCtCQUErQixFQUFVLHNGQUFzRjtJQUMvSCxvQkFBb0IsRUFBcUIsb0NBQW9DO0lBQzdFLG9CQUFvQixFQUFxQiw2REFBNkQ7SUFDdEcscUJBQXFCLEVBQW9CLGlGQUFpRjtJQUMxSCwwQkFBMEIsRUFBZSxpRkFBaUY7SUFDMUgscUNBQXFDLEVBQUksOEZBQThGO0lBRXZJLHFCQUFxQixFQUFFLDRGQUE0RjtRQUM1RixJQUFJO1FBQ0osT0FBTztJQUU5QiwyQkFBMkIsRUFBRSxrRUFBa0U7UUFDbEUsSUFBSTtRQUNKLE9BQU87SUFFcEMsa0RBQWtELEVBQUUsbUdBQW1HO1FBQ25HLElBQUk7UUFDSiwrREFBK0Q7SUFFbkgsNkJBQTZCLEVBQU8saURBQWlEO0lBQ3JGLGtDQUFrQyxFQUFFLHVGQUF1RjtDQUM5SCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIHNjcmVlbnNob3RzRGlzYWJsZWQ6ICAgICAgICAgICAgICAgICAgICAgJ1NjcmVlbnNob3RzIGFyZSBkaXNhYmxlZC4gVG8gdGFrZSBzY3JlZW5zaG90cywgcmVtb3ZlIHRoZSBcIi0tZGlzYWJsZS1zY3JlZW5zaG90c1wiIGNvbW1hbmQgbGluZSBmbGFnIG9yIHNldCB0aGUgXCJkaXNhYmxlU2NyZWVuc2hvdHNcIiBvcHRpb24gdG8gXCJmYWxzZVwiIGluIHRoZSBBUEkgb3IgY29uZmlndXJhdGlvbiBmaWxlLicsXG4gICAgc2NyZWVuc2hvdEVycm9yOiAgICAgICAgICAgICAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byB0YWtlIGEgc2NyZWVuc2hvdCBkdWUgdG8gYW4gZXJyb3IuXFxuXFxue2Vyck1lc3NhZ2V9JyxcbiAgICBzY3JlZW5zaG90TWFya05vdEZvdW5kOiAgICAgICAgICAgICAgICAgICdVbmFibGUgdG8gbG9jYXRlIHRoZSBwYWdlIGFyZWEgaW4gdGhlIGJyb3dzZXIgd2luZG93IHNjcmVlbnNob3QgYXQge3NjcmVlbnNob3RQYXRofSwgYmVjYXVzZSB0aGUgcGFnZSBhcmVhIG1hcmsgd2l0aCBJRCB7bWFya0lkfSBpcyBub3QgZm91bmQgaW4gdGhlIHNjcmVlbnNob3QuJyxcbiAgICBzY3JlZW5zaG90c0Z1bGxQYWdlTm90U3VwcG9ydGVkOiAgICAgICAgICdUZXN0Q2FmZSBkb2VzIG5vdCBzdXBwb3J0IGZ1bGwtcGFnZSBzY3JlZW5zaG90cyBpbiB7YnJvd3NlckFsaWFzfS4nLFxuICAgIHNjcmVlbnNob3RSZXdyaXRpbmdFcnJvcjogICAgICAgICAgICAgICAgJ1RoZSBmaWxlIGF0IFwie3NjcmVlbnNob3RQYXRofVwiIGFscmVhZHkgZXhpc3RzLiBJdCBoYXMganVzdCBiZWVuIHJld3JpdHRlbiB3aXRoIGEgcmVjZW50IHNjcmVlbnNob3QuIFRoaXMgc2l0dWF0aW9uIGNhbiBwb3NzaWJseSBjYXVzZSBpc3N1ZXMuIFRvIGF2b2lkIHRoZW0sIG1ha2Ugc3VyZSB0aGF0IGVhY2ggc2NyZWVuc2hvdCBoYXMgYSB1bmlxdWUgcGF0aC4gSWYgYSB0ZXN0IHJ1bnMgaW4gbXVsdGlwbGUgYnJvd3NlcnMsIGNvbnNpZGVyIGluY2x1ZGluZyB0aGUgdXNlciBhZ2VudCBpbiB0aGUgc2NyZWVuc2hvdCBwYXRoIG9yIGdlbmVyYXRlIGEgdW5pcXVlIGlkZW50aWZpZXIgaW4gYW5vdGhlciB3YXkuJyxcbiAgICBicm93c2VyTWFuaXB1bGF0aW9uc09uUmVtb3RlQnJvd3NlcjogICAgICdUaGUgc2NyZWVuc2hvdCBhbmQgd2luZG93IHJlc2l6ZSBmdW5jdGlvbmFsaXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gYSByZW1vdGUgYnJvd3Nlci4gVGhleSBjYW4gZnVuY3Rpb24gb25seSBpZiB0aGUgYnJvd3NlciBpcyBydW5uaW5nIG9uIHRoZSBzYW1lIG1hY2hpbmUgYW5kIGluIHRoZSBzYW1lIGVudmlyb25tZW50IGFzIHRoZSBUZXN0Q2FmZSBzZXJ2ZXIuJyxcbiAgICBzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICdUaGUgc2NyZWVuc2hvdCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgdmlkZW9Ob3RTdXBwb3J0ZWRCeUJyb3dzZXI6ICAgICAgICAgICAgICAnVmlkZW8gcmVjb3JkaW5nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie2Jyb3dzZXJBbGlhc31cIiBicm93c2VyLicsXG4gICAgdmlkZW9Ccm93c2VyUmVzaXppbmc6ICAgICAgICAgICAgICAgICAgICAnVGhlIGJyb3dzZXIgd2luZG93IHdhcyByZXNpemVkIGR1cmluZyB0aGUgXCJ7dGVzdE5hbWV9XCIgdGVzdCB3aGlsZSBUZXN0Q2FmZSByZWNvcmRlZCBhIHZpZGVvLiBUZXN0Q2FmZSBjYW5ub3QgYWRqdXN0IHRoZSB2aWRlbyByZXNvbHV0aW9uIGR1cmluZyByZWNvcmRpbmcuIEFzIGEgcmVzdWx0LCB0aGUgdmlkZW8gY29udGVudCBtYXkgYXBwZWFyIGJyb2tlbi4gRG8gbm90IHJlc2l6ZSB0aGUgYnJvd3NlciB3aW5kb3cgd2hlbiBUZXN0Q2FmZSByZWNvcmRzIGEgdmlkZW8uJyxcbiAgICByZXNpemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogICAgICdUaGUgd2luZG93IHJlc2l6ZSBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgbWF4aW1pemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogICAnVGhlIHdpbmRvdyBtYXhpbWl6YXRpb24gZnVuY3Rpb25hbGl0eSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBcIntwcm92aWRlck5hbWV9XCIgYnJvd3NlciBwcm92aWRlci4nLFxuICAgIHJlc2l6ZUVycm9yOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcyB1bmFibGUgdG8gcmVzaXplIHRoZSB3aW5kb3cgZHVlIHRvIGFuIGVycm9yLlxcblxcbntlcnJNZXNzYWdlfScsXG4gICAgbWF4aW1pemVFcnJvcjogICAgICAgICAgICAgICAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byBtYXhpbWl6ZSB0aGUgd2luZG93IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIHJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQ6ICAgICAgICAgJ3tSZXF1ZXN0SG9va306IENPUlMgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGEgcmVxdWVzdCBzcGVjaWZpZWQgYXMge3JlcXVlc3RGaWx0ZXJSdWxlfScsXG4gICAgZGVidWdJbkhlYWRsZXNzRXJyb3I6ICAgICAgICAgICAgICAgICAgICAnWW91IGNhbm5vdCBkZWJ1ZyBpbiBoZWFkbGVzcyBtb2RlLicsXG4gICAgY2Fubm90UmVhZENvbmZpZ0ZpbGU6ICAgICAgICAgICAgICAgICAgICAnQW4gZXJyb3IgaGFzIG9jY3VycmVkIHdoaWxlIHJlYWRpbmcgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZS4nLFxuICAgIGNhbm5vdFBhcnNlQ29uZmlnRmlsZTogICAgICAgICAgICAgICAgICAgXCJGYWlsZWQgdG8gcGFyc2UgdGhlICd7cGF0aH0nIGZpbGUuXFxuXFxuVGhpcyBmaWxlIGlzIG5vdCBhIHdlbGwtZm9ybWVkIEpTT04gZmlsZS5cIixcbiAgICBjb25maWdPcHRpb25zV2VyZU92ZXJyaWRlbjogICAgICAgICAgICAgICdUaGUge29wdGlvbnNTdHJpbmd9IG9wdGlvbntzdWZmaXh9IGZyb20gdGhlIGNvbmZpZ3VyYXRpb24gZmlsZSB3aWxsIGJlIGlnbm9yZWQuJyxcbiAgICBjYW5ub3RPdmVycmlkZVR5cGVTY3JpcHRDb25maWdPcHRpb25zOiAgICdZb3UgY2Fubm90IG92ZXJyaWRlIHRoZSBcIntvcHRpb25OYW1lfVwiIGNvbXBpbGVyIG9wdGlvbiBpbiB0aGUgVHlwZVNjcmlwdCBjb25maWd1cmF0aW9uIGZpbGUuJyxcblxuICAgIGNhbm5vdEZpbmRTU0xDZXJ0RmlsZTogJ1VuYWJsZSB0byBmaW5kIHRoZSBcIntwYXRofVwiIGZpbGUsIHNwZWNpZmllZCBieSB0aGUgXCJ7b3B0aW9ufVwiIHNzbCBvcHRpb24uIEVycm9yIGRldGFpbHM6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAne2Vycn0nLFxuXG4gICAgY2Fubm90RmluZENvbmZpZ3VyYXRpb25GaWxlOiAnVW5hYmxlIHRvIGZpbmQgdGhlIFwie3BhdGh9XCIgY29uZmlndXJhdGlvbiBmaWxlLiBFcnJvciBkZXRhaWxzOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3tlcnJ9JyxcblxuICAgIHByb2JsZW1hdGljUGF0aFBhdHRlcm5QbGFjZWhvbGRlckZvclZpZGVvUmVjb3JkaW5nOiAnVGhlIHtwbGFjZWhvbGRlckxpc3R9IHBhdGggcGF0dGVybiBwbGFjZWhvbGRlcntzdWZmaXh9IGNhbm5vdCBiZSBhcHBsaWVkIHRvIHRoZSByZWNvcmRlZCB2aWRlby5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGhlIHBsYWNlaG9sZGVye3N1ZmZpeH0ge3ZlcmJ9IHJlcGxhY2VkIHdpdGggYW4gZW1wdHkgc3RyaW5nLicsXG5cbiAgICBjbGllbnRTY3JpcHRzV2l0aEVtcHR5Q29udGVudDogICAgICAnVGhlIGNsaWVudCBzY3JpcHQgeW91IHRyaWVkIHRvIGluamVjdCBpcyBlbXB0eS4nLFxuICAgIGNsaWVudFNjcmlwdHNXaXRoRHVwbGljYXRlZENvbnRlbnQ6ICdZb3UgaW5qZWN0ZWQgdGhlIGZvbGxvd2luZyBjbGllbnQgc2NyaXB0e3N1ZmZpeH0gc2V2ZXJhbCB0aW1lczpcXG4ge2R1cGxpY2F0ZWRTY3JpcHRzfSdcbn07XG5cbiJdfQ==