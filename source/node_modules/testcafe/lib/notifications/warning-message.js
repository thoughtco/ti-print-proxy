"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    screenshotsDisabled: 'Screenshots are disabled. To take screenshots, remove the "--disable-screenshots" command line flag or set the "disableScreenshots" option to "false" in the API or configuration file.',
    screenshotError: 'Was unable to take a screenshot due to an error.\n\n{errMessage}',
    screenshotMarkNotFound: 'Unable to locate the page area in the browser window screenshot at {screenshotPath}, because the page area mark with ID {markId} is not found in the screenshot.',
    screenshotsFullPageNotSupported: 'TestCafe does not support full-page screenshots in {browserAlias}.',
    screenshotRewritingError: 'The file at "{screenshotPath}" already exists. It has just been rewritten with a recent screenshot. This situation can possibly cause issues. To avoid them, make sure that each screenshot has a unique path. If a test runs in multiple browsers, consider including the user agent in the screenshot path or generate a unique identifier in another way.',
    browserManipulationsOnRemoteBrowser: 'The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.',
    screenshotNotSupportedByBrowserProvider: 'The screenshot functionality is not supported by the "{providerName}" browser provider.',
    videoNotSupportedByBrowser: 'Video recording is not supported by the "{browserAlias}" browser.',
    videoBrowserResizing: 'The browser window was resized during the "{testName}" test while TestCafe recorded a video. TestCafe cannot adjust the video resolution during recording. As a result, the video content may appear broken. Do not resize the browser window when TestCafe records a video.',
    resizeNotSupportedByBrowserProvider: 'The window resize functionality is not supported by the "{providerName}" browser provider.',
    maximizeNotSupportedByBrowserProvider: 'The window maximization functionality is not supported by the "{providerName}" browser provider.',
    resizeError: 'Was unable to resize the window due to an error.\n\n{errMessage}',
    maximizeError: 'Was unable to maximize the window due to an error.\n\n{errMessage}',
    requestMockCORSValidationFailed: '{RequestHook}: CORS validation failed for a request specified as {requestFilterRule}',
    debugInHeadlessError: 'You cannot debug in headless mode.',
    cannotReadConfigFile: 'An error has occurred while reading the configuration file.',
    cannotParseConfigFile: "Failed to parse the '{path}' file.\n\nThis file is not a well-formed JSON file.",
    configOptionsWereOverriden: 'The {optionsString} option{suffix} from the configuration file will be ignored.',
    cannotOverrideTypeScriptConfigOptions: 'You cannot override the "{optionName}" compiler option in the TypeScript configuration file.',
    cannotFindSSLCertFile: 'Unable to find the "{path}" file, specified by the "{option}" ssl option. Error details:\n' +
        '\n' +
        '{err}',
    cannotFindConfigurationFile: 'Unable to find the "{path}" configuration file. Error details:\n' +
        '\n' +
        '{err}',
    problematicPathPatternPlaceholderForVideoRecording: 'The {placeholderList} path pattern placeholder{suffix} cannot be applied to the recorded video.\n' +
        '\n' +
        'The placeholder{suffix} {verb} replaced with an empty string.',
    clientScriptsWithEmptyContent: 'The client script you tried to inject is empty.',
    clientScriptsWithDuplicatedContent: 'You injected the following client script{suffix} several times:\n {duplicatedScripts}',
    assertedSelectorInstance: 'You passed a Selector object to \'t.expect()\'.\nIf you want to check that a matched element exists, pass the \'selector.exists\' value instead.',
    assertedClientFunctionInstance: 'You passed a ClientFunction object to \'t.expect()\'.\nIf you want to check the function\'s return value, call the client function (\'clientFunction()\') instead.'
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy1tZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGlmaWNhdGlvbnMvd2FybmluZy1tZXNzYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWU7SUFDWCxtQkFBbUIsRUFBc0IseUxBQXlMO0lBQ2xPLGVBQWUsRUFBMEIsa0VBQWtFO0lBQzNHLHNCQUFzQixFQUFtQixrS0FBa0s7SUFDM00sK0JBQStCLEVBQVUsb0VBQW9FO0lBQzdHLHdCQUF3QixFQUFpQiw4VkFBOFY7SUFDdlksbUNBQW1DLEVBQU0sa05BQWtOO0lBQzNQLHVDQUF1QyxFQUFFLHlGQUF5RjtJQUNsSSwwQkFBMEIsRUFBZSxtRUFBbUU7SUFDNUcsb0JBQW9CLEVBQXFCLDhRQUE4UTtJQUN2VCxtQ0FBbUMsRUFBTSw0RkFBNEY7SUFDckkscUNBQXFDLEVBQUksa0dBQWtHO0lBQzNJLFdBQVcsRUFBOEIsa0VBQWtFO0lBQzNHLGFBQWEsRUFBNEIsb0VBQW9FO0lBQzdHLCtCQUErQixFQUFVLHNGQUFzRjtJQUMvSCxvQkFBb0IsRUFBcUIsb0NBQW9DO0lBQzdFLG9CQUFvQixFQUFxQiw2REFBNkQ7SUFDdEcscUJBQXFCLEVBQW9CLGlGQUFpRjtJQUMxSCwwQkFBMEIsRUFBZSxpRkFBaUY7SUFDMUgscUNBQXFDLEVBQUksOEZBQThGO0lBRXZJLHFCQUFxQixFQUFFLDRGQUE0RjtRQUM1RixJQUFJO1FBQ0osT0FBTztJQUU5QiwyQkFBMkIsRUFBRSxrRUFBa0U7UUFDbEUsSUFBSTtRQUNKLE9BQU87SUFFcEMsa0RBQWtELEVBQUUsbUdBQW1HO1FBQ25HLElBQUk7UUFDSiwrREFBK0Q7SUFFbkgsNkJBQTZCLEVBQU8saURBQWlEO0lBQ3JGLGtDQUFrQyxFQUFFLHVGQUF1RjtJQUMzSCx3QkFBd0IsRUFBWSxrSkFBa0o7SUFDdEwsOEJBQThCLEVBQU0sb0tBQW9LO0NBQzNNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgc2NyZWVuc2hvdHNEaXNhYmxlZDogICAgICAgICAgICAgICAgICAgICAnU2NyZWVuc2hvdHMgYXJlIGRpc2FibGVkLiBUbyB0YWtlIHNjcmVlbnNob3RzLCByZW1vdmUgdGhlIFwiLS1kaXNhYmxlLXNjcmVlbnNob3RzXCIgY29tbWFuZCBsaW5lIGZsYWcgb3Igc2V0IHRoZSBcImRpc2FibGVTY3JlZW5zaG90c1wiIG9wdGlvbiB0byBcImZhbHNlXCIgaW4gdGhlIEFQSSBvciBjb25maWd1cmF0aW9uIGZpbGUuJyxcbiAgICBzY3JlZW5zaG90RXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHRha2UgYSBzY3JlZW5zaG90IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIHNjcmVlbnNob3RNYXJrTm90Rm91bmQ6ICAgICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBsb2NhdGUgdGhlIHBhZ2UgYXJlYSBpbiB0aGUgYnJvd3NlciB3aW5kb3cgc2NyZWVuc2hvdCBhdCB7c2NyZWVuc2hvdFBhdGh9LCBiZWNhdXNlIHRoZSBwYWdlIGFyZWEgbWFyayB3aXRoIElEIHttYXJrSWR9IGlzIG5vdCBmb3VuZCBpbiB0aGUgc2NyZWVuc2hvdC4nLFxuICAgIHNjcmVlbnNob3RzRnVsbFBhZ2VOb3RTdXBwb3J0ZWQ6ICAgICAgICAgJ1Rlc3RDYWZlIGRvZXMgbm90IHN1cHBvcnQgZnVsbC1wYWdlIHNjcmVlbnNob3RzIGluIHticm93c2VyQWxpYXN9LicsXG4gICAgc2NyZWVuc2hvdFJld3JpdGluZ0Vycm9yOiAgICAgICAgICAgICAgICAnVGhlIGZpbGUgYXQgXCJ7c2NyZWVuc2hvdFBhdGh9XCIgYWxyZWFkeSBleGlzdHMuIEl0IGhhcyBqdXN0IGJlZW4gcmV3cml0dGVuIHdpdGggYSByZWNlbnQgc2NyZWVuc2hvdC4gVGhpcyBzaXR1YXRpb24gY2FuIHBvc3NpYmx5IGNhdXNlIGlzc3Vlcy4gVG8gYXZvaWQgdGhlbSwgbWFrZSBzdXJlIHRoYXQgZWFjaCBzY3JlZW5zaG90IGhhcyBhIHVuaXF1ZSBwYXRoLiBJZiBhIHRlc3QgcnVucyBpbiBtdWx0aXBsZSBicm93c2VycywgY29uc2lkZXIgaW5jbHVkaW5nIHRoZSB1c2VyIGFnZW50IGluIHRoZSBzY3JlZW5zaG90IHBhdGggb3IgZ2VuZXJhdGUgYSB1bmlxdWUgaWRlbnRpZmllciBpbiBhbm90aGVyIHdheS4nLFxuICAgIGJyb3dzZXJNYW5pcHVsYXRpb25zT25SZW1vdGVCcm93c2VyOiAgICAgJ1RoZSBzY3JlZW5zaG90IGFuZCB3aW5kb3cgcmVzaXplIGZ1bmN0aW9uYWxpdGllcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBhIHJlbW90ZSBicm93c2VyLiBUaGV5IGNhbiBmdW5jdGlvbiBvbmx5IGlmIHRoZSBicm93c2VyIGlzIHJ1bm5pbmcgb24gdGhlIHNhbWUgbWFjaGluZSBhbmQgaW4gdGhlIHNhbWUgZW52aXJvbm1lbnQgYXMgdGhlIFRlc3RDYWZlIHNlcnZlci4nLFxuICAgIHNjcmVlbnNob3ROb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogJ1RoZSBzY3JlZW5zaG90IGZ1bmN0aW9uYWxpdHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7cHJvdmlkZXJOYW1lfVwiIGJyb3dzZXIgcHJvdmlkZXIuJyxcbiAgICB2aWRlb05vdFN1cHBvcnRlZEJ5QnJvd3NlcjogICAgICAgICAgICAgICdWaWRlbyByZWNvcmRpbmcgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7YnJvd3NlckFsaWFzfVwiIGJyb3dzZXIuJyxcbiAgICB2aWRlb0Jyb3dzZXJSZXNpemluZzogICAgICAgICAgICAgICAgICAgICdUaGUgYnJvd3NlciB3aW5kb3cgd2FzIHJlc2l6ZWQgZHVyaW5nIHRoZSBcInt0ZXN0TmFtZX1cIiB0ZXN0IHdoaWxlIFRlc3RDYWZlIHJlY29yZGVkIGEgdmlkZW8uIFRlc3RDYWZlIGNhbm5vdCBhZGp1c3QgdGhlIHZpZGVvIHJlc29sdXRpb24gZHVyaW5nIHJlY29yZGluZy4gQXMgYSByZXN1bHQsIHRoZSB2aWRlbyBjb250ZW50IG1heSBhcHBlYXIgYnJva2VuLiBEbyBub3QgcmVzaXplIHRoZSBicm93c2VyIHdpbmRvdyB3aGVuIFRlc3RDYWZlIHJlY29yZHMgYSB2aWRlby4nLFxuICAgIHJlc2l6ZU5vdFN1cHBvcnRlZEJ5QnJvd3NlclByb3ZpZGVyOiAgICAgJ1RoZSB3aW5kb3cgcmVzaXplIGZ1bmN0aW9uYWxpdHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgXCJ7cHJvdmlkZXJOYW1lfVwiIGJyb3dzZXIgcHJvdmlkZXIuJyxcbiAgICBtYXhpbWl6ZU5vdFN1cHBvcnRlZEJ5QnJvd3NlclByb3ZpZGVyOiAgICdUaGUgd2luZG93IG1heGltaXphdGlvbiBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgcmVzaXplRXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byByZXNpemUgdGhlIHdpbmRvdyBkdWUgdG8gYW4gZXJyb3IuXFxuXFxue2Vyck1lc3NhZ2V9JyxcbiAgICBtYXhpbWl6ZUVycm9yOiAgICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIG1heGltaXplIHRoZSB3aW5kb3cgZHVlIHRvIGFuIGVycm9yLlxcblxcbntlcnJNZXNzYWdlfScsXG4gICAgcmVxdWVzdE1vY2tDT1JTVmFsaWRhdGlvbkZhaWxlZDogICAgICAgICAne1JlcXVlc3RIb29rfTogQ09SUyB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgYSByZXF1ZXN0IHNwZWNpZmllZCBhcyB7cmVxdWVzdEZpbHRlclJ1bGV9JyxcbiAgICBkZWJ1Z0luSGVhZGxlc3NFcnJvcjogICAgICAgICAgICAgICAgICAgICdZb3UgY2Fubm90IGRlYnVnIGluIGhlYWRsZXNzIG1vZGUuJyxcbiAgICBjYW5ub3RSZWFkQ29uZmlnRmlsZTogICAgICAgICAgICAgICAgICAgICdBbiBlcnJvciBoYXMgb2NjdXJyZWQgd2hpbGUgcmVhZGluZyB0aGUgY29uZmlndXJhdGlvbiBmaWxlLicsXG4gICAgY2Fubm90UGFyc2VDb25maWdGaWxlOiAgICAgICAgICAgICAgICAgICBcIkZhaWxlZCB0byBwYXJzZSB0aGUgJ3twYXRofScgZmlsZS5cXG5cXG5UaGlzIGZpbGUgaXMgbm90IGEgd2VsbC1mb3JtZWQgSlNPTiBmaWxlLlwiLFxuICAgIGNvbmZpZ09wdGlvbnNXZXJlT3ZlcnJpZGVuOiAgICAgICAgICAgICAgJ1RoZSB7b3B0aW9uc1N0cmluZ30gb3B0aW9ue3N1ZmZpeH0gZnJvbSB0aGUgY29uZmlndXJhdGlvbiBmaWxlIHdpbGwgYmUgaWdub3JlZC4nLFxuICAgIGNhbm5vdE92ZXJyaWRlVHlwZVNjcmlwdENvbmZpZ09wdGlvbnM6ICAgJ1lvdSBjYW5ub3Qgb3ZlcnJpZGUgdGhlIFwie29wdGlvbk5hbWV9XCIgY29tcGlsZXIgb3B0aW9uIGluIHRoZSBUeXBlU2NyaXB0IGNvbmZpZ3VyYXRpb24gZmlsZS4nLFxuXG4gICAgY2Fubm90RmluZFNTTENlcnRGaWxlOiAnVW5hYmxlIHRvIGZpbmQgdGhlIFwie3BhdGh9XCIgZmlsZSwgc3BlY2lmaWVkIGJ5IHRoZSBcIntvcHRpb259XCIgc3NsIG9wdGlvbi4gRXJyb3IgZGV0YWlsczpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICd7ZXJyfScsXG5cbiAgICBjYW5ub3RGaW5kQ29uZmlndXJhdGlvbkZpbGU6ICdVbmFibGUgdG8gZmluZCB0aGUgXCJ7cGF0aH1cIiBjb25maWd1cmF0aW9uIGZpbGUuIEVycm9yIGRldGFpbHM6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAne2Vycn0nLFxuXG4gICAgcHJvYmxlbWF0aWNQYXRoUGF0dGVyblBsYWNlaG9sZGVyRm9yVmlkZW9SZWNvcmRpbmc6ICdUaGUge3BsYWNlaG9sZGVyTGlzdH0gcGF0aCBwYXR0ZXJuIHBsYWNlaG9sZGVye3N1ZmZpeH0gY2Fubm90IGJlIGFwcGxpZWQgdG8gdGhlIHJlY29yZGVkIHZpZGVvLlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdUaGUgcGxhY2Vob2xkZXJ7c3VmZml4fSB7dmVyYn0gcmVwbGFjZWQgd2l0aCBhbiBlbXB0eSBzdHJpbmcuJyxcblxuICAgIGNsaWVudFNjcmlwdHNXaXRoRW1wdHlDb250ZW50OiAgICAgICdUaGUgY2xpZW50IHNjcmlwdCB5b3UgdHJpZWQgdG8gaW5qZWN0IGlzIGVtcHR5LicsXG4gICAgY2xpZW50U2NyaXB0c1dpdGhEdXBsaWNhdGVkQ29udGVudDogJ1lvdSBpbmplY3RlZCB0aGUgZm9sbG93aW5nIGNsaWVudCBzY3JpcHR7c3VmZml4fSBzZXZlcmFsIHRpbWVzOlxcbiB7ZHVwbGljYXRlZFNjcmlwdHN9JyxcbiAgICBhc3NlcnRlZFNlbGVjdG9ySW5zdGFuY2U6ICAgICAgICAgICAnWW91IHBhc3NlZCBhIFNlbGVjdG9yIG9iamVjdCB0byBcXCd0LmV4cGVjdCgpXFwnLlxcbklmIHlvdSB3YW50IHRvIGNoZWNrIHRoYXQgYSBtYXRjaGVkIGVsZW1lbnQgZXhpc3RzLCBwYXNzIHRoZSBcXCdzZWxlY3Rvci5leGlzdHNcXCcgdmFsdWUgaW5zdGVhZC4nLFxuICAgIGFzc2VydGVkQ2xpZW50RnVuY3Rpb25JbnN0YW5jZTogICAgICdZb3UgcGFzc2VkIGEgQ2xpZW50RnVuY3Rpb24gb2JqZWN0IHRvIFxcJ3QuZXhwZWN0KClcXCcuXFxuSWYgeW91IHdhbnQgdG8gY2hlY2sgdGhlIGZ1bmN0aW9uXFwncyByZXR1cm4gdmFsdWUsIGNhbGwgdGhlIGNsaWVudCBmdW5jdGlvbiAoXFwnY2xpZW50RnVuY3Rpb24oKVxcJykgaW5zdGVhZC4nXG59O1xuXG4iXX0=