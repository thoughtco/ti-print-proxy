"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnonymousRole = exports.createRole = void 0;
const events_1 = require("events");
const nanoid_1 = __importDefault(require("nanoid"));
const phase_1 = __importDefault(require("./phase"));
const type_assertions_1 = require("../errors/runtime/type-assertions");
const wrap_test_function_1 = __importDefault(require("../api/wrap-test-function"));
const test_page_url_1 = require("../api/test-page-url");
const marker_symbol_1 = __importDefault(require("./marker-symbol"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
class Role extends events_1.EventEmitter {
    constructor(loginPage, initFn, options = {}) {
        super();
        this[marker_symbol_1.default] = true;
        this.id = nanoid_1.default(7);
        this.phase = loginPage ? phase_1.default.uninitialized : phase_1.default.initialized;
        this.loginPage = loginPage;
        this.initFn = initFn;
        this.opts = options;
        this.url = null;
        this.stateSnapshot = testcafe_hammerhead_1.StateSnapshot.empty();
        this.initErr = null;
    }
    async _storeStateSnapshot(testRun) {
        if (this.initErr)
            return;
        this.stateSnapshot = await testRun.getStateSnapshot();
    }
    async _executeInitFn(testRun) {
        try {
            let fn = () => this.initFn(testRun);
            fn = testRun.decoratePreventEmitActionEvents(fn, { prevent: false });
            fn = testRun.decorateDisableDebugBreakpoints(fn, { disable: false });
            await fn();
        }
        catch (err) {
            this.initErr = err;
        }
    }
    async initialize(testRun) {
        this.phase = phase_1.default.pendingInitialization;
        await testRun.switchToCleanRun(this.loginPage);
        await this._executeInitFn(testRun);
        await this._storeStateSnapshot(testRun);
        if (this.opts.preserveUrl)
            this.url = await testRun.getCurrentUrl();
        this.phase = phase_1.default.initialized;
        this.emit('initialized');
    }
}
function createRole(loginPage, initFn, options = {}) {
    type_assertions_1.assertType(type_assertions_1.is.string, 'Role', '"loginPage" argument', loginPage);
    type_assertions_1.assertType(type_assertions_1.is.function, 'Role', '"initFn" argument', initFn);
    type_assertions_1.assertType(type_assertions_1.is.nonNullObject, 'Role', '"options" argument', options);
    if (options.preserveUrl !== void 0)
        type_assertions_1.assertType(type_assertions_1.is.boolean, 'Role', '"preserveUrl" option', options.preserveUrl);
    loginPage = test_page_url_1.resolvePageUrl(loginPage);
    initFn = wrap_test_function_1.default(initFn);
    return new Role(loginPage, initFn, options);
}
exports.createRole = createRole;
function createAnonymousRole() {
    return new Role(null, null);
}
exports.createAnonymousRole = createAnonymousRole;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcm9sZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtQ0FBc0M7QUFDdEMsb0RBQTRCO0FBQzVCLG9EQUE0QjtBQUM1Qix1RUFBbUU7QUFDbkUsbUZBQXlEO0FBQ3pELHdEQUFzRDtBQUN0RCxvRUFBeUM7QUFDekMsNkRBQW9EO0FBRXBELE1BQU0sSUFBSyxTQUFRLHFCQUFZO0lBQzNCLFlBQWEsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEdBQUcsRUFBRTtRQUN4QyxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyx1QkFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXhCLElBQUksQ0FBQyxFQUFFLEdBQU0sZ0JBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsZUFBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsZUFBSyxDQUFDLFdBQVcsQ0FBQztRQUVqRSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFNLE1BQU0sQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFRLE9BQU8sQ0FBQztRQUV6QixJQUFJLENBQUMsR0FBRyxHQUFhLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLG1DQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBUyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVELEtBQUssQ0FBQyxtQkFBbUIsQ0FBRSxPQUFPO1FBQzlCLElBQUksSUFBSSxDQUFDLE9BQU87WUFDWixPQUFPO1FBRVgsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCxLQUFLLENBQUMsY0FBYyxDQUFFLE9BQU87UUFDekIsSUFBSTtZQUNBLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFcEMsRUFBRSxHQUFHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNyRSxFQUFFLEdBQUcsT0FBTyxDQUFDLCtCQUErQixDQUFDLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBRXJFLE1BQU0sRUFBRSxFQUFFLENBQUM7U0FDZDtRQUNELE9BQU8sR0FBRyxFQUFFO1lBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBRSxPQUFPO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBSyxDQUFDLHFCQUFxQixDQUFDO1FBRXpDLE1BQU0sT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUvQyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVc7WUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU3QyxJQUFJLENBQUMsS0FBSyxHQUFHLGVBQUssQ0FBQyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0o7QUFFRCxTQUFnQixVQUFVLENBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEdBQUcsRUFBRTtJQUN2RCw0QkFBVSxDQUFDLG9CQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRSw0QkFBVSxDQUFDLG9CQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3RCw0QkFBVSxDQUFDLG9CQUFFLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVwRSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssS0FBSyxDQUFDO1FBQzlCLDRCQUFVLENBQUMsb0JBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLHNCQUFzQixFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUVoRixTQUFTLEdBQUcsOEJBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QyxNQUFNLEdBQU0sNEJBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFckMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFaRCxnQ0FZQztBQUVELFNBQWdCLG1CQUFtQjtJQUMvQixPQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRkQsa0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IG5hbm9pZCBmcm9tICduYW5vaWQnO1xuaW1wb3J0IFBIQVNFIGZyb20gJy4vcGhhc2UnO1xuaW1wb3J0IHsgYXNzZXJ0VHlwZSwgaXMgfSBmcm9tICcuLi9lcnJvcnMvcnVudGltZS90eXBlLWFzc2VydGlvbnMnO1xuaW1wb3J0IHdyYXBUZXN0RnVuY3Rpb24gZnJvbSAnLi4vYXBpL3dyYXAtdGVzdC1mdW5jdGlvbic7XG5pbXBvcnQgeyByZXNvbHZlUGFnZVVybCB9IGZyb20gJy4uL2FwaS90ZXN0LXBhZ2UtdXJsJztcbmltcG9ydCByb2xlTWFya2VyIGZyb20gJy4vbWFya2VyLXN5bWJvbCc7XG5pbXBvcnQgeyBTdGF0ZVNuYXBzaG90IH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5cbmNsYXNzIFJvbGUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yIChsb2dpblBhZ2UsIGluaXRGbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpc1tyb2xlTWFya2VyXSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5pZCAgICA9IG5hbm9pZCg3KTtcbiAgICAgICAgdGhpcy5waGFzZSA9IGxvZ2luUGFnZSA/IFBIQVNFLnVuaW5pdGlhbGl6ZWQgOiBQSEFTRS5pbml0aWFsaXplZDtcblxuICAgICAgICB0aGlzLmxvZ2luUGFnZSA9IGxvZ2luUGFnZTtcbiAgICAgICAgdGhpcy5pbml0Rm4gICAgPSBpbml0Rm47XG4gICAgICAgIHRoaXMub3B0cyAgICAgID0gb3B0aW9ucztcblxuICAgICAgICB0aGlzLnVybCAgICAgICAgICAgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlU25hcHNob3QgPSBTdGF0ZVNuYXBzaG90LmVtcHR5KCk7XG4gICAgICAgIHRoaXMuaW5pdEVyciAgICAgICA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgX3N0b3JlU3RhdGVTbmFwc2hvdCAodGVzdFJ1bikge1xuICAgICAgICBpZiAodGhpcy5pbml0RXJyKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuc3RhdGVTbmFwc2hvdCA9IGF3YWl0IHRlc3RSdW4uZ2V0U3RhdGVTbmFwc2hvdCgpO1xuICAgIH1cblxuICAgIGFzeW5jIF9leGVjdXRlSW5pdEZuICh0ZXN0UnVuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgZm4gPSAoKSA9PiB0aGlzLmluaXRGbih0ZXN0UnVuKTtcblxuICAgICAgICAgICAgZm4gPSB0ZXN0UnVuLmRlY29yYXRlUHJldmVudEVtaXRBY3Rpb25FdmVudHMoZm4sIHsgcHJldmVudDogZmFsc2UgfSk7XG4gICAgICAgICAgICBmbiA9IHRlc3RSdW4uZGVjb3JhdGVEaXNhYmxlRGVidWdCcmVha3BvaW50cyhmbiwgeyBkaXNhYmxlOiBmYWxzZSB9KTtcblxuICAgICAgICAgICAgYXdhaXQgZm4oKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRFcnIgPSBlcnI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBpbml0aWFsaXplICh0ZXN0UnVuKSB7XG4gICAgICAgIHRoaXMucGhhc2UgPSBQSEFTRS5wZW5kaW5nSW5pdGlhbGl6YXRpb247XG5cbiAgICAgICAgYXdhaXQgdGVzdFJ1bi5zd2l0Y2hUb0NsZWFuUnVuKHRoaXMubG9naW5QYWdlKTtcblxuICAgICAgICBhd2FpdCB0aGlzLl9leGVjdXRlSW5pdEZuKHRlc3RSdW4pO1xuICAgICAgICBhd2FpdCB0aGlzLl9zdG9yZVN0YXRlU25hcHNob3QodGVzdFJ1bik7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0cy5wcmVzZXJ2ZVVybClcbiAgICAgICAgICAgIHRoaXMudXJsID0gYXdhaXQgdGVzdFJ1bi5nZXRDdXJyZW50VXJsKCk7XG5cbiAgICAgICAgdGhpcy5waGFzZSA9IFBIQVNFLmluaXRpYWxpemVkO1xuICAgICAgICB0aGlzLmVtaXQoJ2luaXRpYWxpemVkJyk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUm9sZSAobG9naW5QYWdlLCBpbml0Rm4sIG9wdGlvbnMgPSB7fSkge1xuICAgIGFzc2VydFR5cGUoaXMuc3RyaW5nLCAnUm9sZScsICdcImxvZ2luUGFnZVwiIGFyZ3VtZW50JywgbG9naW5QYWdlKTtcbiAgICBhc3NlcnRUeXBlKGlzLmZ1bmN0aW9uLCAnUm9sZScsICdcImluaXRGblwiIGFyZ3VtZW50JywgaW5pdEZuKTtcbiAgICBhc3NlcnRUeXBlKGlzLm5vbk51bGxPYmplY3QsICdSb2xlJywgJ1wib3B0aW9uc1wiIGFyZ3VtZW50Jywgb3B0aW9ucyk7XG5cbiAgICBpZiAob3B0aW9ucy5wcmVzZXJ2ZVVybCAhPT0gdm9pZCAwKVxuICAgICAgICBhc3NlcnRUeXBlKGlzLmJvb2xlYW4sICdSb2xlJywgJ1wicHJlc2VydmVVcmxcIiBvcHRpb24nLCBvcHRpb25zLnByZXNlcnZlVXJsKTtcblxuICAgIGxvZ2luUGFnZSA9IHJlc29sdmVQYWdlVXJsKGxvZ2luUGFnZSk7XG4gICAgaW5pdEZuICAgID0gd3JhcFRlc3RGdW5jdGlvbihpbml0Rm4pO1xuXG4gICAgcmV0dXJuIG5ldyBSb2xlKGxvZ2luUGFnZSwgaW5pdEZuLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFub255bW91c1JvbGUgKCkge1xuICAgIHJldHVybiBuZXcgUm9sZShudWxsLCBudWxsKTtcbn1cbiJdfQ==