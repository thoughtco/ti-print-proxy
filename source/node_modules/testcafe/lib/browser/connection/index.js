"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const mustache_1 = __importDefault(require("mustache"));
const lodash_1 = require("lodash");
const parse_user_agent_1 = __importDefault(require("../../utils/parse-user-agent"));
const read_file_relative_1 = require("read-file-relative");
const promisify_event_1 = __importDefault(require("promisify-event"));
const nanoid_1 = __importDefault(require("nanoid"));
const command_1 = __importDefault(require("./command"));
const status_1 = __importDefault(require("./status"));
const heartbeat_status_1 = __importDefault(require("./heartbeat-status"));
const runtime_1 = require("../../errors/runtime");
const types_1 = require("../../errors/types");
const browser_connection_timeouts_1 = require("../../utils/browser-connection-timeouts");
const IDLE_PAGE_TEMPLATE = read_file_relative_1.readSync('../../client/browser/idle-page/index.html.mustache');
const connections = {};
class BrowserConnection extends events_1.EventEmitter {
    constructor(gateway, browserInfo, permanent, allowMultipleWindows = false) {
        super();
        this.HEARTBEAT_TIMEOUT = browser_connection_timeouts_1.HEARTBEAT_TIMEOUT;
        this.BROWSER_RESTART_TIMEOUT = browser_connection_timeouts_1.BROWSER_RESTART_TIMEOUT;
        this.id = BrowserConnection._generateId();
        this.jobQueue = [];
        this.initScriptsQueue = [];
        this.browserConnectionGateway = gateway;
        this.disconnectionPromise = null;
        this.testRunAborted = false;
        this.browserInfo = browserInfo;
        this.browserInfo.userAgentProviderMetaInfo = '';
        this.provider = browserInfo.provider;
        this.permanent = permanent;
        this.status = status_1.default.uninitialized;
        this.idle = true;
        this.heartbeatTimeout = null;
        this.pendingTestRunUrl = null;
        this.allowMultipleWindows = allowMultipleWindows;
        this.url = `${gateway.domain}/browser/connect/${this.id}`;
        this.idleUrl = `${gateway.domain}/browser/idle/${this.id}`;
        this.forcedIdleUrl = `${gateway.domain}/browser/idle-forced/${this.id}`;
        this.initScriptUrl = `${gateway.domain}/browser/init-script/${this.id}`;
        this.heartbeatRelativeUrl = `/browser/heartbeat/${this.id}`;
        this.statusRelativeUrl = `/browser/status/${this.id}`;
        this.statusDoneRelativeUrl = `/browser/status-done/${this.id}`;
        this.activeWindowIdUrl = `/browser/active-window-id/${this.id}`;
        this.heartbeatUrl = `${gateway.domain}${this.heartbeatRelativeUrl}`;
        this.statusUrl = `${gateway.domain}${this.statusRelativeUrl}`;
        this.statusDoneUrl = `${gateway.domain}${this.statusDoneRelativeUrl}`;
        this.on('error', () => {
            this._forceIdle();
            this.close();
        });
        connections[this.id] = this;
        this.browserConnectionGateway.startServingConnection(this);
        process.nextTick(() => this._runBrowser());
    }
    static _generateId() {
        return nanoid_1.default(7);
    }
    async _runBrowser() {
        try {
            await this.provider.openBrowser(this.id, this.url, this.browserInfo.browserName, this.allowMultipleWindows);
            if (this.status !== status_1.default.ready)
                await promisify_event_1.default(this, 'ready');
            this.status = status_1.default.opened;
            this.emit('opened');
        }
        catch (err) {
            this.emit('error', new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.unableToOpenBrowser, this.browserInfo.providerName + ':' + this.browserInfo.browserName, err.stack));
        }
    }
    async _closeBrowser() {
        if (!this.idle)
            await promisify_event_1.default(this, 'idle');
        try {
            await this.provider.closeBrowser(this.id);
        }
        catch (err) {
            // NOTE: A warning would be really nice here, but it can't be done while log is stored in a task.
        }
    }
    _forceIdle() {
        if (!this.idle) {
            this.idle = true;
            this.emit('idle');
        }
    }
    _createBrowserDisconnectedError() {
        return new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.browserDisconnected, this.userAgent);
    }
    _waitForHeartbeat() {
        this.heartbeatTimeout = setTimeout(() => {
            const err = this._createBrowserDisconnectedError();
            this.status = status_1.default.disconnected;
            this.testRunAborted = true;
            this.emit('disconnected', err);
            this._restartBrowserOnDisconnect(err);
        }, this.HEARTBEAT_TIMEOUT);
    }
    async _getTestRunUrl(needPopNext) {
        if (needPopNext || !this.pendingTestRunUrl)
            this.pendingTestRunUrl = await this._popNextTestRunUrl();
        return this.pendingTestRunUrl;
    }
    async _popNextTestRunUrl() {
        while (this.hasQueuedJobs && !this.currentJob.hasQueuedTestRuns)
            this.jobQueue.shift();
        return this.hasQueuedJobs ? await this.currentJob.popNextTestRunUrl(this) : null;
    }
    static getById(id) {
        return connections[id] || null;
    }
    async _restartBrowser() {
        this.status = status_1.default.uninitialized;
        this._forceIdle();
        let resolveTimeout = null;
        let isTimeoutExpired = false;
        let timeout = null;
        const restartPromise = this._closeBrowser()
            .then(() => this._runBrowser());
        const timeoutPromise = new Promise(resolve => {
            resolveTimeout = resolve;
            timeout = setTimeout(() => {
                isTimeoutExpired = true;
                resolve();
            }, this.BROWSER_RESTART_TIMEOUT);
        });
        Promise.race([restartPromise, timeoutPromise])
            .then(() => {
            clearTimeout(timeout);
            if (isTimeoutExpired)
                this.emit('error', this._createBrowserDisconnectedError());
            else
                resolveTimeout();
        });
    }
    _restartBrowserOnDisconnect(err) {
        let resolveFn = null;
        let rejectFn = null;
        this.disconnectionPromise = new Promise((resolve, reject) => {
            resolveFn = resolve;
            rejectFn = () => {
                reject(err);
            };
            setTimeout(() => {
                rejectFn();
            });
        })
            .then(() => {
            return this._restartBrowser();
        })
            .catch(e => {
            this.emit('error', e);
        });
        this.disconnectionPromise.resolve = resolveFn;
        this.disconnectionPromise.reject = rejectFn;
    }
    async processDisconnection(disconnectionThresholdExceedeed) {
        const { resolve, reject } = this.disconnectionPromise;
        if (disconnectionThresholdExceedeed)
            reject();
        else
            resolve();
    }
    addWarning(...args) {
        if (this.currentJob)
            this.currentJob.warningLog.addWarning(...args);
    }
    setProviderMetaInfo(str) {
        this.browserInfo.userAgentProviderMetaInfo = str;
    }
    get userAgent() {
        let userAgent = this.browserInfo.parsedUserAgent.prettyUserAgent;
        if (this.browserInfo.userAgentProviderMetaInfo)
            userAgent += ` (${this.browserInfo.userAgentProviderMetaInfo})`;
        return userAgent;
    }
    get hasQueuedJobs() {
        return !!this.jobQueue.length;
    }
    get currentJob() {
        return this.jobQueue[0];
    }
    // API
    runInitScript(code) {
        return new Promise(resolve => this.initScriptsQueue.push({ code, resolve }));
    }
    addJob(job) {
        this.jobQueue.push(job);
    }
    removeJob(job) {
        lodash_1.pull(this.jobQueue, job);
    }
    close() {
        if (this.status === status_1.default.closing || this.status === status_1.default.closed)
            return;
        this.status = status_1.default.closing;
        this._closeBrowser()
            .then(() => {
            this.browserConnectionGateway.stopServingConnection(this);
            clearTimeout(this.heartbeatTimeout);
            delete connections[this.id];
            this.status = status_1.default.closed;
            this.emit('closed');
        });
    }
    establish(userAgent) {
        this.status = status_1.default.ready;
        this.browserInfo.parsedUserAgent = parse_user_agent_1.default(userAgent);
        this._waitForHeartbeat();
        this.emit('ready');
    }
    heartbeat() {
        clearTimeout(this.heartbeatTimeout);
        this._waitForHeartbeat();
        return {
            code: this.status === status_1.default.closing ? heartbeat_status_1.default.closing : heartbeat_status_1.default.ok,
            url: this.status === status_1.default.closing ? this.idleUrl : ''
        };
    }
    renderIdlePage() {
        return mustache_1.default.render(IDLE_PAGE_TEMPLATE, {
            userAgent: this.userAgent,
            statusUrl: this.statusUrl,
            heartbeatUrl: this.heartbeatUrl,
            initScriptUrl: this.initScriptUrl,
            retryTestPages: !!this.browserConnectionGateway.retryTestPages
        });
    }
    getInitScript() {
        const initScriptPromise = this.initScriptsQueue[0];
        return { code: initScriptPromise ? initScriptPromise.code : null };
    }
    handleInitScriptResult(data) {
        const initScriptPromise = this.initScriptsQueue.shift();
        if (initScriptPromise)
            initScriptPromise.resolve(JSON.parse(data));
    }
    isHeadlessBrowser() {
        return this.provider.isHeadlessBrowser(this.id);
    }
    async reportJobResult(status, data) {
        await this.provider.reportJobResult(this.id, status, data);
    }
    async getStatus(isTestDone) {
        if (!this.idle && !isTestDone) {
            this.idle = true;
            this.emit('idle');
        }
        if (this.status === status_1.default.opened) {
            const testRunUrl = await this._getTestRunUrl(isTestDone || this.testRunAborted);
            this.testRunAborted = false;
            if (testRunUrl) {
                this.idle = false;
                return { cmd: command_1.default.run, url: testRunUrl };
            }
        }
        return { cmd: command_1.default.idle, url: this.idleUrl };
    }
    get activeWindowId() {
        return this.provider.getActiveWindowId(this.id);
    }
    set activeWindowId(val) {
        this.provider.setActiveWindowId(this.id, val);
    }
    async canUseDefaultWindowActions() {
        return this.provider.canUseDefaultWindowActions(this.id);
    }
    isReady() {
        return this.status === status_1.default.ready ||
            this.status === status_1.default.opened ||
            this.status === status_1.default.closing;
    }
}
exports.default = BrowserConnection;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,