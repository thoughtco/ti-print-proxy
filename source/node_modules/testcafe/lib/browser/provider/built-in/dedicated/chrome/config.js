"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const device_specs_1 = require("device-specs");
const lodash_1 = require("lodash");
const argument_parsing_1 = require("../../../utils/argument-parsing");
const HEADLESS_DEFAULT_WIDTH = 1280;
const HEADLESS_DEFAULT_HEIGHT = 800;
const AVAILABLE_MODES = ['userProfile', 'headless', 'emulation'];
const configCache = {};
function parseUserArgs(userArgs) {
    const parsedArgs = {
        headless: false,
        userDataDir: false,
        windowSize: false
    };
    const splittedArgs = userArgs.split(' ').filter(arg => !!arg);
    splittedArgs.forEach(arg => {
        const keyValuePair = arg.split('=');
        const key = lodash_1.camelCase(keyValuePair[0]);
        parsedArgs[key] = parsedArgs[key] !== void 0;
    });
    return parsedArgs;
}
function parseModes(modesStr, userArgs) {
    const parsed = argument_parsing_1.splitEscaped(modesStr, ':');
    const path = argument_parsing_1.getPathFromParsedModes(parsed, AVAILABLE_MODES);
    const detectedModes = argument_parsing_1.getModes(parsed, AVAILABLE_MODES);
    let optionsString = '';
    if (parsed.length)
        optionsString = parsed.shift();
    while (parsed.length)
        optionsString += ':' + parsed.shift();
    const userProfile = detectedModes.userProfile || userArgs.userDataDir;
    const headless = detectedModes.headless || userArgs.headless;
    const emulation = detectedModes.emulation || headless;
    const modes = {
        path,
        userProfile,
        headless,
        emulation
    };
    return { modes, optionsString };
}
function simplifyDeviceName(deviceName) {
    return deviceName.replace(/\s/g, '').toLowerCase();
}
function findDevice(deviceName) {
    const simpleName = simplifyDeviceName(deviceName);
    return device_specs_1.emulatedDevices.filter(device => simplifyDeviceName(device.title).indexOf(simpleName) >= 0)[0];
}
function getDeviceBasedOptions(deviceName, orientation) {
    if (!deviceName)
        return {};
    const deviceData = findDevice(deviceName);
    if (!deviceData)
        return {};
    const mobile = deviceData.capabilities.indexOf('mobile') >= 0;
    if (!orientation)
        orientation = mobile ? 'vertical' : 'horizontal';
    return {
        deviceName: deviceData.title,
        mobile: mobile,
        orientation: orientation,
        touch: deviceData.capabilities.indexOf('touch') >= 0,
        width: deviceData.screen[orientation].width,
        height: deviceData.screen[orientation].height,
        scaleFactor: deviceData.screen['device-pixel-ratio'],
        userAgent: deviceData['user-agent'],
    };
}
function parseOptions(str, useDefaultDimensions) {
    const parsed = argument_parsing_1.splitEscaped(str, ';');
    const baseOptions = {
        width: useDefaultDimensions ? HEADLESS_DEFAULT_WIDTH : 0,
        height: useDefaultDimensions ? HEADLESS_DEFAULT_HEIGHT : 0,
        scaleFactor: 0,
        mobile: false,
        cdpPort: argument_parsing_1.findMatch(parsed, /^cdpPort=(.*)/)
    };
    const deviceName = argument_parsing_1.findMatch(parsed, /^device=(.*)/);
    const orientation = argument_parsing_1.findMatch(parsed, /^orientation=(.*)/);
    const deviceBasedOptions = getDeviceBasedOptions(deviceName, orientation);
    let specifiedDeviceOptions = {
        orientation: orientation,
        touch: argument_parsing_1.hasMatch(parsed, /^touch=/) ? argument_parsing_1.isMatchTrue(parsed, /^touch=(.*)/) : void 0,
        mobile: argument_parsing_1.isMatchTrue(parsed, /^mobile=(.*)/),
        width: Number(argument_parsing_1.findMatch(parsed, /^width=(.*)/) || NaN),
        height: Number(argument_parsing_1.findMatch(parsed, /^height=(.*)/) || NaN),
        scaleFactor: Number(argument_parsing_1.findMatch(parsed, /^scaleFactor=(.*)/) || NaN),
        userAgent: argument_parsing_1.findMatch(parsed, /^userAgent=(.*)/)
    };
    specifiedDeviceOptions = lodash_1.pickBy(specifiedDeviceOptions, optionValue => {
        return optionValue !== void 0 && optionValue !== '' && !Number.isNaN(optionValue);
    });
    return Object.assign(baseOptions, deviceBasedOptions, specifiedDeviceOptions);
}
function getNewConfig(configString) {
    const { userArgs, modesString } = argument_parsing_1.parseConfig(configString);
    const parsedUserArgs = parseUserArgs(userArgs);
    const { modes, optionsString } = parseModes(modesString, parsedUserArgs);
    const useDefaultDimensions = modes.headless && !parsedUserArgs.windowSize;
    const options = parseOptions(optionsString, useDefaultDimensions);
    return Object.assign({ userArgs }, modes, options);
}
function default_1(configString) {
    if (!configCache[configString])
        configCache[configString] = getNewConfig(configString);
    return configCache[configString];
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,