"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_family_1 = __importDefault(require("os-family"));
const url_1 = require("url");
const base_1 = __importDefault(require("../base"));
const runtime_info_1 = __importDefault(require("./runtime-info"));
const config_1 = __importDefault(require("./config"));
const local_chrome_1 = require("./local-chrome");
const cdp = __importStar(require("./cdp"));
const client_functions_1 = require("../../../utils/client-functions");
const MIN_AVAILABLE_DIMENSION = 50;
exports.default = Object.assign(Object.assign({}, base_1.default), { _getConfig(name) {
        return config_1.default(name);
    },
    _getBrowserProtocolClient() {
        return cdp;
    },
    async _createRunTimeInfo(hostName, configString, allowMultipleWindows) {
        return runtime_info_1.default.create(hostName, configString, allowMultipleWindows);
    },
    async openBrowser(browserId, pageUrl, configString, allowMultipleWindows) {
        const parsedPageUrl = url_1.parse(pageUrl);
        const runtimeInfo = await this._createRunTimeInfo(parsedPageUrl.hostname, configString, allowMultipleWindows);
        runtimeInfo.browserName = this._getBrowserName();
        runtimeInfo.browserId = browserId;
        runtimeInfo.providerMethods = {
            resizeLocalBrowserWindow: (...args) => this.resizeLocalBrowserWindow(...args)
        };
        await local_chrome_1.start(pageUrl, runtimeInfo);
        await this.waitForConnectionReady(browserId);
        runtimeInfo.viewportSize = await this.runInitScript(browserId, client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);
        runtimeInfo.activeWindowId = null;
        if (allowMultipleWindows)
            runtimeInfo.activeWindowId = this.calculateWindowId();
        await cdp.createClient(runtimeInfo);
        this.openedBrowsers[browserId] = runtimeInfo;
        await this._ensureWindowIsExpanded(browserId, runtimeInfo.viewportSize);
    },
    async closeBrowser(browserId) {
        const runtimeInfo = this.openedBrowsers[browserId];
        if (cdp.isHeadlessTab(runtimeInfo))
            await cdp.closeTab(runtimeInfo);
        else
            await this.closeLocalBrowser(browserId);
        if (os_family_1.default.mac || runtimeInfo.config.headless)
            await local_chrome_1.stop(runtimeInfo);
        if (runtimeInfo.tempProfileDir)
            await runtimeInfo.tempProfileDir.dispose();
        delete this.openedBrowsers[browserId];
    },
    async resizeWindow(browserId, width, height, currentWidth, currentHeight) {
        const runtimeInfo = this.openedBrowsers[browserId];
        if (runtimeInfo.config.mobile)
            await cdp.updateMobileViewportSize(runtimeInfo);
        else {
            runtimeInfo.viewportSize.width = currentWidth;
            runtimeInfo.viewportSize.height = currentHeight;
        }
        await cdp.resizeWindow({ width, height }, runtimeInfo);
    },
    async getVideoFrameData(browserId) {
        return await cdp.getScreenshotData(this.openedBrowsers[browserId]);
    },
    async hasCustomActionForBrowser(browserId) {
        const { config, client } = this.openedBrowsers[browserId];
        return {
            hasCloseBrowser: true,
            hasResizeWindow: !!client && (config.emulation || config.headless),
            hasMaximizeWindow: !!client && config.headless,
            hasTakeScreenshot: !!client,
            hasChromelessScreenshots: !!client,
            hasGetVideoFrameData: !!client,
            hasCanResizeWindowToDimensions: false
        };
    },
    async _ensureWindowIsExpanded(browserId, { height, width, availableHeight, availableWidth, outerWidth, outerHeight }) {
        if (height < MIN_AVAILABLE_DIMENSION || width < MIN_AVAILABLE_DIMENSION) {
            const newHeight = Math.max(availableHeight, MIN_AVAILABLE_DIMENSION);
            const newWidth = Math.max(Math.floor(availableWidth / 2), MIN_AVAILABLE_DIMENSION);
            await this.resizeWindow(browserId, newWidth, newHeight, outerWidth, outerHeight);
        }
    } });
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,