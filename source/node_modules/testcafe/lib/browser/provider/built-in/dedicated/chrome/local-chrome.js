"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.start = void 0;
const testcafe_browser_tools_1 = __importDefault(require("testcafe-browser-tools"));
const process_1 = require("../../../../../utils/process");
const browser_starter_1 = __importDefault(require("../../../utils/browser-starter"));
const build_chrome_args_1 = require("./build-chrome-args");
const browserStarter = new browser_starter_1.default();
async function start(pageUrl, { browserName, config, cdpPort, tempProfileDir, inDocker }) {
    const chromeInfo = await testcafe_browser_tools_1.default.getBrowserInfo(config.path || browserName);
    const chromeOpenParameters = Object.assign({}, chromeInfo);
    chromeOpenParameters.cmd = build_chrome_args_1.buildChromeArgs({ config, cdpPort, platformArgs: chromeOpenParameters.cmd, tempProfileDir, inDocker });
    await browserStarter.startBrowser(chromeOpenParameters, pageUrl);
}
exports.start = start;
async function stop({ browserId }) {
    // NOTE: Chrome on Linux closes only after the second SIGTERM signall
    if (!await process_1.killBrowserProcess(browserId))
        await process_1.killBrowserProcess(browserId);
}
exports.stop = stop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtY2hyb21lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2Nocm9tZS9sb2NhbC1jaHJvbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0ZBQWtEO0FBQ2xELDBEQUFrRTtBQUNsRSxxRkFBNEQ7QUFDNUQsMkRBQXNEO0FBRXRELE1BQU0sY0FBYyxHQUFHLElBQUkseUJBQWMsRUFBRSxDQUFDO0FBRXJDLEtBQUssVUFBVSxLQUFLLENBQUUsT0FBTyxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRTtJQUM1RixNQUFNLFVBQVUsR0FBYSxNQUFNLGdDQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLENBQUM7SUFDM0YsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUUzRCxvQkFBb0IsQ0FBQyxHQUFHLEdBQUcsbUNBQWUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVsSSxNQUFNLGNBQWMsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQVBELHNCQU9DO0FBRU0sS0FBSyxVQUFVLElBQUksQ0FBRSxFQUFFLFNBQVMsRUFBRTtJQUNyQyxxRUFBcUU7SUFDckUsSUFBSSxDQUFDLE1BQU0sNEJBQWtCLENBQUMsU0FBUyxDQUFDO1FBQ3BDLE1BQU0sNEJBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUpELG9CQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJyb3dzZXJUb29scyBmcm9tICd0ZXN0Y2FmZS1icm93c2VyLXRvb2xzJztcbmltcG9ydCB7IGtpbGxCcm93c2VyUHJvY2VzcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3Byb2Nlc3MnO1xuaW1wb3J0IEJyb3dzZXJTdGFydGVyIGZyb20gJy4uLy4uLy4uL3V0aWxzL2Jyb3dzZXItc3RhcnRlcic7XG5pbXBvcnQgeyBidWlsZENocm9tZUFyZ3MgfSBmcm9tICcuL2J1aWxkLWNocm9tZS1hcmdzJztcblxuY29uc3QgYnJvd3NlclN0YXJ0ZXIgPSBuZXcgQnJvd3NlclN0YXJ0ZXIoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0IChwYWdlVXJsLCB7IGJyb3dzZXJOYW1lLCBjb25maWcsIGNkcFBvcnQsIHRlbXBQcm9maWxlRGlyLCBpbkRvY2tlciB9KSB7XG4gICAgY29uc3QgY2hyb21lSW5mbyAgICAgICAgICAgPSBhd2FpdCBicm93c2VyVG9vbHMuZ2V0QnJvd3NlckluZm8oY29uZmlnLnBhdGggfHwgYnJvd3Nlck5hbWUpO1xuICAgIGNvbnN0IGNocm9tZU9wZW5QYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbih7fSwgY2hyb21lSW5mbyk7XG5cbiAgICBjaHJvbWVPcGVuUGFyYW1ldGVycy5jbWQgPSBidWlsZENocm9tZUFyZ3MoeyBjb25maWcsIGNkcFBvcnQsIHBsYXRmb3JtQXJnczogY2hyb21lT3BlblBhcmFtZXRlcnMuY21kLCB0ZW1wUHJvZmlsZURpciwgaW5Eb2NrZXIgfSk7XG5cbiAgICBhd2FpdCBicm93c2VyU3RhcnRlci5zdGFydEJyb3dzZXIoY2hyb21lT3BlblBhcmFtZXRlcnMsIHBhZ2VVcmwpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RvcCAoeyBicm93c2VySWQgfSkge1xuICAgIC8vIE5PVEU6IENocm9tZSBvbiBMaW51eCBjbG9zZXMgb25seSBhZnRlciB0aGUgc2Vjb25kIFNJR1RFUk0gc2lnbmFsbFxuICAgIGlmICghYXdhaXQga2lsbEJyb3dzZXJQcm9jZXNzKGJyb3dzZXJJZCkpXG4gICAgICAgIGF3YWl0IGtpbGxCcm93c2VyUHJvY2Vzcyhicm93c2VySWQpO1xufVxuIl19