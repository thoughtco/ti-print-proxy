"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const type_1 = __importDefault(require("./type"));
function getFn(command) {
    switch (command.assertionType) {
        case type_1.default.eql:
            return () => chai_1.assert.deepEqual(command.actual, command.expected, command.message);
        case type_1.default.notEql:
            return () => chai_1.assert.notDeepEqual(command.actual, command.expected, command.message);
        case type_1.default.ok:
            return () => chai_1.assert.isOk(command.actual, command.message);
        case type_1.default.notOk:
            return () => chai_1.assert.isNotOk(command.actual, command.message);
        case type_1.default.contains:
            return () => chai_1.assert.include(command.actual, command.expected, command.message);
        case type_1.default.notContains:
            return () => chai_1.assert.notInclude(command.actual, command.expected, command.message);
        case type_1.default.typeOf:
            return () => chai_1.assert.typeOf(command.actual, command.expected, command.message);
        case type_1.default.notTypeOf:
            return () => chai_1.assert.notTypeOf(command.actual, command.expected, command.message);
        case type_1.default.gt:
            return () => chai_1.assert.isAbove(command.actual, command.expected, command.message);
        case type_1.default.gte:
            return () => chai_1.assert.isAtLeast(command.actual, command.expected, command.message);
        case type_1.default.lt:
            return () => chai_1.assert.isBelow(command.actual, command.expected, command.message);
        case type_1.default.lte:
            return () => chai_1.assert.isAtMost(command.actual, command.expected, command.message);
        case type_1.default.within:
            return () => chai_1.expect(command.actual).to.be.within(command.expected, command.expected2, command.message);
        case type_1.default.notWithin:
            return () => chai_1.expect(command.actual).not.to.be.within(command.expected, command.expected2, command.message);
        case type_1.default.match:
            return () => chai_1.assert.match(command.actual, command.expected, command.message);
        case type_1.default.notMatch:
            return () => chai_1.assert.notMatch(command.actual, command.expected, command.message);
        default:
            return () => void 0;
    }
}
exports.default = getFn;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Fzc2VydGlvbnMvZ2V0LWZuLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQXNDO0FBQ3RDLGtEQUFvQztBQUVwQyxTQUF3QixLQUFLLENBQUUsT0FBTztJQUNsQyxRQUFRLE9BQU8sQ0FBQyxhQUFhLEVBQUU7UUFDM0IsS0FBSyxjQUFjLENBQUMsR0FBRztZQUNuQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyRixLQUFLLGNBQWMsQ0FBQyxNQUFNO1lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhGLEtBQUssY0FBYyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlELEtBQUssY0FBYyxDQUFDLEtBQUs7WUFDckIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWpFLEtBQUssY0FBYyxDQUFDLFFBQVE7WUFDeEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkYsS0FBSyxjQUFjLENBQUMsV0FBVztZQUMzQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RixLQUFLLGNBQWMsQ0FBQyxNQUFNO1lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWxGLEtBQUssY0FBYyxDQUFDLFNBQVM7WUFDekIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckYsS0FBSyxjQUFjLENBQUMsRUFBRTtZQUNsQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuRixLQUFLLGNBQWMsQ0FBQyxHQUFHO1lBQ25CLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXJGLEtBQUssY0FBYyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkYsS0FBSyxjQUFjLENBQUMsR0FBRztZQUNuQixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwRixLQUFLLGNBQWMsQ0FBQyxNQUFNO1lBQ3RCLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTNHLEtBQUssY0FBYyxDQUFDLFNBQVM7WUFDekIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRS9HLEtBQUssY0FBYyxDQUFDLEtBQUs7WUFDckIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakYsS0FBSyxjQUFjLENBQUMsUUFBUTtZQUN4QixPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwRjtZQUNJLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0I7QUFDTCxDQUFDO0FBckRELHdCQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydCwgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgQVNTRVJUSU9OX1RZUEUgZnJvbSAnLi90eXBlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Rm4gKGNvbW1hbmQpIHtcbiAgICBzd2l0Y2ggKGNvbW1hbmQuYXNzZXJ0aW9uVHlwZSkge1xuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLmVxbDpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuZGVlcEVxdWFsKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubm90RXFsOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5ub3REZWVwRXF1YWwoY29tbWFuZC5hY3R1YWwsIGNvbW1hbmQuZXhwZWN0ZWQsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5vazpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuaXNPayhjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm5vdE9rOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5pc05vdE9rKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUuY29udGFpbnM6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmluY2x1ZGUoY29tbWFuZC5hY3R1YWwsIGNvbW1hbmQuZXhwZWN0ZWQsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ub3RDb250YWluczpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQubm90SW5jbHVkZShjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5leHBlY3RlZCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLnR5cGVPZjpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQudHlwZU9mKGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubm90VHlwZU9mOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5ub3RUeXBlT2YoY29tbWFuZC5hY3R1YWwsIGNvbW1hbmQuZXhwZWN0ZWQsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5ndDpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuaXNBYm92ZShjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5leHBlY3RlZCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLmd0ZTpcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBhc3NlcnQuaXNBdExlYXN0KGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubHQ6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmlzQmVsb3coY29tbWFuZC5hY3R1YWwsIGNvbW1hbmQuZXhwZWN0ZWQsIGNvbW1hbmQubWVzc2FnZSk7XG5cbiAgICAgICAgY2FzZSBBU1NFUlRJT05fVFlQRS5sdGU6XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gYXNzZXJ0LmlzQXRNb3N0KGNvbW1hbmQuYWN0dWFsLCBjb21tYW5kLmV4cGVjdGVkLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUud2l0aGluOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGV4cGVjdChjb21tYW5kLmFjdHVhbCkudG8uYmUud2l0aGluKGNvbW1hbmQuZXhwZWN0ZWQsIGNvbW1hbmQuZXhwZWN0ZWQyLCBjb21tYW5kLm1lc3NhZ2UpO1xuXG4gICAgICAgIGNhc2UgQVNTRVJUSU9OX1RZUEUubm90V2l0aGluOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGV4cGVjdChjb21tYW5kLmFjdHVhbCkubm90LnRvLmJlLndpdGhpbihjb21tYW5kLmV4cGVjdGVkLCBjb21tYW5kLmV4cGVjdGVkMiwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm1hdGNoOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5tYXRjaChjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5leHBlY3RlZCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBjYXNlIEFTU0VSVElPTl9UWVBFLm5vdE1hdGNoOlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGFzc2VydC5ub3RNYXRjaChjb21tYW5kLmFjdHVhbCwgY29tbWFuZC5leHBlY3RlZCwgY29tbWFuZC5tZXNzYWdlKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHZvaWQgMDtcbiAgICB9XG59XG4iXX0=