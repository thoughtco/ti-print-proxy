"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopHandlingTestErrors = exports.startHandlingTestErrors = exports.removeRunningTest = exports.addRunningTest = exports.registerErrorHandlers = void 0;
const test_run_1 = require("../errors/test-run");
const util_1 = __importDefault(require("util"));
const runningTests = {};
let handlingTestErrors = false;
function printErrorMessagesAndTerminate(...messages) {
    // eslint-disable-next-line no-console
    messages.map(msg => console.log(msg));
    // eslint-disable-next-line no-process-exit
    setTimeout(() => process.exit(1), 0);
}
function handleTestRunError(ErrorCtor, message) {
    Object.values(runningTests).forEach(testRun => {
        testRun.addError(new ErrorCtor(message));
        removeRunningTest(testRun);
    });
}
function handleError(ErrorCtor, message) {
    if (handlingTestErrors)
        handleTestRunError(ErrorCtor, message);
    else
        printErrorMessagesAndTerminate(message);
}
function formatUnhandledRejectionReason(reason) {
    const reasonType = typeof reason;
    const isPrimitiveType = reasonType !== 'object' && reasonType !== 'function';
    if (isPrimitiveType)
        return String(reason);
    if (reason instanceof Error)
        return reason.stack;
    return util_1.default.inspect(reason, { depth: 2, breakLength: Infinity });
}
function formatError(ErrorCtor, error) {
    if (ErrorCtor === test_run_1.UncaughtExceptionError)
        return error.stack;
    if (ErrorCtor === test_run_1.UnhandledPromiseRejectionError)
        return formatUnhandledRejectionReason(error);
    return error;
}
function handleUnexpectedError(ErrorCtor, error) {
    try {
        handleError(ErrorCtor, formatError(ErrorCtor, error));
    }
    catch (e) {
        printErrorMessagesAndTerminate(error, e);
    }
}
function registerErrorHandlers() {
    process.on('unhandledRejection', e => handleUnexpectedError(test_run_1.UnhandledPromiseRejectionError, e));
    process.on('uncaughtException', e => handleUnexpectedError(test_run_1.UncaughtExceptionError, e));
}
exports.registerErrorHandlers = registerErrorHandlers;
function addRunningTest(testRun) {
    runningTests[testRun.id] = testRun;
}
exports.addRunningTest = addRunningTest;
function removeRunningTest(testRun) {
    if (testRun)
        delete runningTests[testRun.id];
}
exports.removeRunningTest = removeRunningTest;
function startHandlingTestErrors() {
    handlingTestErrors = true;
}
exports.startHandlingTestErrors = startHandlingTestErrors;
function stopHandlingTestErrors() {
    handlingTestErrors = false;
}
exports.stopHandlingTestErrors = stopHandlingTestErrors;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLWVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYW5kbGUtZXJyb3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlEQUE0RjtBQUM1RixnREFBd0I7QUFFeEIsTUFBTSxZQUFZLEdBQU8sRUFBRSxDQUFDO0FBQzVCLElBQUksa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0FBRS9CLFNBQVMsOEJBQThCLENBQUUsR0FBRyxRQUFRO0lBQ2hELHNDQUFzQztJQUN0QyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXRDLDJDQUEyQztJQUMzQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBRSxTQUFTLEVBQUUsT0FBTztJQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMxQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFekMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUUsU0FBUyxFQUFFLE9BQU87SUFDcEMsSUFBSSxrQkFBa0I7UUFDbEIsa0JBQWtCLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDOztRQUV2Qyw4QkFBOEIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsU0FBUyw4QkFBOEIsQ0FBRSxNQUFNO0lBQzNDLE1BQU0sVUFBVSxHQUFRLE9BQU8sTUFBTSxDQUFDO0lBQ3RDLE1BQU0sZUFBZSxHQUFHLFVBQVUsS0FBSyxRQUFRLElBQUksVUFBVSxLQUFLLFVBQVUsQ0FBQztJQUU3RSxJQUFJLGVBQWU7UUFDZixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUxQixJQUFJLE1BQU0sWUFBWSxLQUFLO1FBQ3ZCLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztJQUV4QixPQUFPLGNBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUUsU0FBUyxFQUFFLEtBQUs7SUFDbEMsSUFBSSxTQUFTLEtBQUssaUNBQXNCO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQztJQUV2QixJQUFJLFNBQVMsS0FBSyx5Q0FBOEI7UUFDNUMsT0FBTyw4QkFBOEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVqRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBRSxTQUFTLEVBQUUsS0FBSztJQUM1QyxJQUFJO1FBQ0EsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFDRCxPQUFPLENBQUMsRUFBRTtRQUNOLDhCQUE4QixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM1QztBQUNMLENBQUM7QUFFRCxTQUFnQixxQkFBcUI7SUFDakMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLHlDQUE4QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLGlDQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0YsQ0FBQztBQUhELHNEQUdDO0FBRUQsU0FBZ0IsY0FBYyxDQUFFLE9BQU87SUFDbkMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDdkMsQ0FBQztBQUZELHdDQUVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUUsT0FBTztJQUN0QyxJQUFJLE9BQU87UUFDUCxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUhELDhDQUdDO0FBRUQsU0FBZ0IsdUJBQXVCO0lBQ25DLGtCQUFrQixHQUFHLElBQUksQ0FBQztBQUM5QixDQUFDO0FBRkQsMERBRUM7QUFFRCxTQUFnQixzQkFBc0I7SUFDbEMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0FBQy9CLENBQUM7QUFGRCx3REFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25FcnJvciwgVW5jYXVnaHRFeGNlcHRpb25FcnJvciB9IGZyb20gJy4uL2Vycm9ycy90ZXN0LXJ1bic7XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcblxuY29uc3QgcnVubmluZ1Rlc3RzICAgICA9IHt9O1xubGV0IGhhbmRsaW5nVGVzdEVycm9ycyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBwcmludEVycm9yTWVzc2FnZXNBbmRUZXJtaW5hdGUgKC4uLm1lc3NhZ2VzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBtZXNzYWdlcy5tYXAobXNnID0+IGNvbnNvbGUubG9nKG1zZykpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZXhpdFxuICAgIHNldFRpbWVvdXQoKCkgPT4gcHJvY2Vzcy5leGl0KDEpLCAwKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVGVzdFJ1bkVycm9yIChFcnJvckN0b3IsIG1lc3NhZ2UpIHtcbiAgICBPYmplY3QudmFsdWVzKHJ1bm5pbmdUZXN0cykuZm9yRWFjaCh0ZXN0UnVuID0+IHtcbiAgICAgICAgdGVzdFJ1bi5hZGRFcnJvcihuZXcgRXJyb3JDdG9yKG1lc3NhZ2UpKTtcblxuICAgICAgICByZW1vdmVSdW5uaW5nVGVzdCh0ZXN0UnVuKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKEVycm9yQ3RvciwgbWVzc2FnZSkge1xuICAgIGlmIChoYW5kbGluZ1Rlc3RFcnJvcnMpXG4gICAgICAgIGhhbmRsZVRlc3RSdW5FcnJvcihFcnJvckN0b3IsIG1lc3NhZ2UpO1xuICAgIGVsc2VcbiAgICAgICAgcHJpbnRFcnJvck1lc3NhZ2VzQW5kVGVybWluYXRlKG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbmhhbmRsZWRSZWplY3Rpb25SZWFzb24gKHJlYXNvbikge1xuICAgIGNvbnN0IHJlYXNvblR5cGUgICAgICA9IHR5cGVvZiByZWFzb247XG4gICAgY29uc3QgaXNQcmltaXRpdmVUeXBlID0gcmVhc29uVHlwZSAhPT0gJ29iamVjdCcgJiYgcmVhc29uVHlwZSAhPT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmIChpc1ByaW1pdGl2ZVR5cGUpXG4gICAgICAgIHJldHVybiBTdHJpbmcocmVhc29uKTtcblxuICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBFcnJvcilcbiAgICAgICAgcmV0dXJuIHJlYXNvbi5zdGFjaztcblxuICAgIHJldHVybiB1dGlsLmluc3BlY3QocmVhc29uLCB7IGRlcHRoOiAyLCBicmVha0xlbmd0aDogSW5maW5pdHkgfSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yIChFcnJvckN0b3IsIGVycm9yKSB7XG4gICAgaWYgKEVycm9yQ3RvciA9PT0gVW5jYXVnaHRFeGNlcHRpb25FcnJvcilcbiAgICAgICAgcmV0dXJuIGVycm9yLnN0YWNrO1xuXG4gICAgaWYgKEVycm9yQ3RvciA9PT0gVW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbkVycm9yKVxuICAgICAgICByZXR1cm4gZm9ybWF0VW5oYW5kbGVkUmVqZWN0aW9uUmVhc29uKGVycm9yKTtcblxuICAgIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVW5leHBlY3RlZEVycm9yIChFcnJvckN0b3IsIGVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlRXJyb3IoRXJyb3JDdG9yLCBmb3JtYXRFcnJvcihFcnJvckN0b3IsIGVycm9yKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHByaW50RXJyb3JNZXNzYWdlc0FuZFRlcm1pbmF0ZShlcnJvciwgZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJFcnJvckhhbmRsZXJzICgpIHtcbiAgICBwcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCBlID0+IGhhbmRsZVVuZXhwZWN0ZWRFcnJvcihVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uRXJyb3IsIGUpKTtcbiAgICBwcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIGUgPT4gaGFuZGxlVW5leHBlY3RlZEVycm9yKFVuY2F1Z2h0RXhjZXB0aW9uRXJyb3IsIGUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJ1bm5pbmdUZXN0ICh0ZXN0UnVuKSB7XG4gICAgcnVubmluZ1Rlc3RzW3Rlc3RSdW4uaWRdID0gdGVzdFJ1bjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVJ1bm5pbmdUZXN0ICh0ZXN0UnVuKSB7XG4gICAgaWYgKHRlc3RSdW4pXG4gICAgICAgIGRlbGV0ZSBydW5uaW5nVGVzdHNbdGVzdFJ1bi5pZF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydEhhbmRsaW5nVGVzdEVycm9ycyAoKSB7XG4gICAgaGFuZGxpbmdUZXN0RXJyb3JzID0gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BIYW5kbGluZ1Rlc3RFcnJvcnMgKCkge1xuICAgIGhhbmRsaW5nVGVzdEVycm9ycyA9IGZhbHNlO1xufVxuIl19