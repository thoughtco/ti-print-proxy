"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToBeInPastTense = exports.getConcatenatedValuesString = exports.getPluralSuffix = exports.splitQuotedText = exports.wordWrap = exports.removeTTYColors = void 0;
const indent_string_1 = __importDefault(require("indent-string"));
const DEFAULT_CONCATENATED_VALUES = {
    SEPARATOR: ', ',
    QUOTE_CHAR: '"'
};
function rtrim(str) {
    return str.replace(/\s+$/, '');
}
function removeTTYColors(str) {
    return str.replace(/\033\[[0-9;]*m/g, '');
}
exports.removeTTYColors = removeTTYColors;
function wordWrap(str, indent, width) {
    let curStr = '';
    let wrappedMsg = '';
    if (removeTTYColors(str).length <= width - indent)
        return indent_string_1.default(str, ' ', indent);
    str = str.replace(/(\r\n)/gm, '\n')
        .split(/(\S+[ \t]+)|(\S+(?:\n))|(\n)/m)
        //NOTE: cut empty elements
        .filter(elm => !!elm);
    str.forEach(word => {
        const newStr = curStr + word;
        if (removeTTYColors(newStr).length > width - indent) {
            wrappedMsg += `${rtrim(curStr)}\n`;
            curStr = word;
        }
        else {
            if (curStr[curStr.length - 1] === '\n') {
                wrappedMsg += `${rtrim(curStr)}\n`;
                curStr = '';
            }
            curStr += word;
        }
    });
    return indent_string_1.default(wrappedMsg + curStr, ' ', indent);
}
exports.wordWrap = wordWrap;
function splitQuotedText(str, splitChar, quotes = '"\'') {
    let currentPart = '';
    const parts = [];
    let quoteChar = null;
    for (let i = 0; i < str.length; i++) {
        const currentChar = str[i];
        if (currentChar === splitChar) {
            if (quoteChar)
                currentPart += currentChar;
            else {
                parts.push(currentPart);
                currentPart = '';
            }
        }
        else if (quotes.indexOf(currentChar) > -1) {
            if (quoteChar === currentChar)
                quoteChar = null;
            else if (!quoteChar)
                quoteChar = currentChar;
            else
                currentPart += currentChar;
        }
        else
            currentPart += currentChar;
    }
    if (currentPart)
        parts.push(currentPart);
    return parts;
}
exports.splitQuotedText = splitQuotedText;
function getPluralSuffix(array) {
    return array.length > 1 ? 's' : '';
}
exports.getPluralSuffix = getPluralSuffix;
function getConcatenatedValuesString(array, separator = DEFAULT_CONCATENATED_VALUES.SEPARATOR, quoteChar = DEFAULT_CONCATENATED_VALUES.QUOTE_CHAR) {
    return array.map(item => `${quoteChar}${item}${quoteChar}`).join(separator);
}
exports.getConcatenatedValuesString = getConcatenatedValuesString;
function getToBeInPastTense(array) {
    return array.length > 1 ? 'were' : 'was';
}
exports.getToBeInPastTense = getToBeInPastTense;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3N0cmluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrRUFBeUM7QUFFekMsTUFBTSwyQkFBMkIsR0FBRztJQUNoQyxTQUFTLEVBQUcsSUFBSTtJQUNoQixVQUFVLEVBQUUsR0FBRztDQUNsQixDQUFDO0FBRUYsU0FBUyxLQUFLLENBQUUsR0FBRztJQUNmLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELFNBQWdCLGVBQWUsQ0FBRSxHQUFHO0lBQ2hDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQixRQUFRLENBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLO0lBQ3hDLElBQUksTUFBTSxHQUFPLEVBQUUsQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFFcEIsSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssR0FBRyxNQUFNO1FBQzdDLE9BQU8sdUJBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTFDLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7U0FDOUIsS0FBSyxDQUFDLCtCQUErQixDQUFDO1FBQ3ZDLDBCQUEwQjtTQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNmLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFN0IsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLEVBQUU7WUFDakQsVUFBVSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDbkMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNqQjthQUNJO1lBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQ3BDLFVBQVUsSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNuQyxNQUFNLEdBQUcsRUFBRSxDQUFDO2FBQ2Y7WUFFRCxNQUFNLElBQUksSUFBSSxDQUFDO1NBQ2xCO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLHVCQUFZLENBQUMsVUFBVSxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQTlCRCw0QkE4QkM7QUFFRCxTQUFnQixlQUFlLENBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEdBQUcsS0FBSztJQUMzRCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDckIsTUFBTSxLQUFLLEdBQVMsRUFBRSxDQUFDO0lBQ3ZCLElBQUksU0FBUyxHQUFLLElBQUksQ0FBQztJQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNqQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0IsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQzNCLElBQUksU0FBUztnQkFDVCxXQUFXLElBQUksV0FBVyxDQUFDO2lCQUMxQjtnQkFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN4QixXQUFXLEdBQUcsRUFBRSxDQUFDO2FBQ3BCO1NBQ0o7YUFDSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDdkMsSUFBSSxTQUFTLEtBQUssV0FBVztnQkFDekIsU0FBUyxHQUFHLElBQUksQ0FBQztpQkFDaEIsSUFBSSxDQUFDLFNBQVM7Z0JBQ2YsU0FBUyxHQUFHLFdBQVcsQ0FBQzs7Z0JBRXhCLFdBQVcsSUFBSSxXQUFXLENBQUM7U0FDbEM7O1lBRUcsV0FBVyxJQUFJLFdBQVcsQ0FBQztLQUNsQztJQUVELElBQUksV0FBVztRQUNYLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFNUIsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQWhDRCwwQ0FnQ0M7QUFFRCxTQUFnQixlQUFlLENBQUUsS0FBSztJQUNsQyxPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUN2QyxDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQiwyQkFBMkIsQ0FBRSxLQUFLLEVBQUUsU0FBUyxHQUFHLDJCQUEyQixDQUFDLFNBQVMsRUFBRSxTQUFTLEdBQUcsMkJBQTJCLENBQUMsVUFBVTtJQUNySixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEYsQ0FBQztBQUZELGtFQUVDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUUsS0FBSztJQUNyQyxPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM3QyxDQUFDO0FBRkQsZ0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW5kZW50U3RyaW5nIGZyb20gJ2luZGVudC1zdHJpbmcnO1xuXG5jb25zdCBERUZBVUxUX0NPTkNBVEVOQVRFRF9WQUxVRVMgPSB7XG4gICAgU0VQQVJBVE9SOiAgJywgJyxcbiAgICBRVU9URV9DSEFSOiAnXCInXG59O1xuXG5mdW5jdGlvbiBydHJpbSAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRUWUNvbG9ycyAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXDAzM1xcW1swLTk7XSptL2csICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdvcmRXcmFwIChzdHIsIGluZGVudCwgd2lkdGgpIHtcbiAgICBsZXQgY3VyU3RyICAgICA9ICcnO1xuICAgIGxldCB3cmFwcGVkTXNnID0gJyc7XG5cbiAgICBpZiAocmVtb3ZlVFRZQ29sb3JzKHN0cikubGVuZ3RoIDw9IHdpZHRoIC0gaW5kZW50KVxuICAgICAgICByZXR1cm4gaW5kZW50U3RyaW5nKHN0ciwgJyAnLCBpbmRlbnQpO1xuXG4gICAgc3RyID0gc3RyLnJlcGxhY2UoLyhcXHJcXG4pL2dtLCAnXFxuJylcbiAgICAgICAgLnNwbGl0KC8oXFxTK1sgXFx0XSspfChcXFMrKD86XFxuKSl8KFxcbikvbSlcbiAgICAgICAgLy9OT1RFOiBjdXQgZW1wdHkgZWxlbWVudHNcbiAgICAgICAgLmZpbHRlcihlbG0gPT4gISFlbG0pO1xuXG4gICAgc3RyLmZvckVhY2god29yZCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0ciA9IGN1clN0ciArIHdvcmQ7XG5cbiAgICAgICAgaWYgKHJlbW92ZVRUWUNvbG9ycyhuZXdTdHIpLmxlbmd0aCA+IHdpZHRoIC0gaW5kZW50KSB7XG4gICAgICAgICAgICB3cmFwcGVkTXNnICs9IGAke3J0cmltKGN1clN0cil9XFxuYDtcbiAgICAgICAgICAgIGN1clN0ciA9IHdvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3VyU3RyW2N1clN0ci5sZW5ndGggLSAxXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICB3cmFwcGVkTXNnICs9IGAke3J0cmltKGN1clN0cil9XFxuYDtcbiAgICAgICAgICAgICAgICBjdXJTdHIgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VyU3RyICs9IHdvcmQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpbmRlbnRTdHJpbmcod3JhcHBlZE1zZyArIGN1clN0ciwgJyAnLCBpbmRlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRRdW90ZWRUZXh0IChzdHIsIHNwbGl0Q2hhciwgcXVvdGVzID0gJ1wiXFwnJykge1xuICAgIGxldCBjdXJyZW50UGFydCA9ICcnO1xuICAgIGNvbnN0IHBhcnRzICAgICAgID0gW107XG4gICAgbGV0IHF1b3RlQ2hhciAgID0gbnVsbDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRDaGFyID0gc3RyW2ldO1xuXG4gICAgICAgIGlmIChjdXJyZW50Q2hhciA9PT0gc3BsaXRDaGFyKSB7XG4gICAgICAgICAgICBpZiAocXVvdGVDaGFyKVxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJ0ICs9IGN1cnJlbnRDaGFyO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChjdXJyZW50UGFydCk7XG4gICAgICAgICAgICAgICAgY3VycmVudFBhcnQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChxdW90ZXMuaW5kZXhPZihjdXJyZW50Q2hhcikgPiAtMSkge1xuICAgICAgICAgICAgaWYgKHF1b3RlQ2hhciA9PT0gY3VycmVudENoYXIpXG4gICAgICAgICAgICAgICAgcXVvdGVDaGFyID0gbnVsbDtcbiAgICAgICAgICAgIGVsc2UgaWYgKCFxdW90ZUNoYXIpXG4gICAgICAgICAgICAgICAgcXVvdGVDaGFyID0gY3VycmVudENoYXI7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY3VycmVudFBhcnQgKz0gY3VycmVudENoYXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3VycmVudFBhcnQgKz0gY3VycmVudENoYXI7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRQYXJ0KVxuICAgICAgICBwYXJ0cy5wdXNoKGN1cnJlbnRQYXJ0KTtcblxuICAgIHJldHVybiBwYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBsdXJhbFN1ZmZpeCAoYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkubGVuZ3RoID4gMSA/ICdzJyA6ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uY2F0ZW5hdGVkVmFsdWVzU3RyaW5nIChhcnJheSwgc2VwYXJhdG9yID0gREVGQVVMVF9DT05DQVRFTkFURURfVkFMVUVTLlNFUEFSQVRPUiwgcXVvdGVDaGFyID0gREVGQVVMVF9DT05DQVRFTkFURURfVkFMVUVTLlFVT1RFX0NIQVIpIHtcbiAgICByZXR1cm4gYXJyYXkubWFwKGl0ZW0gPT4gYCR7cXVvdGVDaGFyfSR7aXRlbX0ke3F1b3RlQ2hhcn1gKS5qb2luKHNlcGFyYXRvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb0JlSW5QYXN0VGVuc2UgKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5Lmxlbmd0aCA+IDEgPyAnd2VyZScgOiAnd2FzJztcbn1cbiJdfQ==