"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.delegateAPI = exports.getDelegatedAPIList = void 0;
const API_IMPLEMENTATION_METHOD_RE = /^_(\S+)\$(getter|setter)?$/;
function getDelegatedAPIList(src) {
    return Object
        .getOwnPropertyNames(src)
        .map(prop => {
        const match = prop.match(API_IMPLEMENTATION_METHOD_RE);
        if (match) {
            return {
                srcProp: prop,
                apiProp: match[1],
                accessor: match[2]
            };
        }
        return null;
    })
        .filter(item => !!item);
}
exports.getDelegatedAPIList = getDelegatedAPIList;
function delegateAPI(dest, apiList, opts) {
    apiList.forEach(({ srcProp, apiProp, accessor }) => {
        const fn = function (...args) {
            if (opts.proxyMethod)
                opts.proxyMethod();
            let handler = null;
            if (opts.useCurrentCtxAsHandler)
                handler = this;
            else if (opts.getHandler)
                handler = opts.getHandler(apiProp, accessor);
            else
                handler = opts.handler;
            return handler[srcProp](...args);
        };
        if (accessor === 'getter')
            Object.defineProperty(dest, apiProp, { get: fn, configurable: true });
        else if (accessor === 'setter')
            Object.defineProperty(dest, apiProp, { set: fn, configurable: true });
        else
            dest[apiProp] = fn;
    });
}
exports.delegateAPI = delegateAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZWdhdGVkLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWxlZ2F0ZWQtYXBpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sNEJBQTRCLEdBQUcsNEJBQTRCLENBQUM7QUFFbEUsU0FBZ0IsbUJBQW1CLENBQUUsR0FBRztJQUNwQyxPQUFPLE1BQU07U0FDUixtQkFBbUIsQ0FBQyxHQUFHLENBQUM7U0FDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBRXZELElBQUksS0FBSyxFQUFFO1lBQ1AsT0FBTztnQkFDSCxPQUFPLEVBQUcsSUFBSTtnQkFDZCxPQUFPLEVBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDckIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFDO1NBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFqQkQsa0RBaUJDO0FBRUQsU0FBZ0IsV0FBVyxDQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSTtJQUM1QyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7UUFDL0MsTUFBTSxFQUFFLEdBQUcsVUFBVSxHQUFHLElBQUk7WUFDeEIsSUFBSSxJQUFJLENBQUMsV0FBVztnQkFDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRXZCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztZQUVuQixJQUFJLElBQUksQ0FBQyxzQkFBc0I7Z0JBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUM7aUJBRWQsSUFBSSxJQUFJLENBQUMsVUFBVTtnQkFDcEIsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDOztnQkFHN0MsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7WUFFM0IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUM7UUFFRixJQUFJLFFBQVEsS0FBSyxRQUFRO1lBQ3JCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7YUFFckUsSUFBSSxRQUFRLEtBQUssUUFBUTtZQUMxQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDOztZQUd0RSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQTdCRCxrQ0E2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBUElfSU1QTEVNRU5UQVRJT05fTUVUSE9EX1JFID0gL15fKFxcUyspXFwkKGdldHRlcnxzZXR0ZXIpPyQvO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVsZWdhdGVkQVBJTGlzdCAoc3JjKSB7XG4gICAgcmV0dXJuIE9iamVjdFxuICAgICAgICAuZ2V0T3duUHJvcGVydHlOYW1lcyhzcmMpXG4gICAgICAgIC5tYXAocHJvcCA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHByb3AubWF0Y2goQVBJX0lNUExFTUVOVEFUSU9OX01FVEhPRF9SRSk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNyY1Byb3A6ICBwcm9wLFxuICAgICAgICAgICAgICAgICAgICBhcGlQcm9wOiAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBtYXRjaFsyXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGVnYXRlQVBJIChkZXN0LCBhcGlMaXN0LCBvcHRzKSB7XG4gICAgYXBpTGlzdC5mb3JFYWNoKCh7IHNyY1Byb3AsIGFwaVByb3AsIGFjY2Vzc29yIH0pID0+IHtcbiAgICAgICAgY29uc3QgZm4gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKG9wdHMucHJveHlNZXRob2QpXG4gICAgICAgICAgICAgICAgb3B0cy5wcm94eU1ldGhvZCgpO1xuXG4gICAgICAgICAgICBsZXQgaGFuZGxlciA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChvcHRzLnVzZUN1cnJlbnRDdHhBc0hhbmRsZXIpXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IHRoaXM7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdHMuZ2V0SGFuZGxlcilcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gb3B0cy5nZXRIYW5kbGVyKGFwaVByb3AsIGFjY2Vzc29yKTtcblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBvcHRzLmhhbmRsZXI7XG5cbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyW3NyY1Byb3BdKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhY2Nlc3NvciA9PT0gJ2dldHRlcicpXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzdCwgYXBpUHJvcCwgeyBnZXQ6IGZuLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG5cbiAgICAgICAgZWxzZSBpZiAoYWNjZXNzb3IgPT09ICdzZXR0ZXInKVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGFwaVByb3AsIHsgc2V0OiBmbiwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlc3RbYXBpUHJvcF0gPSBmbjtcbiAgICB9KTtcbn1cbiJdfQ==