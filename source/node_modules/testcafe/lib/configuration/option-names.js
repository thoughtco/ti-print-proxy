"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    src: 'src',
    browsers: 'browsers',
    concurrency: 'concurrency',
    filter: 'filter',
    filterTestGrep: 'filter.testGrep',
    filterFixtureGrep: 'filter.fixtureGrep',
    reporter: 'reporter',
    ssl: 'ssl',
    speed: 'speed',
    screenshots: 'screenshots',
    screenshotPath: 'screenshotPath',
    screenshotPathPattern: 'screenshotPathPattern',
    takeScreenshotsOnFails: 'takeScreenshotsOnFails',
    proxyBypass: 'proxyBypass',
    appCommand: 'appCommand',
    appInitDelay: 'appInitDelay',
    skipJsErrors: 'skipJsErrors',
    quarantineMode: 'quarantineMode',
    debugMode: 'debugMode',
    debugOnFail: 'debugOnFail',
    skipUncaughtErrors: 'skipUncaughtErrors',
    stopOnFirstFail: 'stopOnFirstFail',
    selectorTimeout: 'selectorTimeout',
    assertionTimeout: 'assertionTimeout',
    pageLoadTimeout: 'pageLoadTimeout',
    videoPath: 'videoPath',
    videoOptions: 'videoOptions',
    videoEncodingOptions: 'videoEncodingOptions',
    tsConfigPath: 'tsConfigPath',
    clientScripts: 'clientScripts',
    requestHooks: 'requestHooks',
    retryTestPages: 'retryTestPages',
    hostname: 'hostname',
    port1: 'port1',
    port2: 'port2',
    developmentMode: 'developmentMode',
    disablePageReloads: 'disablePageReloads',
    disablePageCaching: 'disablePageCaching',
    disableScreenshots: 'disableScreenshots',
    debugLogger: 'debugLogger',
    allowMultipleWindows: 'allowMultipleWindows',
    experimentalCompilerService: 'experimentalCompilerService'
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLW5hbWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZ3VyYXRpb24vb3B0aW9uLW5hbWVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0JBQWU7SUFDWCxHQUFHLEVBQTBCLEtBQUs7SUFDbEMsUUFBUSxFQUFxQixVQUFVO0lBQ3ZDLFdBQVcsRUFBa0IsYUFBYTtJQUMxQyxNQUFNLEVBQXVCLFFBQVE7SUFDckMsY0FBYyxFQUFlLGlCQUFpQjtJQUM5QyxpQkFBaUIsRUFBWSxvQkFBb0I7SUFDakQsUUFBUSxFQUFxQixVQUFVO0lBQ3ZDLEdBQUcsRUFBMEIsS0FBSztJQUNsQyxLQUFLLEVBQXdCLE9BQU87SUFDcEMsV0FBVyxFQUFrQixhQUFhO0lBQzFDLGNBQWMsRUFBZSxnQkFBZ0I7SUFDN0MscUJBQXFCLEVBQVEsdUJBQXVCO0lBQ3BELHNCQUFzQixFQUFPLHdCQUF3QjtJQUNyRCxXQUFXLEVBQWtCLGFBQWE7SUFDMUMsVUFBVSxFQUFtQixZQUFZO0lBQ3pDLFlBQVksRUFBaUIsY0FBYztJQUMzQyxZQUFZLEVBQWlCLGNBQWM7SUFDM0MsY0FBYyxFQUFlLGdCQUFnQjtJQUM3QyxTQUFTLEVBQW9CLFdBQVc7SUFDeEMsV0FBVyxFQUFrQixhQUFhO0lBQzFDLGtCQUFrQixFQUFXLG9CQUFvQjtJQUNqRCxlQUFlLEVBQWMsaUJBQWlCO0lBQzlDLGVBQWUsRUFBYyxpQkFBaUI7SUFDOUMsZ0JBQWdCLEVBQWEsa0JBQWtCO0lBQy9DLGVBQWUsRUFBYyxpQkFBaUI7SUFDOUMsU0FBUyxFQUFvQixXQUFXO0lBQ3hDLFlBQVksRUFBaUIsY0FBYztJQUMzQyxvQkFBb0IsRUFBUyxzQkFBc0I7SUFDbkQsWUFBWSxFQUFpQixjQUFjO0lBQzNDLGFBQWEsRUFBZ0IsZUFBZTtJQUM1QyxZQUFZLEVBQWlCLGNBQWM7SUFDM0MsY0FBYyxFQUFlLGdCQUFnQjtJQUM3QyxRQUFRLEVBQXFCLFVBQVU7SUFDdkMsS0FBSyxFQUF3QixPQUFPO0lBQ3BDLEtBQUssRUFBd0IsT0FBTztJQUNwQyxlQUFlLEVBQWMsaUJBQWlCO0lBQzlDLGtCQUFrQixFQUFXLG9CQUFvQjtJQUNqRCxrQkFBa0IsRUFBVyxvQkFBb0I7SUFDakQsa0JBQWtCLEVBQVcsb0JBQW9CO0lBQ2pELFdBQVcsRUFBa0IsYUFBYTtJQUMxQyxvQkFBb0IsRUFBUyxzQkFBc0I7SUFDbkQsMkJBQTJCLEVBQUUsNkJBQTZCO0NBQzdELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgc3JjOiAgICAgICAgICAgICAgICAgICAgICAgICAnc3JjJyxcbiAgICBicm93c2VyczogICAgICAgICAgICAgICAgICAgICdicm93c2VycycsXG4gICAgY29uY3VycmVuY3k6ICAgICAgICAgICAgICAgICAnY29uY3VycmVuY3knLFxuICAgIGZpbHRlcjogICAgICAgICAgICAgICAgICAgICAgJ2ZpbHRlcicsXG4gICAgZmlsdGVyVGVzdEdyZXA6ICAgICAgICAgICAgICAnZmlsdGVyLnRlc3RHcmVwJyxcbiAgICBmaWx0ZXJGaXh0dXJlR3JlcDogICAgICAgICAgICdmaWx0ZXIuZml4dHVyZUdyZXAnLFxuICAgIHJlcG9ydGVyOiAgICAgICAgICAgICAgICAgICAgJ3JlcG9ydGVyJyxcbiAgICBzc2w6ICAgICAgICAgICAgICAgICAgICAgICAgICdzc2wnLFxuICAgIHNwZWVkOiAgICAgICAgICAgICAgICAgICAgICAgJ3NwZWVkJyxcbiAgICBzY3JlZW5zaG90czogICAgICAgICAgICAgICAgICdzY3JlZW5zaG90cycsXG4gICAgc2NyZWVuc2hvdFBhdGg6ICAgICAgICAgICAgICAnc2NyZWVuc2hvdFBhdGgnLFxuICAgIHNjcmVlbnNob3RQYXRoUGF0dGVybjogICAgICAgJ3NjcmVlbnNob3RQYXRoUGF0dGVybicsXG4gICAgdGFrZVNjcmVlbnNob3RzT25GYWlsczogICAgICAndGFrZVNjcmVlbnNob3RzT25GYWlscycsXG4gICAgcHJveHlCeXBhc3M6ICAgICAgICAgICAgICAgICAncHJveHlCeXBhc3MnLFxuICAgIGFwcENvbW1hbmQ6ICAgICAgICAgICAgICAgICAgJ2FwcENvbW1hbmQnLFxuICAgIGFwcEluaXREZWxheTogICAgICAgICAgICAgICAgJ2FwcEluaXREZWxheScsXG4gICAgc2tpcEpzRXJyb3JzOiAgICAgICAgICAgICAgICAnc2tpcEpzRXJyb3JzJyxcbiAgICBxdWFyYW50aW5lTW9kZTogICAgICAgICAgICAgICdxdWFyYW50aW5lTW9kZScsXG4gICAgZGVidWdNb2RlOiAgICAgICAgICAgICAgICAgICAnZGVidWdNb2RlJyxcbiAgICBkZWJ1Z09uRmFpbDogICAgICAgICAgICAgICAgICdkZWJ1Z09uRmFpbCcsXG4gICAgc2tpcFVuY2F1Z2h0RXJyb3JzOiAgICAgICAgICAnc2tpcFVuY2F1Z2h0RXJyb3JzJyxcbiAgICBzdG9wT25GaXJzdEZhaWw6ICAgICAgICAgICAgICdzdG9wT25GaXJzdEZhaWwnLFxuICAgIHNlbGVjdG9yVGltZW91dDogICAgICAgICAgICAgJ3NlbGVjdG9yVGltZW91dCcsXG4gICAgYXNzZXJ0aW9uVGltZW91dDogICAgICAgICAgICAnYXNzZXJ0aW9uVGltZW91dCcsXG4gICAgcGFnZUxvYWRUaW1lb3V0OiAgICAgICAgICAgICAncGFnZUxvYWRUaW1lb3V0JyxcbiAgICB2aWRlb1BhdGg6ICAgICAgICAgICAgICAgICAgICd2aWRlb1BhdGgnLFxuICAgIHZpZGVvT3B0aW9uczogICAgICAgICAgICAgICAgJ3ZpZGVvT3B0aW9ucycsXG4gICAgdmlkZW9FbmNvZGluZ09wdGlvbnM6ICAgICAgICAndmlkZW9FbmNvZGluZ09wdGlvbnMnLFxuICAgIHRzQ29uZmlnUGF0aDogICAgICAgICAgICAgICAgJ3RzQ29uZmlnUGF0aCcsXG4gICAgY2xpZW50U2NyaXB0czogICAgICAgICAgICAgICAnY2xpZW50U2NyaXB0cycsXG4gICAgcmVxdWVzdEhvb2tzOiAgICAgICAgICAgICAgICAncmVxdWVzdEhvb2tzJyxcbiAgICByZXRyeVRlc3RQYWdlczogICAgICAgICAgICAgICdyZXRyeVRlc3RQYWdlcycsXG4gICAgaG9zdG5hbWU6ICAgICAgICAgICAgICAgICAgICAnaG9zdG5hbWUnLFxuICAgIHBvcnQxOiAgICAgICAgICAgICAgICAgICAgICAgJ3BvcnQxJyxcbiAgICBwb3J0MjogICAgICAgICAgICAgICAgICAgICAgICdwb3J0MicsXG4gICAgZGV2ZWxvcG1lbnRNb2RlOiAgICAgICAgICAgICAnZGV2ZWxvcG1lbnRNb2RlJyxcbiAgICBkaXNhYmxlUGFnZVJlbG9hZHM6ICAgICAgICAgICdkaXNhYmxlUGFnZVJlbG9hZHMnLFxuICAgIGRpc2FibGVQYWdlQ2FjaGluZzogICAgICAgICAgJ2Rpc2FibGVQYWdlQ2FjaGluZycsXG4gICAgZGlzYWJsZVNjcmVlbnNob3RzOiAgICAgICAgICAnZGlzYWJsZVNjcmVlbnNob3RzJyxcbiAgICBkZWJ1Z0xvZ2dlcjogICAgICAgICAgICAgICAgICdkZWJ1Z0xvZ2dlcicsXG4gICAgYWxsb3dNdWx0aXBsZVdpbmRvd3M6ICAgICAgICAnYWxsb3dNdWx0aXBsZVdpbmRvd3MnLFxuICAgIGV4cGVyaW1lbnRhbENvbXBpbGVyU2VydmljZTogJ2V4cGVyaW1lbnRhbENvbXBpbGVyU2VydmljZSdcbn07XG4iXX0=