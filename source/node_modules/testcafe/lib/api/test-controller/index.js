"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Fix https://github.com/DevExpress/testcafe/issues/4139 to get rid of Pinkie
const pinkie_1 = __importDefault(require("pinkie"));
const lodash_1 = require("lodash");
const get_callsite_1 = require("../../errors/get-callsite");
const client_function_builder_1 = __importDefault(require("../../client-functions/client-function-builder"));
const assertion_1 = __importDefault(require("./assertion"));
const delegated_api_1 = require("../../utils/delegated-api");
const actions_1 = require("../../test-run/commands/actions");
const browser_manipulation_1 = require("../../test-run/commands/browser-manipulation");
const observation_1 = require("../../test-run/commands/observation");
const assert_type_1 = __importDefault(require("../request-hooks/assert-type"));
const execution_context_1 = require("./execution-context");
const originalThen = pinkie_1.default.resolve().then;
class TestController {
    constructor(testRun) {
        this._executionContext = null;
        this.testRun = testRun;
        this.executionChain = pinkie_1.default.resolve();
        this.callsitesWithoutAwait = new Set();
    }
    // NOTE: we track missing `awaits` by exposing a special custom Promise to user code.
    // Action or assertion is awaited if:
    // a)someone used `await` so Promise's `then` function executed
    // b)Promise chained by using one of the mixed-in controller methods
    //
    // In both scenarios, we check that callsite that produced Promise is equal to the one
    // that is currently missing await. This is required to workaround scenarios like this:
    //
    // var t2 = t.click('#btn1'); // <-- stores new callsiteWithoutAwait
    // await t2;                  // <-- callsiteWithoutAwait = null
    // t.click('#btn2');          // <-- stores new callsiteWithoutAwait
    // await t2.click('#btn3');   // <-- without check it will set callsiteWithoutAwait = null, so we will lost tracking
    _createExtendedPromise(promise, callsite) {
        const extendedPromise = promise.then(lodash_1.identity);
        const markCallsiteAwaited = () => this.callsitesWithoutAwait.delete(callsite);
        extendedPromise.then = function () {
            markCallsiteAwaited();
            return originalThen.apply(this, arguments);
        };
        delegated_api_1.delegateAPI(extendedPromise, TestController.API_LIST, {
            handler: this,
            proxyMethod: markCallsiteAwaited
        });
        return extendedPromise;
    }
    _enqueueTask(apiMethodName, createTaskExecutor) {
        const callsite = get_callsite_1.getCallsiteForMethod(apiMethodName);
        const executor = createTaskExecutor(callsite);
        this.executionChain.then = originalThen;
        this.executionChain = this.executionChain.then(executor);
        this.callsitesWithoutAwait.add(callsite);
        this.executionChain = this._createExtendedPromise(this.executionChain, callsite);
        return this.executionChain;
    }
    _enqueueCommand(apiMethodName, CmdCtor, cmdArgs) {
        return this._enqueueTask(apiMethodName, callsite => {
            let command = null;
            try {
                command = new CmdCtor(cmdArgs, this.testRun);
            }
            catch (err) {
                err.callsite = callsite;
                throw err;
            }
            return () => {
                return this.testRun.executeAction(apiMethodName, command, callsite)
                    .catch(err => {
                    this.executionChain = pinkie_1.default.resolve();
                    throw err;
                });
            };
        });
    }
    getExecutionContext() {
        if (!this._executionContext)
            this._executionContext = execution_context_1.createExecutionContext(this.testRun);
        return this._executionContext;
    }
    // API implementation
    // We need implementation methods to obtain correct callsites. If we use plain API
    // methods in chained wrappers then we will have callsite for the wrapped method
    // in this file instead of chained method callsite in user code.
    _ctx$getter() {
        return this.testRun.ctx;
    }
    _ctx$setter(val) {
        this.testRun.ctx = val;
        return this.testRun.ctx;
    }
    _fixtureCtx$getter() {
        return this.testRun.fixtureCtx;
    }
    _browser$getter() {
        return lodash_1.assign({}, this.testRun.browserConnection.browserInfo.parsedUserAgent, {
            alias: this.testRun.browserConnection.browserInfo.alias,
            headless: this.testRun.browserConnection.isHeadlessBrowser()
        });
    }
    _click$(selector, options) {
        return this._enqueueCommand('click', actions_1.ClickCommand, { selector, options });
    }
    _rightClick$(selector, options) {
        return this._enqueueCommand('rightClick', actions_1.RightClickCommand, { selector, options });
    }
    _doubleClick$(selector, options) {
        return this._enqueueCommand('doubleClick', actions_1.DoubleClickCommand, { selector, options });
    }
    _hover$(selector, options) {
        return this._enqueueCommand('hover', actions_1.HoverCommand, { selector, options });
    }
    _drag$(selector, dragOffsetX, dragOffsetY, options) {
        return this._enqueueCommand('drag', actions_1.DragCommand, { selector, dragOffsetX, dragOffsetY, options });
    }
    _dragToElement$(selector, destinationSelector, options) {
        return this._enqueueCommand('dragToElement', actions_1.DragToElementCommand, { selector, destinationSelector, options });
    }
    _typeText$(selector, text, options) {
        return this._enqueueCommand('typeText', actions_1.TypeTextCommand, { selector, text, options });
    }
    _selectText$(selector, startPos, endPos, options) {
        return this._enqueueCommand('selectText', actions_1.SelectTextCommand, { selector, startPos, endPos, options });
    }
    _selectTextAreaContent$(selector, startLine, startPos, endLine, endPos, options) {
        return this._enqueueCommand('selectTextAreaContent', actions_1.SelectTextAreaContentCommand, {
            selector,
            startLine,
            startPos,
            endLine,
            endPos,
            options
        });
    }
    _selectEditableContent$(startSelector, endSelector, options) {
        return this._enqueueCommand('selectEditableContent', actions_1.SelectEditableContentCommand, {
            startSelector,
            endSelector,
            options
        });
    }
    _pressKey$(keys, options) {
        return this._enqueueCommand('pressKey', actions_1.PressKeyCommand, { keys, options });
    }
    _wait$(timeout) {
        return this._enqueueCommand('wait', observation_1.WaitCommand, { timeout });
    }
    _navigateTo$(url) {
        return this._enqueueCommand('navigateTo', actions_1.NavigateToCommand, { url });
    }
    _setFilesToUpload$(selector, filePath) {
        return this._enqueueCommand('setFilesToUpload', actions_1.SetFilesToUploadCommand, { selector, filePath });
    }
    _clearUpload$(selector) {
        return this._enqueueCommand('clearUpload', actions_1.ClearUploadCommand, { selector });
    }
    _takeScreenshot$(options) {
        if (options && typeof options !== 'object')
            options = { path: options };
        return this._enqueueCommand('takeScreenshot', browser_manipulation_1.TakeScreenshotCommand, options);
    }
    _takeElementScreenshot$(selector, ...args) {
        const commandArgs = { selector };
        if (args[1]) {
            commandArgs.path = args[0];
            commandArgs.options = args[1];
        }
        else if (typeof args[0] === 'object')
            commandArgs.options = args[0];
        else
            commandArgs.path = args[0];
        return this._enqueueCommand('takeElementScreenshot', browser_manipulation_1.TakeElementScreenshotCommand, commandArgs);
    }
    _resizeWindow$(width, height) {
        return this._enqueueCommand('resizeWindow', browser_manipulation_1.ResizeWindowCommand, { width, height });
    }
    _resizeWindowToFitDevice$(device, options) {
        return this._enqueueCommand('resizeWindowToFitDevice', browser_manipulation_1.ResizeWindowToFitDeviceCommand, { device, options });
    }
    _maximizeWindow$() {
        return this._enqueueCommand('maximizeWindow', browser_manipulation_1.MaximizeWindowCommand);
    }
    _switchToIframe$(selector) {
        return this._enqueueCommand('switchToIframe', actions_1.SwitchToIframeCommand, { selector });
    }
    _switchToMainWindow$() {
        return this._enqueueCommand('switchToMainWindow', actions_1.SwitchToMainWindowCommand);
    }
    _eval$(fn, options) {
        if (!lodash_1.isNil(options))
            options = lodash_1.assign({}, options, { boundTestRun: this });
        const builder = new client_function_builder_1.default(fn, options, { instantiation: 'eval', execution: 'eval' });
        const clientFn = builder.getFunction();
        return clientFn();
    }
    _setNativeDialogHandler$(fn, options) {
        return this._enqueueCommand('setNativeDialogHandler', actions_1.SetNativeDialogHandlerCommand, {
            dialogHandler: { fn, options }
        });
    }
    _getNativeDialogHistory$() {
        const name = 'getNativeDialogHistory';
        const callsite = get_callsite_1.getCallsiteForMethod(name);
        return this.testRun.executeAction(name, new actions_1.GetNativeDialogHistoryCommand(), callsite);
    }
    _getBrowserConsoleMessages$() {
        const name = 'getBrowserConsoleMessages';
        const callsite = get_callsite_1.getCallsiteForMethod(name);
        return this.testRun.executeAction(name, new actions_1.GetBrowserConsoleMessagesCommand(), callsite);
    }
    _expect$(actual) {
        const callsite = get_callsite_1.getCallsiteForMethod('expect');
        return new assertion_1.default(actual, this, callsite);
    }
    _debug$() {
        return this._enqueueCommand('debug', observation_1.DebugCommand);
    }
    _setTestSpeed$(speed) {
        return this._enqueueCommand('setTestSpeed', actions_1.SetTestSpeedCommand, { speed });
    }
    _setPageLoadTimeout$(duration) {
        return this._enqueueCommand('setPageLoadTimeout', actions_1.SetPageLoadTimeoutCommand, { duration });
    }
    _useRole$(role) {
        return this._enqueueCommand('useRole', actions_1.UseRoleCommand, { role });
    }
    _addRequestHooks$(...hooks) {
        return this._enqueueTask('addRequestHooks', () => {
            hooks = lodash_1.flattenDeep(hooks);
            assert_type_1.default(hooks);
            hooks.forEach(hook => this.testRun.addRequestHook(hook));
        });
    }
    _removeRequestHooks$(...hooks) {
        return this._enqueueTask('removeRequestHooks', () => {
            hooks = lodash_1.flattenDeep(hooks);
            assert_type_1.default(hooks);
            hooks.forEach(hook => this.testRun.removeRequestHook(hook));
        });
    }
}
exports.default = TestController;
TestController.API_LIST = delegated_api_1.getDelegatedAPIList(TestController.prototype);
delegated_api_1.delegateAPI(TestController.prototype, TestController.API_LIST, { useCurrentCtxAsHandler: true });
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,