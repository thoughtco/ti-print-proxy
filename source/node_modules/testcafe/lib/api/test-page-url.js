"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolvePageUrl = exports.assertUrl = void 0;
const path_1 = __importDefault(require("path"));
const os_family_1 = __importDefault(require("os-family"));
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const PROTOCOL_RE = /^([\w-]+?)(?=:\/\/)/;
const SUPPORTED_PROTOCOL_RE = /^(https?|file):/;
const IMPLICIT_PROTOCOL_RE = /^\/\//;
const ABSOLUTE_PATH_RE = /^\/[^/]/;
const WIN_ABSOLUTE_PATH_RE = /^\w:[/\\]/;
const RELATIVE_PATH_RE = /^\.\.?[/\\]/;
function isAbsolutePath(url) {
    return os_family_1.default.win ? WIN_ABSOLUTE_PATH_RE.test(url) : ABSOLUTE_PATH_RE.test(url);
}
function resolveFileUrl(url, testFileName) {
    const testFileDir = path_1.default.dirname(testFileName);
    if (RELATIVE_PATH_RE.test(url))
        url = path_1.default.join(testFileDir, url);
    return 'file://' + url;
}
function assertUrl(url, callsiteName) {
    const protocol = url.match(PROTOCOL_RE);
    const hasUnsupportedProtocol = protocol && !SUPPORTED_PROTOCOL_RE.test(url);
    const isWinAbsolutePath = os_family_1.default.win && WIN_ABSOLUTE_PATH_RE.test(url);
    if (hasUnsupportedProtocol && !isWinAbsolutePath && url !== testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
        throw new runtime_1.APIError(callsiteName, types_1.RUNTIME_ERRORS.unsupportedUrlProtocol, url, protocol[0]);
}
exports.assertUrl = assertUrl;
function resolvePageUrl(url, testFileName) {
    if (SUPPORTED_PROTOCOL_RE.test(url) || url === testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
        return url;
    if (isAbsolutePath(url) || RELATIVE_PATH_RE.test(url))
        return resolveFileUrl(url, testFileName);
    const protocol = IMPLICIT_PROTOCOL_RE.test(url) ? 'http:' : 'http://';
    return protocol + url;
}
exports.resolvePageUrl = resolvePageUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1wYWdlLXVybC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVzdC1wYWdlLXVybC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsMERBQTJCO0FBQzNCLCtDQUE2QztBQUM3QywyQ0FBaUQ7QUFDakQsNkRBQXlEO0FBRXpELE1BQU0sV0FBVyxHQUFhLHFCQUFxQixDQUFDO0FBQ3BELE1BQU0scUJBQXFCLEdBQUcsaUJBQWlCLENBQUM7QUFDaEQsTUFBTSxvQkFBb0IsR0FBSSxPQUFPLENBQUM7QUFDdEMsTUFBTSxnQkFBZ0IsR0FBUSxTQUFTLENBQUM7QUFDeEMsTUFBTSxvQkFBb0IsR0FBSSxXQUFXLENBQUM7QUFDMUMsTUFBTSxnQkFBZ0IsR0FBUSxhQUFhLENBQUM7QUFHNUMsU0FBUyxjQUFjLENBQUUsR0FBRztJQUN4QixPQUFPLG1CQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRixDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUUsR0FBRyxFQUFFLFlBQVk7SUFDdEMsTUFBTSxXQUFXLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUUvQyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDMUIsR0FBRyxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXRDLE9BQU8sU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUMzQixDQUFDO0FBRUQsU0FBZ0IsU0FBUyxDQUFFLEdBQUcsRUFBRSxZQUFZO0lBQ3hDLE1BQU0sUUFBUSxHQUFpQixHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sc0JBQXNCLEdBQUcsUUFBUSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVFLE1BQU0saUJBQWlCLEdBQVEsbUJBQUUsQ0FBQyxHQUFHLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXhFLElBQUksc0JBQXNCLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxHQUFHLEtBQUssd0NBQWtCO1FBQzFFLE1BQU0sSUFBSSxrQkFBUSxDQUFDLFlBQVksRUFBRSxzQkFBYyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRyxDQUFDO0FBUEQsOEJBT0M7QUFFRCxTQUFnQixjQUFjLENBQUUsR0FBRyxFQUFFLFlBQVk7SUFDN0MsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxLQUFLLHdDQUFrQjtRQUM3RCxPQUFPLEdBQUcsQ0FBQztJQUVmLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDakQsT0FBTyxjQUFjLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRTdDLE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFdEUsT0FBTyxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQzFCLENBQUM7QUFWRCx3Q0FVQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vZXJyb3JzL3R5cGVzJztcbmltcG9ydCB7IFNQRUNJQUxfQkxBTktfUEFHRSB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuXG5jb25zdCBQUk9UT0NPTF9SRSAgICAgICAgICAgPSAvXihbXFx3LV0rPykoPz06XFwvXFwvKS87XG5jb25zdCBTVVBQT1JURURfUFJPVE9DT0xfUkUgPSAvXihodHRwcz98ZmlsZSk6LztcbmNvbnN0IElNUExJQ0lUX1BST1RPQ09MX1JFICA9IC9eXFwvXFwvLztcbmNvbnN0IEFCU09MVVRFX1BBVEhfUkUgICAgICA9IC9eXFwvW14vXS87XG5jb25zdCBXSU5fQUJTT0xVVEVfUEFUSF9SRSAgPSAvXlxcdzpbL1xcXFxdLztcbmNvbnN0IFJFTEFUSVZFX1BBVEhfUkUgICAgICA9IC9eXFwuXFwuP1svXFxcXF0vO1xuXG5cbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoICh1cmwpIHtcbiAgICByZXR1cm4gT1Mud2luID8gV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpIDogQUJTT0xVVEVfUEFUSF9SRS50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVGaWxlVXJsICh1cmwsIHRlc3RGaWxlTmFtZSkge1xuICAgIGNvbnN0IHRlc3RGaWxlRGlyID0gcGF0aC5kaXJuYW1lKHRlc3RGaWxlTmFtZSk7XG5cbiAgICBpZiAoUkVMQVRJVkVfUEFUSF9SRS50ZXN0KHVybCkpXG4gICAgICAgIHVybCA9IHBhdGguam9pbih0ZXN0RmlsZURpciwgdXJsKTtcblxuICAgIHJldHVybiAnZmlsZTovLycgKyB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRVcmwgKHVybCwgY2FsbHNpdGVOYW1lKSB7XG4gICAgY29uc3QgcHJvdG9jb2wgICAgICAgICAgICAgICA9IHVybC5tYXRjaChQUk9UT0NPTF9SRSk7XG4gICAgY29uc3QgaGFzVW5zdXBwb3J0ZWRQcm90b2NvbCA9IHByb3RvY29sICYmICFTVVBQT1JURURfUFJPVE9DT0xfUkUudGVzdCh1cmwpO1xuICAgIGNvbnN0IGlzV2luQWJzb2x1dGVQYXRoICAgICAgPSBPUy53aW4gJiYgV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpO1xuXG4gICAgaWYgKGhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wgJiYgIWlzV2luQWJzb2x1dGVQYXRoICYmIHVybCAhPT0gU1BFQ0lBTF9CTEFOS19QQUdFKVxuICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoY2FsbHNpdGVOYW1lLCBSVU5USU1FX0VSUk9SUy51bnN1cHBvcnRlZFVybFByb3RvY29sLCB1cmwsIHByb3RvY29sWzBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYWdlVXJsICh1cmwsIHRlc3RGaWxlTmFtZSkge1xuICAgIGlmIChTVVBQT1JURURfUFJPVE9DT0xfUkUudGVzdCh1cmwpIHx8IHVybCA9PT0gU1BFQ0lBTF9CTEFOS19QQUdFKVxuICAgICAgICByZXR1cm4gdXJsO1xuXG4gICAgaWYgKGlzQWJzb2x1dGVQYXRoKHVybCkgfHwgUkVMQVRJVkVfUEFUSF9SRS50ZXN0KHVybCkpXG4gICAgICAgIHJldHVybiByZXNvbHZlRmlsZVVybCh1cmwsIHRlc3RGaWxlTmFtZSk7XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IElNUExJQ0lUX1BST1RPQ09MX1JFLnRlc3QodXJsKSA/ICdodHRwOicgOiAnaHR0cDovLyc7XG5cbiAgICByZXR1cm4gcHJvdG9jb2wgKyB1cmw7XG59XG4iXX0=