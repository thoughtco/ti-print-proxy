"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findProblematicScripts = exports.setUniqueUrls = void 0;
const lodash_1 = require("lodash");
// @ts-ignore Could not find a declaration file for module 'testcafe-hammerhead'
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const client_script_1 = __importDefault(require("./client-script"));
function getScriptGroupValues(collection, groupByPredicate, pickByPredicate) {
    return lodash_1.chain(collection)
        .groupBy(groupByPredicate)
        .pickBy(pickByPredicate)
        .values()
        .value();
}
function getDuplicatedScripts(collection) {
    const contentGroups = getScriptGroupValues(collection, (s) => s.hash, (g) => g.length > 1);
    const duplicatedScripts = [];
    contentGroups.forEach(contentGroup => {
        const pageGroups = getScriptGroupValues(contentGroup, (s) => s.page.toString());
        if (pageGroups.length === 1 && testcafe_hammerhead_1.RequestFilterRule.isANY(pageGroups[0][0].page)) { /*eslint-disable-line no-extra-parens*/
            duplicatedScripts.push(pageGroups[0][0]);
            return;
        }
        const forAllPagesGroup = pageGroups.find(pg => testcafe_hammerhead_1.RequestFilterRule.isANY(pg[0].page)); /*eslint-disable-line no-extra-parens*/
        if (forAllPagesGroup) {
            pageGroups
                .filter(pg => !testcafe_hammerhead_1.RequestFilterRule.isANY(pg[0].page)) /*eslint-disable-line no-extra-parens*/
                .forEach(pg => {
                duplicatedScripts.push(pg[0]);
            });
        }
        else {
            pageGroups
                .filter(pg => pg.length > 1)
                .forEach(pg => {
                duplicatedScripts.push(pg[0]);
            });
        }
    });
    return duplicatedScripts;
}
function setUniqueUrls(collection) {
    const scriptsWithDuplicatedUrls = getDuplicatedScripts(collection);
    for (let i = 0; i < scriptsWithDuplicatedUrls.length; i++)
        scriptsWithDuplicatedUrls[i].url = scriptsWithDuplicatedUrls[i].url + '-' + testcafe_hammerhead_1.generateUniqueId(client_script_1.default.URL_UNIQUE_PART_LENGTH);
    return collection;
}
exports.setUniqueUrls = setUniqueUrls;
function findProblematicScripts(collection) {
    const nonEmptyScripts = collection.filter(s => !!s.content);
    const duplicatedContent = getDuplicatedScripts(nonEmptyScripts);
    const empty = collection.filter(s => !s.content);
    return {
        duplicatedContent,
        empty
    };
}
exports.findProblematicScripts = findProblematicScripts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3VzdG9tLWNsaWVudC1zY3JpcHRzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG1DQUErQjtBQUMvQixnRkFBZ0Y7QUFDaEYsNkRBQTBFO0FBQzFFLG9FQUEyQztBQUczQyxTQUFTLG9CQUFvQixDQUFFLFVBQTBCLEVBQUUsZ0JBQTBCLEVBQUUsZUFBbUU7SUFDdEosT0FBTyxjQUFLLENBQUMsVUFBVSxDQUFDO1NBQ25CLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztTQUN6QixNQUFNLENBQUMsZUFBZSxDQUFDO1NBQ3ZCLE1BQU0sRUFBRTtTQUNSLEtBQUssRUFBc0IsQ0FBQztBQUNyQyxDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBRSxVQUEwQjtJQUNyRCxNQUFNLGFBQWEsR0FBdUIsb0JBQW9CLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBaUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3SSxNQUFNLGlCQUFpQixHQUFtQixFQUFFLENBQUM7SUFFN0MsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUNqQyxNQUFNLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxZQUE4QixFQUFFLENBQUMsQ0FBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFaEgsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSx1Q0FBaUIsQ0FBQyxLQUFLLENBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLHVDQUF1QztZQUN0SSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBaUIsQ0FBQyxDQUFDO1lBRXpELE9BQU87U0FDVjtRQUVELE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLHVDQUFpQixDQUFDLEtBQUssQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7UUFFOUksSUFBSSxnQkFBZ0IsRUFBRTtZQUNsQixVQUFVO2lCQUNMLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsdUNBQWlCLENBQUMsS0FBSyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7aUJBQzVHLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDVixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBaUIsQ0FBQyxDQUFDO1lBQ2xELENBQUMsQ0FBQyxDQUFDO1NBQ1Y7YUFDSTtZQUNELFVBQVU7aUJBQ0wsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7aUJBQzNCLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDVixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBaUIsQ0FBQyxDQUFDO1lBQ2xELENBQUMsQ0FBQyxDQUFDO1NBQ1Y7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8saUJBQWlCLENBQUM7QUFDN0IsQ0FBQztBQUVELFNBQWdCLGFBQWEsQ0FBRSxVQUEwQjtJQUNyRCxNQUFNLHlCQUF5QixHQUFHLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRW5FLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO1FBQ3JELHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLHNDQUFnQixDQUFDLHVCQUFZLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUV0SSxPQUFPLFVBQVUsQ0FBQztBQUN0QixDQUFDO0FBUEQsc0NBT0M7QUFFRCxTQUFnQixzQkFBc0IsQ0FBRSxVQUEwQjtJQUM5RCxNQUFNLGVBQWUsR0FBZ0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekUsTUFBTSxpQkFBaUIsR0FBYyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMzRSxNQUFNLEtBQUssR0FBMEIsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXhFLE9BQU87UUFDSCxpQkFBaUI7UUFDakIsS0FBSztLQUNSLENBQUM7QUFDTixDQUFDO0FBVEQsd0RBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGFpbiB9IGZyb20gJ2xvZGFzaCc7XG4vLyBAdHMtaWdub3JlIENvdWxkIG5vdCBmaW5kIGEgZGVjbGFyYXRpb24gZmlsZSBmb3IgbW9kdWxlICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJ1xuaW1wb3J0IHsgZ2VuZXJhdGVVbmlxdWVJZCwgUmVxdWVzdEZpbHRlclJ1bGUgfSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCBDbGllbnRTY3JpcHQgZnJvbSAnLi9jbGllbnQtc2NyaXB0JztcbmltcG9ydCBQcm9ibGVtYXRpY1NjcmlwdHMgZnJvbSAnLi9wcm9ibGVtYXRpYy1zY3JpcHRzJztcblxuZnVuY3Rpb24gZ2V0U2NyaXB0R3JvdXBWYWx1ZXMgKGNvbGxlY3Rpb246IENsaWVudFNjcmlwdFtdLCBncm91cEJ5UHJlZGljYXRlOiBGdW5jdGlvbiwgcGlja0J5UHJlZGljYXRlPzogKCh2YWx1ZTogQ2xpZW50U2NyaXB0W10sIGtleTogc3RyaW5nKSA9PiB1bmtub3duKSk6IENsaWVudFNjcmlwdFtdW10ge1xuICAgIHJldHVybiBjaGFpbihjb2xsZWN0aW9uKVxuICAgICAgICAuZ3JvdXBCeShncm91cEJ5UHJlZGljYXRlKVxuICAgICAgICAucGlja0J5KHBpY2tCeVByZWRpY2F0ZSlcbiAgICAgICAgLnZhbHVlcygpXG4gICAgICAgIC52YWx1ZSgpIGFzIENsaWVudFNjcmlwdFtdW107XG59XG5cbmZ1bmN0aW9uIGdldER1cGxpY2F0ZWRTY3JpcHRzIChjb2xsZWN0aW9uOiBDbGllbnRTY3JpcHRbXSk6IENsaWVudFNjcmlwdFtdIHtcbiAgICBjb25zdCBjb250ZW50R3JvdXBzICAgICAgICAgICAgICAgICAgICAgPSBnZXRTY3JpcHRHcm91cFZhbHVlcyhjb2xsZWN0aW9uLCAoczogQ2xpZW50U2NyaXB0KSA9PiBzLmhhc2gsIChnOiBDbGllbnRTY3JpcHRbXSkgPT4gZy5sZW5ndGggPiAxKTtcbiAgICBjb25zdCBkdXBsaWNhdGVkU2NyaXB0czogQ2xpZW50U2NyaXB0W10gPSBbXTtcblxuICAgIGNvbnRlbnRHcm91cHMuZm9yRWFjaChjb250ZW50R3JvdXAgPT4ge1xuICAgICAgICBjb25zdCBwYWdlR3JvdXBzID0gZ2V0U2NyaXB0R3JvdXBWYWx1ZXMoY29udGVudEdyb3VwIGFzIENsaWVudFNjcmlwdFtdLCAoczogQ2xpZW50U2NyaXB0KSA9PiBzLnBhZ2UudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgaWYgKHBhZ2VHcm91cHMubGVuZ3RoID09PSAxICYmIFJlcXVlc3RGaWx0ZXJSdWxlLmlzQU5ZKChwYWdlR3JvdXBzWzBdWzBdIGFzIENsaWVudFNjcmlwdCkucGFnZSkpIHsgLyplc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLXBhcmVucyovXG4gICAgICAgICAgICBkdXBsaWNhdGVkU2NyaXB0cy5wdXNoKHBhZ2VHcm91cHNbMF1bMF0gYXMgQ2xpZW50U2NyaXB0KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZm9yQWxsUGFnZXNHcm91cCA9IHBhZ2VHcm91cHMuZmluZChwZyA9PiBSZXF1ZXN0RmlsdGVyUnVsZS5pc0FOWSgocGdbMF0gYXMgQ2xpZW50U2NyaXB0KS5wYWdlKSk7IC8qZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1wYXJlbnMqL1xuXG4gICAgICAgIGlmIChmb3JBbGxQYWdlc0dyb3VwKSB7XG4gICAgICAgICAgICBwYWdlR3JvdXBzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihwZyA9PiAhUmVxdWVzdEZpbHRlclJ1bGUuaXNBTlkoKHBnWzBdIGFzIENsaWVudFNjcmlwdCkucGFnZSkpIC8qZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1wYXJlbnMqL1xuICAgICAgICAgICAgICAgIC5mb3JFYWNoKHBnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHVwbGljYXRlZFNjcmlwdHMucHVzaChwZ1swXSBhcyBDbGllbnRTY3JpcHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFnZUdyb3Vwc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIocGcgPT4gcGcubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChwZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGR1cGxpY2F0ZWRTY3JpcHRzLnB1c2gocGdbMF0gYXMgQ2xpZW50U2NyaXB0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGR1cGxpY2F0ZWRTY3JpcHRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0VW5pcXVlVXJscyAoY29sbGVjdGlvbjogQ2xpZW50U2NyaXB0W10pOiBDbGllbnRTY3JpcHRbXSB7XG4gICAgY29uc3Qgc2NyaXB0c1dpdGhEdXBsaWNhdGVkVXJscyA9IGdldER1cGxpY2F0ZWRTY3JpcHRzKGNvbGxlY3Rpb24pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3JpcHRzV2l0aER1cGxpY2F0ZWRVcmxzLmxlbmd0aDsgaSsrKVxuICAgICAgICBzY3JpcHRzV2l0aER1cGxpY2F0ZWRVcmxzW2ldLnVybCA9IHNjcmlwdHNXaXRoRHVwbGljYXRlZFVybHNbaV0udXJsICsgJy0nICsgZ2VuZXJhdGVVbmlxdWVJZChDbGllbnRTY3JpcHQuVVJMX1VOSVFVRV9QQVJUX0xFTkdUSCk7XG5cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQcm9ibGVtYXRpY1NjcmlwdHMgKGNvbGxlY3Rpb246IENsaWVudFNjcmlwdFtdKTogUHJvYmxlbWF0aWNTY3JpcHRzIHtcbiAgICBjb25zdCBub25FbXB0eVNjcmlwdHMgICAgICAgICAgICAgID0gY29sbGVjdGlvbi5maWx0ZXIocyA9PiAhIXMuY29udGVudCk7XG4gICAgY29uc3QgZHVwbGljYXRlZENvbnRlbnQgICAgICAgICAgICA9IGdldER1cGxpY2F0ZWRTY3JpcHRzKG5vbkVtcHR5U2NyaXB0cyk7XG4gICAgY29uc3QgZW1wdHkgICAgICAgICAgICAgICAgICAgICAgICA9IGNvbGxlY3Rpb24uZmlsdGVyKHMgPT4gIXMuY29udGVudCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkdXBsaWNhdGVkQ29udGVudCxcbiAgICAgICAgZW1wdHlcbiAgICB9O1xufVxuIl19