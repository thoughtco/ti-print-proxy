"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const unstable_network_mode_1 = require("../browser/connection/unstable-network-mode");
const ACTIVE_SESSIONS_MAP = {};
const UPLOADS_DIR_NAME = '_uploads_';
class SessionController extends testcafe_hammerhead_1.Session {
    constructor(uploadRoots) {
        super(uploadRoots);
        this.currentTestRun = null;
    }
    // Hammerhead payload
    async getPayloadScript() {
        return this.currentTestRun.getPayloadScript();
    }
    async getIframePayloadScript() {
        return this.currentTestRun.getIframePayloadScript();
    }
    // Hammerhead handlers
    handleServiceMessage(msg, serverInfo) {
        if (this.currentTestRun[msg.cmd])
            return super.handleServiceMessage.call(this.currentTestRun, msg, serverInfo);
        return super.handleServiceMessage(msg, serverInfo);
    }
    getAuthCredentials() {
        return this.currentTestRun.getAuthCredentials();
    }
    handleFileDownload() {
        return this.currentTestRun.handleFileDownload();
    }
    handlePageError(ctx, err) {
        return this.currentTestRun.handlePageError(ctx, err);
    }
    onPageRequest(ctx) {
        const pendingStateSnapshot = this.pendingStateSnapshot;
        super.onPageRequest(ctx);
        if (pendingStateSnapshot && ctx.req.headers[unstable_network_mode_1.UNSTABLE_NETWORK_MODE_HEADER])
            this.pendingStateSnapshot = pendingStateSnapshot;
    }
    // API
    static getSession(testRun) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        if (!sessionInfo || !testRun.disablePageReloads) {
            if (sessionInfo && sessionInfo.url)
                SessionController.closeSession(testRun);
            let session = null;
            if (testRun.test.isLegacy)
                session = testRun;
            else {
                const fixtureDir = path_1.default.dirname(testRun.test.fixture.path);
                session = new SessionController([
                    path_1.default.resolve(UPLOADS_DIR_NAME),
                    path_1.default.resolve(fixtureDir, UPLOADS_DIR_NAME),
                    fixtureDir
                ]);
                session.currentTestRun = testRun;
            }
            session.disablePageCaching = testRun.disablePageCaching;
            session.allowMultipleWindows = testRun.allowMultipleWindows;
            if (session.allowMultipleWindows)
                session.windowId = testRun.browserConnection.activeWindowId;
            sessionInfo = {
                session: session,
                proxy: null,
                url: null
            };
            ACTIVE_SESSIONS_MAP[testRun.browserConnection.id] = sessionInfo;
        }
        else if (!testRun.test.isLegacy)
            sessionInfo.session.currentTestRun = testRun;
        return sessionInfo.session;
    }
    static getSessionUrl(testRun, proxy) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        if (!sessionInfo || testRun.test.isLegacy) {
            SessionController.getSession(testRun);
            sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        }
        if (!sessionInfo.url) {
            const pageUrl = testRun.test.pageUrl;
            const externalProxyHost = testRun.opts.proxy;
            let externalProxySettings = null;
            if (externalProxyHost) {
                externalProxySettings = {
                    url: externalProxyHost,
                    bypassRules: testRun.opts.proxyBypass
                };
            }
            sessionInfo.proxy = proxy;
            sessionInfo.url = proxy.openSession(pageUrl, sessionInfo.session, externalProxySettings);
        }
        return sessionInfo.url;
    }
    static closeSession(testRun) {
        const sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        if (!sessionInfo || !sessionInfo.url || !sessionInfo.proxy)
            return;
        sessionInfo.proxy.closeSession(sessionInfo.session);
        delete ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
    }
}
exports.default = SessionController;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,