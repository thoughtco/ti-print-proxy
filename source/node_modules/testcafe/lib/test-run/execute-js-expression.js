"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeAsyncJsExpression = exports.executeJsExpression = void 0;
const vm_1 = require("vm");
const runtime_1 = require("../errors/runtime");
const test_run_1 = require("../errors/test-run");
const execution_context_1 = require("../api/test-controller/execution-context");
const ERROR_LINE_COLUMN_REGEXP = /\[JS code\]:(\d+):(\d+)/;
const ERROR_LINE_OFFSET = -1;
// NOTE: do not beautify this code since offsets for error lines and columns are coded here
function wrapInAsync(expression) {
    return '(async function() {\n' +
        expression + ';\n' +
        '});';
}
function getErrorLineColumn(err) {
    if (err.isTestCafeError) {
        if (!err.callsite)
            return {};
        const stackFrames = err.callsite.stackFrames || [];
        const frameIndex = err.callsite.callsiteFrameIdx;
        const stackFrame = stackFrames[frameIndex];
        return stackFrame ? {
            line: stackFrame.getLineNumber(),
            column: stackFrame.getColumnNumber()
        } : {};
    }
    const result = err.stack && err.stack.match(ERROR_LINE_COLUMN_REGEXP);
    if (!result)
        return {};
    const line = result[1] ? parseInt(result[1], 10) : void 0;
    const column = result[2] ? parseInt(result[2], 10) : void 0;
    return { line, column };
}
function createErrorFormattingOptions() {
    return {
        filename: '[JS code]',
        lineOffset: ERROR_LINE_OFFSET
    };
}
function getExecutionContext(testController, options = {}) {
    const context = testController.getExecutionContext();
    // TODO: Find a way to avoid this assignment
    execution_context_1.setContextOptions(context, options);
    return context;
}
function isRuntimeError(err) {
    return err instanceof runtime_1.GeneralError ||
        err instanceof runtime_1.TestCompilationError ||
        err instanceof runtime_1.APIError ||
        err instanceof runtime_1.CompositeError;
}
function executeJsExpression(expression, testRun, options) {
    const context = getExecutionContext(testRun.controller, options);
    const errorOptions = createErrorFormattingOptions();
    return vm_1.runInContext(expression, context, errorOptions);
}
exports.executeJsExpression = executeJsExpression;
async function executeAsyncJsExpression(expression, testRun, callsite) {
    if (!expression || !expression.length)
        return Promise.resolve();
    const context = getExecutionContext(testRun.controller);
    const errorOptions = createErrorFormattingOptions(expression);
    try {
        return await vm_1.runInContext(wrapInAsync(expression), context, errorOptions)();
    }
    catch (err) {
        const { line, column } = getErrorLineColumn(err);
        if (err.isTestCafeError || isRuntimeError(err))
            throw new test_run_1.UncaughtTestCafeErrorInCustomScript(err, expression, line, column, callsite);
        throw new test_run_1.UncaughtErrorInCustomScript(err, expression, line, column, callsite);
    }
}
exports.executeAsyncJsExpression = executeAsyncJsExpression;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS1qcy1leHByZXNzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3QtcnVuL2V4ZWN1dGUtanMtZXhwcmVzc2lvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBa0M7QUFDbEMsK0NBSzJCO0FBQzNCLGlEQUFzRztBQUN0RyxnRkFBNkU7QUFFN0UsTUFBTSx3QkFBd0IsR0FBRyx5QkFBeUIsQ0FBQztBQUMzRCxNQUFNLGlCQUFpQixHQUFVLENBQUMsQ0FBQyxDQUFDO0FBRXBDLDJGQUEyRjtBQUMzRixTQUFTLFdBQVcsQ0FBRSxVQUFVO0lBQzVCLE9BQU8sdUJBQXVCO1FBQ3ZCLFVBQVUsR0FBRyxLQUFLO1FBQ2xCLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBRSxHQUFHO0lBQzVCLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTtRQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVE7WUFDYixPQUFPLEVBQUUsQ0FBQztRQUVkLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUNuRCxNQUFNLFVBQVUsR0FBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO1FBQ2xELE1BQU0sVUFBVSxHQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU1QyxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDaEIsSUFBSSxFQUFJLFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDbEMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxlQUFlLEVBQUU7U0FDdkMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ1Y7SUFFRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFFdEUsSUFBSSxDQUFDLE1BQU07UUFDUCxPQUFPLEVBQUUsQ0FBQztJQUVkLE1BQU0sSUFBSSxHQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU1RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQzVCLENBQUM7QUFFRCxTQUFTLDRCQUE0QjtJQUNqQyxPQUFPO1FBQ0gsUUFBUSxFQUFJLFdBQVc7UUFDdkIsVUFBVSxFQUFFLGlCQUFpQjtLQUNoQyxDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUUsY0FBYyxFQUFFLE9BQU8sR0FBRyxFQUFFO0lBQ3RELE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBRXJELDRDQUE0QztJQUM1QyxxQ0FBaUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEMsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFFLEdBQUc7SUFDeEIsT0FBTyxHQUFHLFlBQVksc0JBQVk7UUFDM0IsR0FBRyxZQUFZLDhCQUFvQjtRQUNuQyxHQUFHLFlBQVksa0JBQVE7UUFDdkIsR0FBRyxZQUFZLHdCQUFjLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQWdCLG1CQUFtQixDQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTztJQUM3RCxNQUFNLE9BQU8sR0FBUSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sWUFBWSxHQUFHLDRCQUE0QixFQUFFLENBQUM7SUFFcEQsT0FBTyxpQkFBWSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUxELGtEQUtDO0FBRU0sS0FBSyxVQUFVLHdCQUF3QixDQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUTtJQUN6RSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU07UUFDakMsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFN0IsTUFBTSxPQUFPLEdBQVEsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sWUFBWSxHQUFHLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTlELElBQUk7UUFDQSxPQUFPLE1BQU0saUJBQVksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUM7S0FDL0U7SUFDRCxPQUFPLEdBQUcsRUFBRTtRQUNSLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakQsSUFBSSxHQUFHLENBQUMsZUFBZSxJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUM7WUFDMUMsTUFBTSxJQUFJLDhDQUFtQyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUUzRixNQUFNLElBQUksc0NBQTJCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ2xGO0FBQ0wsQ0FBQztBQWxCRCw0REFrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBydW5JbkNvbnRleHQgfSBmcm9tICd2bSc7XG5pbXBvcnQge1xuICAgIEdlbmVyYWxFcnJvcixcbiAgICBUZXN0Q29tcGlsYXRpb25FcnJvcixcbiAgICBBUElFcnJvcixcbiAgICBDb21wb3NpdGVFcnJvclxufSBmcm9tICcuLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBVbmNhdWdodEVycm9ySW5DdXN0b21TY3JpcHQsIFVuY2F1Z2h0VGVzdENhZmVFcnJvckluQ3VzdG9tU2NyaXB0IH0gZnJvbSAnLi4vZXJyb3JzL3Rlc3QtcnVuJztcbmltcG9ydCB7IHNldENvbnRleHRPcHRpb25zIH0gZnJvbSAnLi4vYXBpL3Rlc3QtY29udHJvbGxlci9leGVjdXRpb24tY29udGV4dCc7XG5cbmNvbnN0IEVSUk9SX0xJTkVfQ09MVU1OX1JFR0VYUCA9IC9cXFtKUyBjb2RlXFxdOihcXGQrKTooXFxkKykvO1xuY29uc3QgRVJST1JfTElORV9PRkZTRVQgICAgICAgID0gLTE7XG5cbi8vIE5PVEU6IGRvIG5vdCBiZWF1dGlmeSB0aGlzIGNvZGUgc2luY2Ugb2Zmc2V0cyBmb3IgZXJyb3IgbGluZXMgYW5kIGNvbHVtbnMgYXJlIGNvZGVkIGhlcmVcbmZ1bmN0aW9uIHdyYXBJbkFzeW5jIChleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuICcoYXN5bmMgZnVuY3Rpb24oKSB7XFxuJyArXG4gICAgICAgICAgIGV4cHJlc3Npb24gKyAnO1xcbicgK1xuICAgICAgICAgICAnfSk7Jztcbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JMaW5lQ29sdW1uIChlcnIpIHtcbiAgICBpZiAoZXJyLmlzVGVzdENhZmVFcnJvcikge1xuICAgICAgICBpZiAoIWVyci5jYWxsc2l0ZSlcbiAgICAgICAgICAgIHJldHVybiB7fTtcblxuICAgICAgICBjb25zdCBzdGFja0ZyYW1lcyA9IGVyci5jYWxsc2l0ZS5zdGFja0ZyYW1lcyB8fCBbXTtcbiAgICAgICAgY29uc3QgZnJhbWVJbmRleCAgPSBlcnIuY2FsbHNpdGUuY2FsbHNpdGVGcmFtZUlkeDtcbiAgICAgICAgY29uc3Qgc3RhY2tGcmFtZSAgPSBzdGFja0ZyYW1lc1tmcmFtZUluZGV4XTtcblxuICAgICAgICByZXR1cm4gc3RhY2tGcmFtZSA/IHtcbiAgICAgICAgICAgIGxpbmU6ICAgc3RhY2tGcmFtZS5nZXRMaW5lTnVtYmVyKCksXG4gICAgICAgICAgICBjb2x1bW46IHN0YWNrRnJhbWUuZ2V0Q29sdW1uTnVtYmVyKClcbiAgICAgICAgfSA6IHt9O1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGVyci5zdGFjayAmJiBlcnIuc3RhY2subWF0Y2goRVJST1JfTElORV9DT0xVTU5fUkVHRVhQKTtcblxuICAgIGlmICghcmVzdWx0KVxuICAgICAgICByZXR1cm4ge307XG5cbiAgICBjb25zdCBsaW5lICAgPSByZXN1bHRbMV0gPyBwYXJzZUludChyZXN1bHRbMV0sIDEwKSA6IHZvaWQgMDtcbiAgICBjb25zdCBjb2x1bW4gPSByZXN1bHRbMl0gPyBwYXJzZUludChyZXN1bHRbMl0sIDEwKSA6IHZvaWQgMDtcblxuICAgIHJldHVybiB7IGxpbmUsIGNvbHVtbiB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJvckZvcm1hdHRpbmdPcHRpb25zICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZTogICAnW0pTIGNvZGVdJyxcbiAgICAgICAgbGluZU9mZnNldDogRVJST1JfTElORV9PRkZTRVRcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRFeGVjdXRpb25Db250ZXh0ICh0ZXN0Q29udHJvbGxlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRlc3RDb250cm9sbGVyLmdldEV4ZWN1dGlvbkNvbnRleHQoKTtcblxuICAgIC8vIFRPRE86IEZpbmQgYSB3YXkgdG8gYXZvaWQgdGhpcyBhc3NpZ25tZW50XG4gICAgc2V0Q29udGV4dE9wdGlvbnMoY29udGV4dCwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gY29udGV4dDtcbn1cblxuZnVuY3Rpb24gaXNSdW50aW1lRXJyb3IgKGVycikge1xuICAgIHJldHVybiBlcnIgaW5zdGFuY2VvZiBHZW5lcmFsRXJyb3IgfHxcbiAgICAgICAgICAgZXJyIGluc3RhbmNlb2YgVGVzdENvbXBpbGF0aW9uRXJyb3IgfHxcbiAgICAgICAgICAgZXJyIGluc3RhbmNlb2YgQVBJRXJyb3IgfHxcbiAgICAgICAgICAgZXJyIGluc3RhbmNlb2YgQ29tcG9zaXRlRXJyb3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlSnNFeHByZXNzaW9uIChleHByZXNzaW9uLCB0ZXN0UnVuLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY29udGV4dCAgICAgID0gZ2V0RXhlY3V0aW9uQ29udGV4dCh0ZXN0UnVuLmNvbnRyb2xsZXIsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGVycm9yT3B0aW9ucyA9IGNyZWF0ZUVycm9yRm9ybWF0dGluZ09wdGlvbnMoKTtcblxuICAgIHJldHVybiBydW5JbkNvbnRleHQoZXhwcmVzc2lvbiwgY29udGV4dCwgZXJyb3JPcHRpb25zKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVBc3luY0pzRXhwcmVzc2lvbiAoZXhwcmVzc2lvbiwgdGVzdFJ1biwgY2FsbHNpdGUpIHtcbiAgICBpZiAoIWV4cHJlc3Npb24gfHwgIWV4cHJlc3Npb24ubGVuZ3RoKVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICBjb25zdCBjb250ZXh0ICAgICAgPSBnZXRFeGVjdXRpb25Db250ZXh0KHRlc3RSdW4uY29udHJvbGxlcik7XG4gICAgY29uc3QgZXJyb3JPcHRpb25zID0gY3JlYXRlRXJyb3JGb3JtYXR0aW5nT3B0aW9ucyhleHByZXNzaW9uKTtcblxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBydW5JbkNvbnRleHQod3JhcEluQXN5bmMoZXhwcmVzc2lvbiksIGNvbnRleHQsIGVycm9yT3B0aW9ucykoKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zdCB7IGxpbmUsIGNvbHVtbiB9ID0gZ2V0RXJyb3JMaW5lQ29sdW1uKGVycik7XG5cbiAgICAgICAgaWYgKGVyci5pc1Rlc3RDYWZlRXJyb3IgfHwgaXNSdW50aW1lRXJyb3IoZXJyKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmNhdWdodFRlc3RDYWZlRXJyb3JJbkN1c3RvbVNjcmlwdChlcnIsIGV4cHJlc3Npb24sIGxpbmUsIGNvbHVtbiwgY2FsbHNpdGUpO1xuXG4gICAgICAgIHRocm93IG5ldyBVbmNhdWdodEVycm9ySW5DdXN0b21TY3JpcHQoZXJyLCBleHByZXNzaW9uLCBsaW5lLCBjb2x1bW4sIGNhbGxzaXRlKTtcbiAgICB9XG59XG4iXX0=